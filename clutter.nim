{.deadCodeElim: on.}

when defined(windows):
  const LIB_CLUTTER = "libclutter-1.0.0.dll"
elif defined(macosx):
  const LIB_CLUTTER = "libclutter-1.0.0.dylib"
else:
  const LIB_CLUTTER = "libclutter-1.0.0.so(|.0)"

{.pragma: libclutter, cdecl, dynlib: LIB_CLUTTER.}

import oldgtk3/[gobject, glib, pango, cairo, atk]

const
  CLUTTER_PATH_RELATIVE*:int = 32
  CLUTTER_PRIORITY_EVENTS* = G_PRIORITY_DEFAULT
  CLUTTER_CURRENT_TIME* = 0
  CLUTTER_EVENT_PROPAGATE* = false
  CLUTTER_EVENT_STOP* = true
  CLUTTER_BUTTON_PRIMARY* = 1
  CLUTTER_BUTTON_MIDDLE* = 2
  CLUTTER_BUTTON_SECONDARY* = 3

#[const
  CLUTTER_KEY_VoidSymbol* = 0x00FFFFFF
  CLUTTER_KEY_BackSpace* = 0x0000FF08
  CLUTTER_KEY_Tab* = 0x0000FF09
  CLUTTER_KEY_Linefeed* = 0x0000FF0A
  CLUTTER_KEY_Clear* = 0x0000FF0B
  CLUTTER_KEY_Return* = 0x0000FF0D
  CLUTTER_KEY_Pause* = 0x0000FF13
  CLUTTER_KEY_Scroll_Lock* = 0x0000FF14
  CLUTTER_KEY_Sys_Req* = 0x0000FF15
  CLUTTER_KEY_Escape* = 0x0000FF1B
  CLUTTER_KEY_Delete* = 0x0000FFFF
  CLUTTER_KEY_Multi_key* = 0x0000FF20
  CLUTTER_KEY_Codeinput* = 0x0000FF37
  CLUTTER_KEY_SingleCandidate* = 0x0000FF3C
  CLUTTER_KEY_MultipleCandidate* = 0x0000FF3D
  CLUTTER_KEY_PreviousCandidate* = 0x0000FF3E
  CLUTTER_KEY_Kanji* = 0x0000FF21
  CLUTTER_KEY_Muhenkan* = 0x0000FF22
  CLUTTER_KEY_Henkan_Mode* = 0x0000FF23
  CLUTTER_KEY_Henkan* = 0x0000FF23
  CLUTTER_KEY_Romaji* = 0x0000FF24
  CLUTTER_KEY_Hiragana* = 0x0000FF25
  CLUTTER_KEY_Katakana* = 0x0000FF26
  CLUTTER_KEY_Hiragana_Katakana* = 0x0000FF27
  CLUTTER_KEY_Zenkaku* = 0x0000FF28
  CLUTTER_KEY_Hankaku* = 0x0000FF29
  CLUTTER_KEY_Zenkaku_Hankaku* = 0x0000FF2A
  CLUTTER_KEY_Touroku* = 0x0000FF2B
  CLUTTER_KEY_Massyo* = 0x0000FF2C
  CLUTTER_KEY_Kana_Lock* = 0x0000FF2D
  CLUTTER_KEY_Kana_Shift* = 0x0000FF2E
  CLUTTER_KEY_Eisu_Shift* = 0x0000FF2F
  CLUTTER_KEY_Eisu_toggle* = 0x0000FF30
  CLUTTER_KEY_Kanji_Bangou* = 0x0000FF37
  CLUTTER_KEY_Zen_Koho* = 0x0000FF3D
  CLUTTER_KEY_Mae_Koho* = 0x0000FF3E
  CLUTTER_KEY_Home* = 0x0000FF50
  CLUTTER_KEY_Left* = 0x0000FF51
  CLUTTER_KEY_Up* = 0x0000FF52
  CLUTTER_KEY_Right* = 0x0000FF53
  CLUTTER_KEY_Down* = 0x0000FF54
  CLUTTER_KEY_Prior* = 0x0000FF55
  CLUTTER_KEY_Page_Up* = 0x0000FF55
  CLUTTER_KEY_Next* = 0x0000FF56
  CLUTTER_KEY_Page_Down* = 0x0000FF56
  CLUTTER_KEY_End* = 0x0000FF57
  CLUTTER_KEY_Begin* = 0x0000FF58
  CLUTTER_KEY_Select* = 0x0000FF60
  CLUTTER_KEY_Print* = 0x0000FF61
  CLUTTER_KEY_Execute* = 0x0000FF62
  CLUTTER_KEY_Insert* = 0x0000FF63
  CLUTTER_KEY_Undo* = 0x0000FF65
  CLUTTER_KEY_Redo* = 0x0000FF66
  CLUTTER_KEY_Menu* = 0x0000FF67
  CLUTTER_KEY_Find* = 0x0000FF68
  CLUTTER_KEY_Cancel* = 0x0000FF69
  CLUTTER_KEY_Help* = 0x0000FF6A
  CLUTTER_KEY_Break* = 0x0000FF6B
  CLUTTER_KEY_Mode_switch* = 0x0000FF7E
  CLUTTER_KEY_script_switch* = 0x0000FF7E
  CLUTTER_KEY_Num_Lock* = 0x0000FF7F
  CLUTTER_KEY_KP_Space* = 0x0000FF80
  CLUTTER_KEY_KP_Tab* = 0x0000FF89
  CLUTTER_KEY_KP_Enter* = 0x0000FF8D
  CLUTTER_KEY_KP_F1* = 0x0000FF91
  CLUTTER_KEY_KP_F2* = 0x0000FF92
  CLUTTER_KEY_KP_F3* = 0x0000FF93
  CLUTTER_KEY_KP_F4* = 0x0000FF94
  CLUTTER_KEY_KP_Home* = 0x0000FF95
  CLUTTER_KEY_KP_Left* = 0x0000FF96
  CLUTTER_KEY_KP_Up* = 0x0000FF97
  CLUTTER_KEY_KP_Right* = 0x0000FF98
  CLUTTER_KEY_KP_Down* = 0x0000FF99
  CLUTTER_KEY_KP_Prior* = 0x0000FF9A
  CLUTTER_KEY_KP_Page_Up* = 0x0000FF9A
  CLUTTER_KEY_KP_Next* = 0x0000FF9B
  CLUTTER_KEY_KP_Page_Down* = 0x0000FF9B
  CLUTTER_KEY_KP_End* = 0x0000FF9C
  CLUTTER_KEY_KP_Begin* = 0x0000FF9D
  CLUTTER_KEY_KP_Insert* = 0x0000FF9E
  CLUTTER_KEY_KP_Delete* = 0x0000FF9F
  CLUTTER_KEY_KP_Equal* = 0x0000FFBD
  CLUTTER_KEY_KP_Multiply* = 0x0000FFAA
  CLUTTER_KEY_KP_Add* = 0x0000FFAB
  CLUTTER_KEY_KP_Separator* = 0x0000FFAC
  CLUTTER_KEY_KP_Subtract* = 0x0000FFAD
  CLUTTER_KEY_KP_Decimal* = 0x0000FFAE
  CLUTTER_KEY_KP_Divide* = 0x0000FFAF
  CLUTTER_KEY_KP_0* = 0x0000FFB0
  CLUTTER_KEY_KP_1* = 0x0000FFB1
  CLUTTER_KEY_KP_2* = 0x0000FFB2
  CLUTTER_KEY_KP_3* = 0x0000FFB3
  CLUTTER_KEY_KP_4* = 0x0000FFB4
  CLUTTER_KEY_KP_5* = 0x0000FFB5
  CLUTTER_KEY_KP_6* = 0x0000FFB6
  CLUTTER_KEY_KP_7* = 0x0000FFB7
  CLUTTER_KEY_KP_8* = 0x0000FFB8
  CLUTTER_KEY_KP_9* = 0x0000FFB9
  CLUTTER_KEY_F1* = 0x0000FFBE
  CLUTTER_KEY_F2* = 0x0000FFBF
  CLUTTER_KEY_F3* = 0x0000FFC0
  CLUTTER_KEY_F4* = 0x0000FFC1
  CLUTTER_KEY_F5* = 0x0000FFC2
  CLUTTER_KEY_F6* = 0x0000FFC3
  CLUTTER_KEY_F7* = 0x0000FFC4
  CLUTTER_KEY_F8* = 0x0000FFC5
  CLUTTER_KEY_F9* = 0x0000FFC6
  CLUTTER_KEY_F10* = 0x0000FFC7
  CLUTTER_KEY_F11* = 0x0000FFC8
  CLUTTER_KEY_L1* = 0x0000FFC8
  CLUTTER_KEY_F12* = 0x0000FFC9
  CLUTTER_KEY_L2* = 0x0000FFC9
  CLUTTER_KEY_F13* = 0x0000FFCA
  CLUTTER_KEY_L3* = 0x0000FFCA
  CLUTTER_KEY_F14* = 0x0000FFCB
  CLUTTER_KEY_L4* = 0x0000FFCB
  CLUTTER_KEY_F15* = 0x0000FFCC
  CLUTTER_KEY_L5* = 0x0000FFCC
  CLUTTER_KEY_F16* = 0x0000FFCD
  CLUTTER_KEY_L6* = 0x0000FFCD
  CLUTTER_KEY_F17* = 0x0000FFCE
  CLUTTER_KEY_L7* = 0x0000FFCE
  CLUTTER_KEY_F18* = 0x0000FFCF
  CLUTTER_KEY_L8* = 0x0000FFCF
  CLUTTER_KEY_F19* = 0x0000FFD0
  CLUTTER_KEY_L9* = 0x0000FFD0
  CLUTTER_KEY_F20* = 0x0000FFD1
  CLUTTER_KEY_L10* = 0x0000FFD1
  CLUTTER_KEY_F21* = 0x0000FFD2
  CLUTTER_KEY_R1* = 0x0000FFD2
  CLUTTER_KEY_F22* = 0x0000FFD3
  CLUTTER_KEY_R2* = 0x0000FFD3
  CLUTTER_KEY_F23* = 0x0000FFD4
  CLUTTER_KEY_R3* = 0x0000FFD4
  CLUTTER_KEY_F24* = 0x0000FFD5
  CLUTTER_KEY_R4* = 0x0000FFD5
  CLUTTER_KEY_F25* = 0x0000FFD6
  CLUTTER_KEY_R5* = 0x0000FFD6
  CLUTTER_KEY_F26* = 0x0000FFD7
  CLUTTER_KEY_R6* = 0x0000FFD7
  CLUTTER_KEY_F27* = 0x0000FFD8
  CLUTTER_KEY_R7* = 0x0000FFD8
  CLUTTER_KEY_F28* = 0x0000FFD9
  CLUTTER_KEY_R8* = 0x0000FFD9
  CLUTTER_KEY_F29* = 0x0000FFDA
  CLUTTER_KEY_R9* = 0x0000FFDA
  CLUTTER_KEY_F30* = 0x0000FFDB
  CLUTTER_KEY_R10* = 0x0000FFDB
  CLUTTER_KEY_F31* = 0x0000FFDC
  CLUTTER_KEY_R11* = 0x0000FFDC
  CLUTTER_KEY_F32* = 0x0000FFDD
  CLUTTER_KEY_R12* = 0x0000FFDD
  CLUTTER_KEY_F33* = 0x0000FFDE
  CLUTTER_KEY_R13* = 0x0000FFDE
  CLUTTER_KEY_F34* = 0x0000FFDF
  CLUTTER_KEY_R14* = 0x0000FFDF
  CLUTTER_KEY_F35* = 0x0000FFE0
  CLUTTER_KEY_R15* = 0x0000FFE0
  CLUTTER_KEY_Shift_L* = 0x0000FFE1
  CLUTTER_KEY_Shift_R* = 0x0000FFE2
  CLUTTER_KEY_Control_L* = 0x0000FFE3
  CLUTTER_KEY_Control_R* = 0x0000FFE4
  CLUTTER_KEY_Caps_Lock* = 0x0000FFE5
  CLUTTER_KEY_Shift_Lock* = 0x0000FFE6
  CLUTTER_KEY_Meta_L* = 0x0000FFE7
  CLUTTER_KEY_Meta_R* = 0x0000FFE8
  CLUTTER_KEY_Alt_L* = 0x0000FFE9
  CLUTTER_KEY_Alt_R* = 0x0000FFEA
  CLUTTER_KEY_Super_L* = 0x0000FFEB
  CLUTTER_KEY_Super_R* = 0x0000FFEC
  CLUTTER_KEY_Hyper_L* = 0x0000FFED
  CLUTTER_KEY_Hyper_R* = 0x0000FFEE
  CLUTTER_KEY_ISO_Lock* = 0x0000FE01
  CLUTTER_KEY_ISO_Level2_Latch* = 0x0000FE02
  CLUTTER_KEY_ISO_Level3_Shift* = 0x0000FE03
  CLUTTER_KEY_ISO_Level3_Latch* = 0x0000FE04
  CLUTTER_KEY_ISO_Level3_Lock* = 0x0000FE05
  CLUTTER_KEY_ISO_Level5_Shift* = 0x0000FE11
  CLUTTER_KEY_ISO_Level5_Latch* = 0x0000FE12
  CLUTTER_KEY_ISO_Level5_Lock* = 0x0000FE13
  CLUTTER_KEY_ISO_Group_Shift* = 0x0000FF7E
  CLUTTER_KEY_ISO_Group_Latch* = 0x0000FE06
  CLUTTER_KEY_ISO_Group_Lock* = 0x0000FE07
  CLUTTER_KEY_ISO_Next_Group* = 0x0000FE08
  CLUTTER_KEY_ISO_Next_Group_Lock* = 0x0000FE09
  CLUTTER_KEY_ISO_Prev_Group* = 0x0000FE0A
  CLUTTER_KEY_ISO_Prev_Group_Lock* = 0x0000FE0B
  CLUTTER_KEY_ISO_First_Group* = 0x0000FE0C
  CLUTTER_KEY_ISO_First_Group_Lock* = 0x0000FE0D
  CLUTTER_KEY_ISO_Last_Group* = 0x0000FE0E
  CLUTTER_KEY_ISO_Last_Group_Lock* = 0x0000FE0F
  CLUTTER_KEY_ISO_Left_Tab* = 0x0000FE20
  CLUTTER_KEY_ISO_Move_Line_Up* = 0x0000FE21
  CLUTTER_KEY_ISO_Move_Line_Down* = 0x0000FE22
  CLUTTER_KEY_ISO_Partial_Line_Up* = 0x0000FE23
  CLUTTER_KEY_ISO_Partial_Line_Down* = 0x0000FE24
  CLUTTER_KEY_ISO_Partial_Space_Left* = 0x0000FE25
  CLUTTER_KEY_ISO_Partial_Space_Right* = 0x0000FE26
  CLUTTER_KEY_ISO_Set_Margin_Left* = 0x0000FE27
  CLUTTER_KEY_ISO_Set_Margin_Right* = 0x0000FE28
  CLUTTER_KEY_ISO_Release_Margin_Left* = 0x0000FE29
  CLUTTER_KEY_ISO_Release_Margin_Right* = 0x0000FE2A
  CLUTTER_KEY_ISO_Release_Both_Margins* = 0x0000FE2B
  CLUTTER_KEY_ISO_Fast_Cursor_Left* = 0x0000FE2C
  CLUTTER_KEY_ISO_Fast_Cursor_Right* = 0x0000FE2D
  CLUTTER_KEY_ISO_Fast_Cursor_Up* = 0x0000FE2E
  CLUTTER_KEY_ISO_Fast_Cursor_Down* = 0x0000FE2F
  CLUTTER_KEY_ISO_Continuous_Underline* = 0x0000FE30
  CLUTTER_KEY_ISO_Discontinuous_Underline* = 0x0000FE31
  CLUTTER_KEY_ISO_Emphasize* = 0x0000FE32
  CLUTTER_KEY_ISO_Center_Object* = 0x0000FE33
  CLUTTER_KEY_ISO_Enter* = 0x0000FE34
  CLUTTER_KEY_dead_grave* = 0x0000FE50
  CLUTTER_KEY_dead_acute* = 0x0000FE51
  CLUTTER_KEY_dead_circumflex* = 0x0000FE52
  CLUTTER_KEY_dead_tilde* = 0x0000FE53
  CLUTTER_KEY_dead_perispomeni* = 0x0000FE53
  CLUTTER_KEY_dead_macron* = 0x0000FE54
  CLUTTER_KEY_dead_breve* = 0x0000FE55
  CLUTTER_KEY_dead_abovedot* = 0x0000FE56
  CLUTTER_KEY_dead_diaeresis* = 0x0000FE57
  CLUTTER_KEY_dead_abovering* = 0x0000FE58
  CLUTTER_KEY_dead_doubleacute* = 0x0000FE59
  CLUTTER_KEY_dead_caron* = 0x0000FE5A
  CLUTTER_KEY_dead_cedilla* = 0x0000FE5B
  CLUTTER_KEY_dead_ogonek* = 0x0000FE5C
  CLUTTER_KEY_dead_iota* = 0x0000FE5D
  CLUTTER_KEY_dead_voiced_sound* = 0x0000FE5E
  CLUTTER_KEY_dead_semivoiced_sound* = 0x0000FE5F
  CLUTTER_KEY_dead_belowdot* = 0x0000FE60
  CLUTTER_KEY_dead_hook* = 0x0000FE61
  CLUTTER_KEY_dead_horn* = 0x0000FE62
  CLUTTER_KEY_dead_stroke* = 0x0000FE63
  CLUTTER_KEY_dead_abovecomma* = 0x0000FE64
  CLUTTER_KEY_dead_psili* = 0x0000FE64
  CLUTTER_KEY_dead_abovereversedcomma* = 0x0000FE65
  CLUTTER_KEY_dead_dasia* = 0x0000FE65
  CLUTTER_KEY_dead_doublegrave* = 0x0000FE66
  CLUTTER_KEY_dead_belowring* = 0x0000FE67
  CLUTTER_KEY_dead_belowmacron* = 0x0000FE68
  CLUTTER_KEY_dead_belowcircumflex* = 0x0000FE69
  CLUTTER_KEY_dead_belowtilde* = 0x0000FE6A
  CLUTTER_KEY_dead_belowbreve* = 0x0000FE6B
  CLUTTER_KEY_dead_belowdiaeresis* = 0x0000FE6C
  CLUTTER_KEY_dead_invertedbreve* = 0x0000FE6D
  CLUTTER_KEY_dead_belowcomma* = 0x0000FE6E
  CLUTTER_KEY_dead_currency* = 0x0000FE6F
  CLUTTER_KEY_dead_lowline* = 0x0000FE90
  CLUTTER_KEY_dead_aboveverticalline* = 0x0000FE91
  CLUTTER_KEY_dead_belowverticalline* = 0x0000FE92
  CLUTTER_KEY_dead_longsolidusoverlay* = 0x0000FE93
  CLUTTER_KEY_dead_a* = 0x0000FE80
  CLUTTER_KEY_dead_A_upper* = 0x0000FE81
  CLUTTER_KEY_dead_e* = 0x0000FE82
  CLUTTER_KEY_dead_E_upper* = 0x0000FE83
  CLUTTER_KEY_dead_i* = 0x0000FE84
  CLUTTER_KEY_dead_I_upper* = 0x0000FE85
  CLUTTER_KEY_dead_o* = 0x0000FE86
  CLUTTER_KEY_dead_O_upper* = 0x0000FE87
  CLUTTER_KEY_dead_u* = 0x0000FE88
  CLUTTER_KEY_dead_U_upper* = 0x0000FE89
  CLUTTER_KEY_dead_small_schwa* = 0x0000FE8A
  CLUTTER_KEY_dead_capital_schwa* = 0x0000FE8B
  CLUTTER_KEY_dead_greek* = 0x0000FE8C
  CLUTTER_KEY_First_Virtual_Screen* = 0x0000FED0
  CLUTTER_KEY_Prev_Virtual_Screen* = 0x0000FED1
  CLUTTER_KEY_Next_Virtual_Screen* = 0x0000FED2
  CLUTTER_KEY_Last_Virtual_Screen* = 0x0000FED4
  CLUTTER_KEY_Terminate_Server* = 0x0000FED5
  CLUTTER_KEY_AccessX_Enable* = 0x0000FE70
  CLUTTER_KEY_AccessX_Feedback_Enable* = 0x0000FE71
  CLUTTER_KEY_RepeatKeys_Enable* = 0x0000FE72
  CLUTTER_KEY_SlowKeys_Enable* = 0x0000FE73
  CLUTTER_KEY_BounceKeys_Enable* = 0x0000FE74
  CLUTTER_KEY_StickyKeys_Enable* = 0x0000FE75
  CLUTTER_KEY_MouseKeys_Enable* = 0x0000FE76
  CLUTTER_KEY_MouseKeys_Accel_Enable* = 0x0000FE77
  CLUTTER_KEY_Overlay1_Enable* = 0x0000FE78
  CLUTTER_KEY_Overlay2_Enable* = 0x0000FE79
  CLUTTER_KEY_AudibleBell_Enable* = 0x0000FE7A
  CLUTTER_KEY_Pointer_Left* = 0x0000FEE0
  CLUTTER_KEY_Pointer_Right* = 0x0000FEE1
  CLUTTER_KEY_Pointer_Up* = 0x0000FEE2
  CLUTTER_KEY_Pointer_Down* = 0x0000FEE3
  CLUTTER_KEY_Pointer_UpLeft* = 0x0000FEE4
  CLUTTER_KEY_Pointer_UpRight* = 0x0000FEE5
  CLUTTER_KEY_Pointer_DownLeft* = 0x0000FEE6
  CLUTTER_KEY_Pointer_DownRight* = 0x0000FEE7
  CLUTTER_KEY_Pointer_Button_Dflt* = 0x0000FEE8
  CLUTTER_KEY_Pointer_Button1* = 0x0000FEE9
  CLUTTER_KEY_Pointer_Button2* = 0x0000FEEA
  CLUTTER_KEY_Pointer_Button3* = 0x0000FEEB
  CLUTTER_KEY_Pointer_Button4* = 0x0000FEEC
  CLUTTER_KEY_Pointer_Button5* = 0x0000FEED
  CLUTTER_KEY_Pointer_DblClick_Dflt* = 0x0000FEEE
  CLUTTER_KEY_Pointer_DblClick1* = 0x0000FEEF
  CLUTTER_KEY_Pointer_DblClick2* = 0x0000FEF0
  CLUTTER_KEY_Pointer_DblClick3* = 0x0000FEF1
  CLUTTER_KEY_Pointer_DblClick4* = 0x0000FEF2
  CLUTTER_KEY_Pointer_DblClick5* = 0x0000FEF3
  CLUTTER_KEY_Pointer_Drag_Dflt* = 0x0000FEF4
  CLUTTER_KEY_Pointer_Drag1* = 0x0000FEF5
  CLUTTER_KEY_Pointer_Drag2* = 0x0000FEF6
  CLUTTER_KEY_Pointer_Drag3* = 0x0000FEF7
  CLUTTER_KEY_Pointer_Drag4* = 0x0000FEF8
  CLUTTER_KEY_Pointer_Drag5* = 0x0000FEFD
  CLUTTER_KEY_Pointer_EnableKeys* = 0x0000FEF9
  CLUTTER_KEY_Pointer_Accelerate* = 0x0000FEFA
  CLUTTER_KEY_Pointer_DfltBtnNext* = 0x0000FEFB
  CLUTTER_KEY_Pointer_DfltBtnPrev* = 0x0000FEFC
  CLUTTER_KEY_ch* = 0x0000FEA0
  CLUTTER_KEY_Ch* = 0x0000FEA1
  CLUTTER_KEY_CH* = 0x0000FEA2
  CLUTTER_KEY_c_h* = 0x0000FEA3
  CLUTTER_KEY_C_h* = 0x0000FEA4
  CLUTTER_KEY_C_H* = 0x0000FEA5
  CLUTTER_KEY_3270_Duplicate* = 0x0000FD01
  CLUTTER_KEY_3270_FieldMark* = 0x0000FD02
  CLUTTER_KEY_3270_Right2* = 0x0000FD03
  CLUTTER_KEY_3270_Left2* = 0x0000FD04
  CLUTTER_KEY_3270_BackTab* = 0x0000FD05
  CLUTTER_KEY_3270_EraseEOF* = 0x0000FD06
  CLUTTER_KEY_3270_EraseInput* = 0x0000FD07
  CLUTTER_KEY_3270_Reset* = 0x0000FD08
  CLUTTER_KEY_3270_Quit* = 0x0000FD09
  CLUTTER_KEY_3270_PA1* = 0x0000FD0A
  CLUTTER_KEY_3270_PA2* = 0x0000FD0B
  CLUTTER_KEY_3270_PA3* = 0x0000FD0C
  CLUTTER_KEY_3270_Test* = 0x0000FD0D
  CLUTTER_KEY_3270_Attn* = 0x0000FD0E
  CLUTTER_KEY_3270_CursorBlink* = 0x0000FD0F
  CLUTTER_KEY_3270_AltCursor* = 0x0000FD10
  CLUTTER_KEY_3270_KeyClick* = 0x0000FD11
  CLUTTER_KEY_3270_Jump* = 0x0000FD12
  CLUTTER_KEY_3270_Ident* = 0x0000FD13
  CLUTTER_KEY_3270_Rule* = 0x0000FD14
  CLUTTER_KEY_3270_Copy* = 0x0000FD15
  CLUTTER_KEY_3270_Play* = 0x0000FD16
  CLUTTER_KEY_3270_Setup* = 0x0000FD17
  CLUTTER_KEY_3270_Record* = 0x0000FD18
  CLUTTER_KEY_3270_ChangeScreen* = 0x0000FD19
  CLUTTER_KEY_3270_DeleteWord* = 0x0000FD1A
  CLUTTER_KEY_3270_ExSelect* = 0x0000FD1B
  CLUTTER_KEY_3270_CursorSelect* = 0x0000FD1C
  CLUTTER_KEY_3270_PrintScreen* = 0x0000FD1D
  CLUTTER_KEY_3270_Enter* = 0x0000FD1E
  CLUTTER_KEY_space* = 0x00000020
  CLUTTER_KEY_exclam* = 0x00000021
  CLUTTER_KEY_quotedbl* = 0x00000022
  CLUTTER_KEY_numbersign* = 0x00000023
  CLUTTER_KEY_dollar* = 0x00000024
  CLUTTER_KEY_percent* = 0x00000025
  CLUTTER_KEY_ampersand* = 0x00000026
  CLUTTER_KEY_apostrophe* = 0x00000027
  CLUTTER_KEY_quoteright* = 0x00000027
  CLUTTER_KEY_parenleft* = 0x00000028
  CLUTTER_KEY_parenright* = 0x00000029
  CLUTTER_KEY_asterisk* = 0x0000002A
  CLUTTER_KEY_plus* = 0x0000002B
  CLUTTER_KEY_comma* = 0x0000002C
  CLUTTER_KEY_minus* = 0x0000002D
  CLUTTER_KEY_period* = 0x0000002E
  CLUTTER_KEY_slash* = 0x0000002F
  CLUTTER_KEY_0* = 0x00000030
  CLUTTER_KEY_1* = 0x00000031
  CLUTTER_KEY_2* = 0x00000032
  CLUTTER_KEY_3* = 0x00000033
  CLUTTER_KEY_4* = 0x00000034
  CLUTTER_KEY_5* = 0x00000035
  CLUTTER_KEY_6* = 0x00000036
  CLUTTER_KEY_7* = 0x00000037
  CLUTTER_KEY_8* = 0x00000038
  CLUTTER_KEY_9* = 0x00000039
  CLUTTER_KEY_colon* = 0x0000003A
  CLUTTER_KEY_semicolon* = 0x0000003B
  CLUTTER_KEY_less* = 0x0000003C
  CLUTTER_KEY_equal* = 0x0000003D
  CLUTTER_KEY_greater* = 0x0000003E
  CLUTTER_KEY_question* = 0x0000003F
  CLUTTER_KEY_at* = 0x00000040
  CLUTTER_KEY_A_upper* = 0x00000041
  CLUTTER_KEY_B_upper* = 0x00000042
  CLUTTER_KEY_C_upper* = 0x00000043
  CLUTTER_KEY_D_upper* = 0x00000044
  CLUTTER_KEY_E_upper* = 0x00000045
  CLUTTER_KEY_F_upper* = 0x00000046
  CLUTTER_KEY_G_upper* = 0x00000047
  CLUTTER_KEY_H_upper* = 0x00000048
  CLUTTER_KEY_I_upper* = 0x00000049
  CLUTTER_KEY_J_upper* = 0x0000004A
  CLUTTER_KEY_K_upper* = 0x0000004B
  CLUTTER_KEY_L_upper* = 0x0000004C
  CLUTTER_KEY_M_upper* = 0x0000004D
  CLUTTER_KEY_N_upper* = 0x0000004E
  CLUTTER_KEY_O_upper* = 0x0000004F
  CLUTTER_KEY_P_upper* = 0x00000050
  CLUTTER_KEY_Q_upper* = 0x00000051
  CLUTTER_KEY_R_upper* = 0x00000052
  CLUTTER_KEY_S_upper* = 0x00000053
  CLUTTER_KEY_T_upper* = 0x00000054
  CLUTTER_KEY_U_upper* = 0x00000055
  CLUTTER_KEY_V_upper* = 0x00000056
  CLUTTER_KEY_W_upper* = 0x00000057
  CLUTTER_KEY_X_upper* = 0x00000058
  CLUTTER_KEY_Y_upper* = 0x00000059
  CLUTTER_KEY_Z_upper* = 0x0000005A
  CLUTTER_KEY_bracketleft* = 0x0000005B
  CLUTTER_KEY_backslash* = 0x0000005C
  CLUTTER_KEY_bracketright* = 0x0000005D
  CLUTTER_KEY_asciicircum* = 0x0000005E
  CLUTTER_KEY_underscore* = 0x0000005F
  CLUTTER_KEY_grave* = 0x00000060
  CLUTTER_KEY_quoteleft* = 0x00000060
  CLUTTER_KEY_a* = 0x00000061
  CLUTTER_KEY_b* = 0x00000062
  CLUTTER_KEY_c* = 0x00000063
  CLUTTER_KEY_d* = 0x00000064
  CLUTTER_KEY_e* = 0x00000065
  CLUTTER_KEY_f* = 0x00000066
  CLUTTER_KEY_g* = 0x00000067
  CLUTTER_KEY_h* = 0x00000068
  CLUTTER_KEY_i* = 0x00000069
  CLUTTER_KEY_j* = 0x0000006A
  CLUTTER_KEY_k* = 0x0000006B
  CLUTTER_KEY_l* = 0x0000006C
  CLUTTER_KEY_m* = 0x0000006D
  CLUTTER_KEY_n* = 0x0000006E
  CLUTTER_KEY_o* = 0x0000006F
  CLUTTER_KEY_p* = 0x00000070
  CLUTTER_KEY_q* = 0x00000071
  CLUTTER_KEY_r* = 0x00000072
  CLUTTER_KEY_s* = 0x00000073
  CLUTTER_KEY_t* = 0x00000074
  CLUTTER_KEY_u* = 0x00000075
  CLUTTER_KEY_v* = 0x00000076
  CLUTTER_KEY_w* = 0x00000077
  CLUTTER_KEY_x* = 0x00000078
  CLUTTER_KEY_y* = 0x00000079
  CLUTTER_KEY_z* = 0x0000007A
  CLUTTER_KEY_braceleft* = 0x0000007B
  CLUTTER_KEY_bar* = 0x0000007C
  CLUTTER_KEY_braceright* = 0x0000007D
  CLUTTER_KEY_asciitilde* = 0x0000007E
  CLUTTER_KEY_nobreakspace* = 0x000000A0
  CLUTTER_KEY_exclamdown* = 0x000000A1
  CLUTTER_KEY_cent* = 0x000000A2
  CLUTTER_KEY_sterling* = 0x000000A3
  CLUTTER_KEY_currency* = 0x000000A4
  CLUTTER_KEY_yen* = 0x000000A5
  CLUTTER_KEY_brokenbar* = 0x000000A6
  CLUTTER_KEY_section* = 0x000000A7
  CLUTTER_KEY_diaeresis* = 0x000000A8
  CLUTTER_KEY_copyright* = 0x000000A9
  CLUTTER_KEY_ordfeminine* = 0x000000AA
  CLUTTER_KEY_guillemotleft* = 0x000000AB
  CLUTTER_KEY_notsign* = 0x000000AC
  CLUTTER_KEY_hyphen* = 0x000000AD
  CLUTTER_KEY_registered* = 0x000000AE
  CLUTTER_KEY_macron* = 0x000000AF
  CLUTTER_KEY_degree* = 0x000000B0
  CLUTTER_KEY_plusminus* = 0x000000B1
  CLUTTER_KEY_twosuperior* = 0x000000B2
  CLUTTER_KEY_threesuperior* = 0x000000B3
  CLUTTER_KEY_acute* = 0x000000B4
  CLUTTER_KEY_mu* = 0x000000B5
  CLUTTER_KEY_paragraph* = 0x000000B6
  CLUTTER_KEY_periodcentered* = 0x000000B7
  CLUTTER_KEY_cedilla* = 0x000000B8
  CLUTTER_KEY_onesuperior* = 0x000000B9
  CLUTTER_KEY_masculine* = 0x000000BA
  CLUTTER_KEY_guillemotright* = 0x000000BB
  CLUTTER_KEY_onequarter* = 0x000000BC
  CLUTTER_KEY_onehalf* = 0x000000BD
  CLUTTER_KEY_threequarters* = 0x000000BE
  CLUTTER_KEY_questiondown* = 0x000000BF
  CLUTTER_KEY_Agrave* = 0x000000C0
  CLUTTER_KEY_Aacute* = 0x000000C1
  CLUTTER_KEY_Acircumflex* = 0x000000C2
  CLUTTER_KEY_Atilde* = 0x000000C3
  CLUTTER_KEY_Adiaeresis* = 0x000000C4
  CLUTTER_KEY_Aring* = 0x000000C5
  CLUTTER_KEY_AE* = 0x000000C6
  CLUTTER_KEY_Ccedilla* = 0x000000C7
  CLUTTER_KEY_Egrave* = 0x000000C8
  CLUTTER_KEY_Eacute* = 0x000000C9
  CLUTTER_KEY_Ecircumflex* = 0x000000CA
  CLUTTER_KEY_Ediaeresis* = 0x000000CB
  CLUTTER_KEY_Igrave* = 0x000000CC
  CLUTTER_KEY_Iacute* = 0x000000CD
  CLUTTER_KEY_Icircumflex* = 0x000000CE
  CLUTTER_KEY_Idiaeresis* = 0x000000CF
  CLUTTER_KEY_ETH* = 0x000000D0
  CLUTTER_KEY_Eth* = 0x000000D0
  CLUTTER_KEY_Ntilde* = 0x000000D1
  CLUTTER_KEY_Ograve* = 0x000000D2
  CLUTTER_KEY_Oacute* = 0x000000D3
  CLUTTER_KEY_Ocircumflex* = 0x000000D4
  CLUTTER_KEY_Otilde* = 0x000000D5
  CLUTTER_KEY_Odiaeresis* = 0x000000D6
  CLUTTER_KEY_multiply* = 0x000000D7
  CLUTTER_KEY_Oslash* = 0x000000D8
  CLUTTER_KEY_Ooblique* = 0x000000D8
  CLUTTER_KEY_Ugrave* = 0x000000D9
  CLUTTER_KEY_Uacute* = 0x000000DA
  CLUTTER_KEY_Ucircumflex* = 0x000000DB
  CLUTTER_KEY_Udiaeresis* = 0x000000DC
  CLUTTER_KEY_Yacute* = 0x000000DD
  CLUTTER_KEY_THORN* = 0x000000DE
  CLUTTER_KEY_Thorn* = 0x000000DE
  CLUTTER_KEY_ssharp* = 0x000000DF
  CLUTTER_KEY_agrave* = 0x000000E0
  CLUTTER_KEY_aacute* = 0x000000E1
  CLUTTER_KEY_acircumflex* = 0x000000E2
  CLUTTER_KEY_atilde* = 0x000000E3
  CLUTTER_KEY_adiaeresis* = 0x000000E4
  CLUTTER_KEY_aring* = 0x000000E5
  CLUTTER_KEY_ae* = 0x000000E6
  CLUTTER_KEY_ccedilla* = 0x000000E7
  CLUTTER_KEY_egrave* = 0x000000E8
  CLUTTER_KEY_eacute* = 0x000000E9
  CLUTTER_KEY_ecircumflex* = 0x000000EA
  CLUTTER_KEY_ediaeresis* = 0x000000EB
  CLUTTER_KEY_igrave* = 0x000000EC
  CLUTTER_KEY_iacute* = 0x000000ED
  CLUTTER_KEY_icircumflex* = 0x000000EE
  CLUTTER_KEY_idiaeresis* = 0x000000EF
  CLUTTER_KEY_eth* = 0x000000F0
  CLUTTER_KEY_ntilde* = 0x000000F1
  CLUTTER_KEY_ograve* = 0x000000F2
  CLUTTER_KEY_oacute* = 0x000000F3
  CLUTTER_KEY_ocircumflex* = 0x000000F4
  CLUTTER_KEY_otilde* = 0x000000F5
  CLUTTER_KEY_odiaeresis* = 0x000000F6
  CLUTTER_KEY_division* = 0x000000F7
  CLUTTER_KEY_oslash* = 0x000000F8
  CLUTTER_KEY_ooblique* = 0x000000F8
  CLUTTER_KEY_ugrave* = 0x000000F9
  CLUTTER_KEY_uacute* = 0x000000FA
  CLUTTER_KEY_ucircumflex* = 0x000000FB
  CLUTTER_KEY_udiaeresis* = 0x000000FC
  CLUTTER_KEY_yacute* = 0x000000FD
  CLUTTER_KEY_thorn* = 0x000000FE
  CLUTTER_KEY_ydiaeresis* = 0x000000FF
  CLUTTER_KEY_Aogonek* = 0x000001A1
  CLUTTER_KEY_breve* = 0x000001A2
  CLUTTER_KEY_Lstroke* = 0x000001A3
  CLUTTER_KEY_Lcaron* = 0x000001A5
  CLUTTER_KEY_Sacute* = 0x000001A6
  CLUTTER_KEY_Scaron* = 0x000001A9
  CLUTTER_KEY_Scedilla* = 0x000001AA
  CLUTTER_KEY_Tcaron* = 0x000001AB
  CLUTTER_KEY_Zacute* = 0x000001AC
  CLUTTER_KEY_Zcaron* = 0x000001AE
  CLUTTER_KEY_Zabovedot* = 0x000001AF
  CLUTTER_KEY_aogonek* = 0x000001B1
  CLUTTER_KEY_ogonek* = 0x000001B2
  CLUTTER_KEY_lstroke* = 0x000001B3
  CLUTTER_KEY_lcaron* = 0x000001B5
  CLUTTER_KEY_sacute* = 0x000001B6
  CLUTTER_KEY_caron* = 0x000001B7
  CLUTTER_KEY_scaron* = 0x000001B9
  CLUTTER_KEY_scedilla* = 0x000001BA
  CLUTTER_KEY_tcaron* = 0x000001BB
  CLUTTER_KEY_zacute* = 0x000001BC
  CLUTTER_KEY_doubleacute* = 0x000001BD
  CLUTTER_KEY_zcaron* = 0x000001BE
  CLUTTER_KEY_zabovedot* = 0x000001BF
  CLUTTER_KEY_Racute* = 0x000001C0
  CLUTTER_KEY_Abreve* = 0x000001C3
  CLUTTER_KEY_Lacute* = 0x000001C5
  CLUTTER_KEY_Cacute* = 0x000001C6
  CLUTTER_KEY_Ccaron* = 0x000001C8
  CLUTTER_KEY_Eogonek* = 0x000001CA
  CLUTTER_KEY_Ecaron* = 0x000001CC
  CLUTTER_KEY_Dcaron* = 0x000001CF
  CLUTTER_KEY_Dstroke* = 0x000001D0
  CLUTTER_KEY_Nacute* = 0x000001D1
  CLUTTER_KEY_Ncaron* = 0x000001D2
  CLUTTER_KEY_Odoubleacute* = 0x000001D5
  CLUTTER_KEY_Rcaron* = 0x000001D8
  CLUTTER_KEY_Uring* = 0x000001D9
  CLUTTER_KEY_Udoubleacute* = 0x000001DB
  CLUTTER_KEY_Tcedilla* = 0x000001DE
  CLUTTER_KEY_racute* = 0x000001E0
  CLUTTER_KEY_abreve* = 0x000001E3
  CLUTTER_KEY_lacute* = 0x000001E5
  CLUTTER_KEY_cacute* = 0x000001E6
  CLUTTER_KEY_ccaron* = 0x000001E8
  CLUTTER_KEY_eogonek* = 0x000001EA
  CLUTTER_KEY_ecaron* = 0x000001EC
  CLUTTER_KEY_dcaron* = 0x000001EF
  CLUTTER_KEY_dstroke* = 0x000001F0
  CLUTTER_KEY_nacute* = 0x000001F1
  CLUTTER_KEY_ncaron* = 0x000001F2
  CLUTTER_KEY_odoubleacute* = 0x000001F5
  CLUTTER_KEY_rcaron* = 0x000001F8
  CLUTTER_KEY_uring* = 0x000001F9
  CLUTTER_KEY_udoubleacute* = 0x000001FB
  CLUTTER_KEY_tcedilla* = 0x000001FE
  CLUTTER_KEY_abovedot* = 0x000001FF
  CLUTTER_KEY_Hstroke* = 0x000002A1
  CLUTTER_KEY_Hcircumflex* = 0x000002A6
  CLUTTER_KEY_Iabovedot* = 0x000002A9
  CLUTTER_KEY_Gbreve* = 0x000002AB
  CLUTTER_KEY_Jcircumflex* = 0x000002AC
  CLUTTER_KEY_hstroke* = 0x000002B1
  CLUTTER_KEY_hcircumflex* = 0x000002B6
  CLUTTER_KEY_idotless* = 0x000002B9
  CLUTTER_KEY_gbreve* = 0x000002BB
  CLUTTER_KEY_jcircumflex* = 0x000002BC
  CLUTTER_KEY_Cabovedot* = 0x000002C5
  CLUTTER_KEY_Ccircumflex* = 0x000002C6
  CLUTTER_KEY_Gabovedot* = 0x000002D5
  CLUTTER_KEY_Gcircumflex* = 0x000002D8
  CLUTTER_KEY_Ubreve* = 0x000002DD
  CLUTTER_KEY_Scircumflex* = 0x000002DE
  CLUTTER_KEY_cabovedot* = 0x000002E5
  CLUTTER_KEY_ccircumflex* = 0x000002E6
  CLUTTER_KEY_gabovedot* = 0x000002F5
  CLUTTER_KEY_gcircumflex* = 0x000002F8
  CLUTTER_KEY_ubreve* = 0x000002FD
  CLUTTER_KEY_scircumflex* = 0x000002FE
  CLUTTER_KEY_kra* = 0x000003A2
  CLUTTER_KEY_kappa* = 0x000003A2
  CLUTTER_KEY_Rcedilla* = 0x000003A3
  CLUTTER_KEY_Itilde* = 0x000003A5
  CLUTTER_KEY_Lcedilla* = 0x000003A6
  CLUTTER_KEY_Emacron* = 0x000003AA
  CLUTTER_KEY_Gcedilla* = 0x000003AB
  CLUTTER_KEY_Tslash* = 0x000003AC
  CLUTTER_KEY_rcedilla* = 0x000003B3
  CLUTTER_KEY_itilde* = 0x000003B5
  CLUTTER_KEY_lcedilla* = 0x000003B6
  CLUTTER_KEY_emacron* = 0x000003BA
  CLUTTER_KEY_gcedilla* = 0x000003BB
  CLUTTER_KEY_tslash* = 0x000003BC
  CLUTTER_KEY_ENG* = 0x000003BD
  CLUTTER_KEY_eng* = 0x000003BF
  CLUTTER_KEY_Amacron* = 0x000003C0
  CLUTTER_KEY_Iogonek* = 0x000003C7
  CLUTTER_KEY_Eabovedot* = 0x000003CC
  CLUTTER_KEY_Imacron* = 0x000003CF
  CLUTTER_KEY_Ncedilla* = 0x000003D1
  CLUTTER_KEY_Omacron* = 0x000003D2
  CLUTTER_KEY_Kcedilla* = 0x000003D3
  CLUTTER_KEY_Uogonek* = 0x000003D9
  CLUTTER_KEY_Utilde* = 0x000003DD
  CLUTTER_KEY_Umacron* = 0x000003DE
  CLUTTER_KEY_amacron* = 0x000003E0
  CLUTTER_KEY_iogonek* = 0x000003E7
  CLUTTER_KEY_eabovedot* = 0x000003EC
  CLUTTER_KEY_imacron* = 0x000003EF
  CLUTTER_KEY_ncedilla* = 0x000003F1
  CLUTTER_KEY_omacron* = 0x000003F2
  CLUTTER_KEY_kcedilla* = 0x000003F3
  CLUTTER_KEY_uogonek* = 0x000003F9
  CLUTTER_KEY_utilde* = 0x000003FD
  CLUTTER_KEY_umacron* = 0x000003FE
  CLUTTER_KEY_Wcircumflex* = 0x01000174
  CLUTTER_KEY_wcircumflex* = 0x01000175
  CLUTTER_KEY_Ycircumflex* = 0x01000176
  CLUTTER_KEY_ycircumflex* = 0x01000177
  CLUTTER_KEY_Babovedot* = 0x01001E02
  CLUTTER_KEY_babovedot* = 0x01001E03
  CLUTTER_KEY_Dabovedot* = 0x01001E0A
  CLUTTER_KEY_dabovedot* = 0x01001E0B
  CLUTTER_KEY_Fabovedot* = 0x01001E1E
  CLUTTER_KEY_fabovedot* = 0x01001E1F
  CLUTTER_KEY_Mabovedot* = 0x01001E40
  CLUTTER_KEY_mabovedot* = 0x01001E41
  CLUTTER_KEY_Pabovedot* = 0x01001E56
  CLUTTER_KEY_pabovedot* = 0x01001E57
  CLUTTER_KEY_Sabovedot* = 0x01001E60
  CLUTTER_KEY_sabovedot* = 0x01001E61
  CLUTTER_KEY_Tabovedot* = 0x01001E6A
  CLUTTER_KEY_tabovedot* = 0x01001E6B
  CLUTTER_KEY_Wgrave* = 0x01001E80
  CLUTTER_KEY_wgrave* = 0x01001E81
  CLUTTER_KEY_Wacute* = 0x01001E82
  CLUTTER_KEY_wacute* = 0x01001E83
  CLUTTER_KEY_Wdiaeresis* = 0x01001E84
  CLUTTER_KEY_wdiaeresis* = 0x01001E85
  CLUTTER_KEY_Ygrave* = 0x01001EF2
  CLUTTER_KEY_ygrave* = 0x01001EF3
  CLUTTER_KEY_OE* = 0x000013BC
  CLUTTER_KEY_oe* = 0x000013BD
  CLUTTER_KEY_Ydiaeresis* = 0x000013BE
  CLUTTER_KEY_overline* = 0x0000047E
  CLUTTER_KEY_kana_fullstop* = 0x000004A1
  CLUTTER_KEY_kana_openingbracket* = 0x000004A2
  CLUTTER_KEY_kana_closingbracket* = 0x000004A3
  CLUTTER_KEY_kana_comma* = 0x000004A4
  CLUTTER_KEY_kana_conjunctive* = 0x000004A5
  CLUTTER_KEY_kana_middledot* = 0x000004A5
  CLUTTER_KEY_kana_WO* = 0x000004A6
  CLUTTER_KEY_kana_a* = 0x000004A7
  CLUTTER_KEY_kana_i* = 0x000004A8
  CLUTTER_KEY_kana_u* = 0x000004A9
  CLUTTER_KEY_kana_e* = 0x000004AA
  CLUTTER_KEY_kana_o* = 0x000004AB
  CLUTTER_KEY_kana_ya* = 0x000004AC
  CLUTTER_KEY_kana_yu* = 0x000004AD
  CLUTTER_KEY_kana_yo* = 0x000004AE
  CLUTTER_KEY_kana_tsu* = 0x000004AF
  CLUTTER_KEY_kana_tu* = 0x000004AF
  CLUTTER_KEY_prolongedsound* = 0x000004B0
  CLUTTER_KEY_kana_A* = 0x000004B1
  CLUTTER_KEY_kana_I* = 0x000004B2
  CLUTTER_KEY_kana_U* = 0x000004B3
  CLUTTER_KEY_kana_E* = 0x000004B4
  CLUTTER_KEY_kana_O* = 0x000004B5
  CLUTTER_KEY_kana_KA* = 0x000004B6
  CLUTTER_KEY_kana_KI* = 0x000004B7
  CLUTTER_KEY_kana_KU* = 0x000004B8
  CLUTTER_KEY_kana_KE* = 0x000004B9
  CLUTTER_KEY_kana_KO* = 0x000004BA
  CLUTTER_KEY_kana_SA* = 0x000004BB
  CLUTTER_KEY_kana_SHI* = 0x000004BC
  CLUTTER_KEY_kana_SU* = 0x000004BD
  CLUTTER_KEY_kana_SE* = 0x000004BE
  CLUTTER_KEY_kana_SO* = 0x000004BF
  CLUTTER_KEY_kana_TA* = 0x000004C0
  CLUTTER_KEY_kana_CHI* = 0x000004C1
  CLUTTER_KEY_kana_TI* = 0x000004C1
  CLUTTER_KEY_kana_TSU* = 0x000004C2
  CLUTTER_KEY_kana_TU* = 0x000004C2
  CLUTTER_KEY_kana_TE* = 0x000004C3
  CLUTTER_KEY_kana_TO* = 0x000004C4
  CLUTTER_KEY_kana_NA* = 0x000004C5
  CLUTTER_KEY_kana_NI* = 0x000004C6
  CLUTTER_KEY_kana_NU* = 0x000004C7
  CLUTTER_KEY_kana_NE* = 0x000004C8
  CLUTTER_KEY_kana_NO* = 0x000004C9
  CLUTTER_KEY_kana_HA* = 0x000004CA
  CLUTTER_KEY_kana_HI* = 0x000004CB
  CLUTTER_KEY_kana_FU* = 0x000004CC
  CLUTTER_KEY_kana_HU* = 0x000004CC
  CLUTTER_KEY_kana_HE* = 0x000004CD
  CLUTTER_KEY_kana_HO* = 0x000004CE
  CLUTTER_KEY_kana_MA* = 0x000004CF
  CLUTTER_KEY_kana_MI* = 0x000004D0
  CLUTTER_KEY_kana_MU* = 0x000004D1
  CLUTTER_KEY_kana_ME* = 0x000004D2
  CLUTTER_KEY_kana_MO* = 0x000004D3
  CLUTTER_KEY_kana_YA* = 0x000004D4
  CLUTTER_KEY_kana_YU* = 0x000004D5
  CLUTTER_KEY_kana_YO* = 0x000004D6
  CLUTTER_KEY_kana_RA* = 0x000004D7
  CLUTTER_KEY_kana_RI* = 0x000004D8
  CLUTTER_KEY_kana_RU* = 0x000004D9
  CLUTTER_KEY_kana_RE* = 0x000004DA
  CLUTTER_KEY_kana_RO* = 0x000004DB
  CLUTTER_KEY_kana_WA* = 0x000004DC
  CLUTTER_KEY_kana_N* = 0x000004DD
  CLUTTER_KEY_voicedsound* = 0x000004DE
  CLUTTER_KEY_semivoicedsound* = 0x000004DF
  CLUTTER_KEY_kana_switch* = 0x0000FF7E
  CLUTTER_KEY_Farsi_0* = 0x010006F0
  CLUTTER_KEY_Farsi_1* = 0x010006F1
  CLUTTER_KEY_Farsi_2* = 0x010006F2
  CLUTTER_KEY_Farsi_3* = 0x010006F3
  CLUTTER_KEY_Farsi_4* = 0x010006F4
  CLUTTER_KEY_Farsi_5* = 0x010006F5
  CLUTTER_KEY_Farsi_6* = 0x010006F6
  CLUTTER_KEY_Farsi_7* = 0x010006F7
  CLUTTER_KEY_Farsi_8* = 0x010006F8
  CLUTTER_KEY_Farsi_9* = 0x010006F9
  CLUTTER_KEY_Arabic_percent* = 0x0100066A
  CLUTTER_KEY_Arabic_superscript_alef* = 0x01000670
  CLUTTER_KEY_Arabic_tteh* = 0x01000679
  CLUTTER_KEY_Arabic_peh* = 0x0100067E
  CLUTTER_KEY_Arabic_tcheh* = 0x01000686
  CLUTTER_KEY_Arabic_ddal* = 0x01000688
  CLUTTER_KEY_Arabic_rreh* = 0x01000691
  CLUTTER_KEY_Arabic_comma* = 0x000005AC
  CLUTTER_KEY_Arabic_fullstop* = 0x010006D4
  CLUTTER_KEY_Arabic_0* = 0x01000660
  CLUTTER_KEY_Arabic_1* = 0x01000661
  CLUTTER_KEY_Arabic_2* = 0x01000662
  CLUTTER_KEY_Arabic_3* = 0x01000663
  CLUTTER_KEY_Arabic_4* = 0x01000664
  CLUTTER_KEY_Arabic_5* = 0x01000665
  CLUTTER_KEY_Arabic_6* = 0x01000666
  CLUTTER_KEY_Arabic_7* = 0x01000667
  CLUTTER_KEY_Arabic_8* = 0x01000668
  CLUTTER_KEY_Arabic_9* = 0x01000669
  CLUTTER_KEY_Arabic_semicolon* = 0x000005BB
  CLUTTER_KEY_Arabic_question_mark* = 0x000005BF
  CLUTTER_KEY_Arabic_hamza* = 0x000005C1
  CLUTTER_KEY_Arabic_maddaonalef* = 0x000005C2
  CLUTTER_KEY_Arabic_hamzaonalef* = 0x000005C3
  CLUTTER_KEY_Arabic_hamzaonwaw* = 0x000005C4
  CLUTTER_KEY_Arabic_hamzaunderalef* = 0x000005C5
  CLUTTER_KEY_Arabic_hamzaonyeh* = 0x000005C6
  CLUTTER_KEY_Arabic_alef* = 0x000005C7
  CLUTTER_KEY_Arabic_beh* = 0x000005C8
  CLUTTER_KEY_Arabic_tehmarbuta* = 0x000005C9
  CLUTTER_KEY_Arabic_teh* = 0x000005CA
  CLUTTER_KEY_Arabic_theh* = 0x000005CB
  CLUTTER_KEY_Arabic_jeem* = 0x000005CC
  CLUTTER_KEY_Arabic_hah* = 0x000005CD
  CLUTTER_KEY_Arabic_khah* = 0x000005CE
  CLUTTER_KEY_Arabic_dal* = 0x000005CF
  CLUTTER_KEY_Arabic_thal* = 0x000005D0
  CLUTTER_KEY_Arabic_ra* = 0x000005D1
  CLUTTER_KEY_Arabic_zain* = 0x000005D2
  CLUTTER_KEY_Arabic_seen* = 0x000005D3
  CLUTTER_KEY_Arabic_sheen* = 0x000005D4
  CLUTTER_KEY_Arabic_sad* = 0x000005D5
  CLUTTER_KEY_Arabic_dad* = 0x000005D6
  CLUTTER_KEY_Arabic_tah* = 0x000005D7
  CLUTTER_KEY_Arabic_zah* = 0x000005D8
  CLUTTER_KEY_Arabic_ain* = 0x000005D9
  CLUTTER_KEY_Arabic_ghain* = 0x000005DA
  CLUTTER_KEY_Arabic_tatweel* = 0x000005E0
  CLUTTER_KEY_Arabic_feh* = 0x000005E1
  CLUTTER_KEY_Arabic_qaf* = 0x000005E2
  CLUTTER_KEY_Arabic_kaf* = 0x000005E3
  CLUTTER_KEY_Arabic_lam* = 0x000005E4
  CLUTTER_KEY_Arabic_meem* = 0x000005E5
  CLUTTER_KEY_Arabic_noon* = 0x000005E6
  CLUTTER_KEY_Arabic_ha* = 0x000005E7
  CLUTTER_KEY_Arabic_heh* = 0x000005E7
  CLUTTER_KEY_Arabic_waw* = 0x000005E8
  CLUTTER_KEY_Arabic_alefmaksura* = 0x000005E9
  CLUTTER_KEY_Arabic_yeh* = 0x000005EA
  CLUTTER_KEY_Arabic_fathatan* = 0x000005EB
  CLUTTER_KEY_Arabic_dammatan* = 0x000005EC
  CLUTTER_KEY_Arabic_kasratan* = 0x000005ED
  CLUTTER_KEY_Arabic_fatha* = 0x000005EE
  CLUTTER_KEY_Arabic_damma* = 0x000005EF
  CLUTTER_KEY_Arabic_kasra* = 0x000005F0
  CLUTTER_KEY_Arabic_shadda* = 0x000005F1
  CLUTTER_KEY_Arabic_sukun* = 0x000005F2
  CLUTTER_KEY_Arabic_madda_above* = 0x01000653
  CLUTTER_KEY_Arabic_hamza_above* = 0x01000654
  CLUTTER_KEY_Arabic_hamza_below* = 0x01000655
  CLUTTER_KEY_Arabic_jeh* = 0x01000698
  CLUTTER_KEY_Arabic_veh* = 0x010006A4
  CLUTTER_KEY_Arabic_keheh* = 0x010006A9
  CLUTTER_KEY_Arabic_gaf* = 0x010006AF
  CLUTTER_KEY_Arabic_noon_ghunna* = 0x010006BA
  CLUTTER_KEY_Arabic_heh_doachashmee* = 0x010006BE
  CLUTTER_KEY_Farsi_yeh* = 0x010006CC
  CLUTTER_KEY_Arabic_farsi_yeh* = 0x010006CC
  CLUTTER_KEY_Arabic_yeh_baree* = 0x010006D2
  CLUTTER_KEY_Arabic_heh_goal* = 0x010006C1
  CLUTTER_KEY_Arabic_switch* = 0x0000FF7E
  CLUTTER_KEY_Cyrillic_GHE_bar* = 0x01000492
  CLUTTER_KEY_Cyrillic_ghe_bar* = 0x01000493
  CLUTTER_KEY_Cyrillic_ZHE_descender* = 0x01000496
  CLUTTER_KEY_Cyrillic_zhe_descender* = 0x01000497
  CLUTTER_KEY_Cyrillic_KA_descender* = 0x0100049A
  CLUTTER_KEY_Cyrillic_ka_descender* = 0x0100049B
  CLUTTER_KEY_Cyrillic_KA_vertstroke* = 0x0100049C
  CLUTTER_KEY_Cyrillic_ka_vertstroke* = 0x0100049D
  CLUTTER_KEY_Cyrillic_EN_descender* = 0x010004A2
  CLUTTER_KEY_Cyrillic_en_descender* = 0x010004A3
  CLUTTER_KEY_Cyrillic_U_straight* = 0x010004AE
  CLUTTER_KEY_Cyrillic_u_straight* = 0x010004AF
  CLUTTER_KEY_Cyrillic_U_straight_bar* = 0x010004B0
  CLUTTER_KEY_Cyrillic_u_straight_bar* = 0x010004B1
  CLUTTER_KEY_Cyrillic_HA_descender* = 0x010004B2
  CLUTTER_KEY_Cyrillic_ha_descender* = 0x010004B3
  CLUTTER_KEY_Cyrillic_CHE_descender* = 0x010004B6
  CLUTTER_KEY_Cyrillic_che_descender* = 0x010004B7
  CLUTTER_KEY_Cyrillic_CHE_vertstroke* = 0x010004B8
  CLUTTER_KEY_Cyrillic_che_vertstroke* = 0x010004B9
  CLUTTER_KEY_Cyrillic_SHHA* = 0x010004BA
  CLUTTER_KEY_Cyrillic_shha* = 0x010004BB
  CLUTTER_KEY_Cyrillic_SCHWA* = 0x010004D8
  CLUTTER_KEY_Cyrillic_schwa* = 0x010004D9
  CLUTTER_KEY_Cyrillic_I_macron* = 0x010004E2
  CLUTTER_KEY_Cyrillic_i_macron* = 0x010004E3
  CLUTTER_KEY_Cyrillic_O_bar* = 0x010004E8
  CLUTTER_KEY_Cyrillic_o_bar* = 0x010004E9
  CLUTTER_KEY_Cyrillic_U_macron* = 0x010004EE
  CLUTTER_KEY_Cyrillic_u_macron* = 0x010004EF
  CLUTTER_KEY_Serbian_dje* = 0x000006A1
  CLUTTER_KEY_Macedonia_gje* = 0x000006A2
  CLUTTER_KEY_Cyrillic_io* = 0x000006A3
  CLUTTER_KEY_Ukrainian_ie* = 0x000006A4
  CLUTTER_KEY_Ukranian_je* = 0x000006A4
  CLUTTER_KEY_Macedonia_dse* = 0x000006A5
  CLUTTER_KEY_Ukrainian_i* = 0x000006A6
  CLUTTER_KEY_Ukranian_i* = 0x000006A6
  CLUTTER_KEY_Ukrainian_yi* = 0x000006A7
  CLUTTER_KEY_Ukranian_yi* = 0x000006A7
  CLUTTER_KEY_Cyrillic_je* = 0x000006A8
  CLUTTER_KEY_Serbian_je* = 0x000006A8
  CLUTTER_KEY_Cyrillic_lje* = 0x000006A9
  CLUTTER_KEY_Serbian_lje* = 0x000006A9
  CLUTTER_KEY_Cyrillic_nje* = 0x000006AA
  CLUTTER_KEY_Serbian_nje* = 0x000006AA
  CLUTTER_KEY_Serbian_tshe* = 0x000006AB
  CLUTTER_KEY_Macedonia_kje* = 0x000006AC
  CLUTTER_KEY_Ukrainian_ghe_with_upturn* = 0x000006AD
  CLUTTER_KEY_Byelorussian_shortu* = 0x000006AE
  CLUTTER_KEY_Cyrillic_dzhe* = 0x000006AF
  CLUTTER_KEY_Serbian_dze* = 0x000006AF
  CLUTTER_KEY_numerosign* = 0x000006B0
  CLUTTER_KEY_Serbian_DJE* = 0x000006B1
  CLUTTER_KEY_Macedonia_GJE* = 0x000006B2
  CLUTTER_KEY_Cyrillic_IO* = 0x000006B3
  CLUTTER_KEY_Ukrainian_IE* = 0x000006B4
  CLUTTER_KEY_Ukranian_JE* = 0x000006B4
  CLUTTER_KEY_Macedonia_DSE* = 0x000006B5
  CLUTTER_KEY_Ukrainian_I* = 0x000006B6
  CLUTTER_KEY_Ukranian_I* = 0x000006B6
  CLUTTER_KEY_Ukrainian_YI* = 0x000006B7
  CLUTTER_KEY_Ukranian_YI* = 0x000006B7
  CLUTTER_KEY_Cyrillic_JE* = 0x000006B8
  CLUTTER_KEY_Serbian_JE* = 0x000006B8
  CLUTTER_KEY_Cyrillic_LJE* = 0x000006B9
  CLUTTER_KEY_Serbian_LJE* = 0x000006B9
  CLUTTER_KEY_Cyrillic_NJE* = 0x000006BA
  CLUTTER_KEY_Serbian_NJE* = 0x000006BA
  CLUTTER_KEY_Serbian_TSHE* = 0x000006BB
  CLUTTER_KEY_Macedonia_KJE* = 0x000006BC
  CLUTTER_KEY_Ukrainian_GHE_WITH_UPTURN* = 0x000006BD
  CLUTTER_KEY_Byelorussian_SHORTU* = 0x000006BE
  CLUTTER_KEY_Cyrillic_DZHE* = 0x000006BF
  CLUTTER_KEY_Serbian_DZE* = 0x000006BF
  CLUTTER_KEY_Cyrillic_yu* = 0x000006C0
  CLUTTER_KEY_Cyrillic_a* = 0x000006C1
  CLUTTER_KEY_Cyrillic_be* = 0x000006C2
  CLUTTER_KEY_Cyrillic_tse* = 0x000006C3
  CLUTTER_KEY_Cyrillic_de* = 0x000006C4
  CLUTTER_KEY_Cyrillic_ie* = 0x000006C5
  CLUTTER_KEY_Cyrillic_ef* = 0x000006C6
  CLUTTER_KEY_Cyrillic_ghe* = 0x000006C7
  CLUTTER_KEY_Cyrillic_ha* = 0x000006C8
  CLUTTER_KEY_Cyrillic_i* = 0x000006C9
  CLUTTER_KEY_Cyrillic_shorti* = 0x000006CA
  CLUTTER_KEY_Cyrillic_ka* = 0x000006CB
  CLUTTER_KEY_Cyrillic_el* = 0x000006CC
  CLUTTER_KEY_Cyrillic_em* = 0x000006CD
  CLUTTER_KEY_Cyrillic_en* = 0x000006CE
  CLUTTER_KEY_Cyrillic_o* = 0x000006CF
  CLUTTER_KEY_Cyrillic_pe* = 0x000006D0
  CLUTTER_KEY_Cyrillic_ya* = 0x000006D1
  CLUTTER_KEY_Cyrillic_er* = 0x000006D2
  CLUTTER_KEY_Cyrillic_es* = 0x000006D3
  CLUTTER_KEY_Cyrillic_te* = 0x000006D4
  CLUTTER_KEY_Cyrillic_u* = 0x000006D5
  CLUTTER_KEY_Cyrillic_zhe* = 0x000006D6
  CLUTTER_KEY_Cyrillic_ve* = 0x000006D7
  CLUTTER_KEY_Cyrillic_softsign* = 0x000006D8
  CLUTTER_KEY_Cyrillic_yeru* = 0x000006D9
  CLUTTER_KEY_Cyrillic_ze* = 0x000006DA
  CLUTTER_KEY_Cyrillic_sha* = 0x000006DB
  CLUTTER_KEY_Cyrillic_e* = 0x000006DC
  CLUTTER_KEY_Cyrillic_shcha* = 0x000006DD
  CLUTTER_KEY_Cyrillic_che* = 0x000006DE
  CLUTTER_KEY_Cyrillic_hardsign* = 0x000006DF
  CLUTTER_KEY_Cyrillic_YU* = 0x000006E0
  CLUTTER_KEY_Cyrillic_A* = 0x000006E1
  CLUTTER_KEY_Cyrillic_BE* = 0x000006E2
  CLUTTER_KEY_Cyrillic_TSE* = 0x000006E3
  CLUTTER_KEY_Cyrillic_DE* = 0x000006E4
  CLUTTER_KEY_Cyrillic_IE* = 0x000006E5
  CLUTTER_KEY_Cyrillic_EF* = 0x000006E6
  CLUTTER_KEY_Cyrillic_GHE* = 0x000006E7
  CLUTTER_KEY_Cyrillic_HA* = 0x000006E8
  CLUTTER_KEY_Cyrillic_I* = 0x000006E9
  CLUTTER_KEY_Cyrillic_SHORTI* = 0x000006EA
  CLUTTER_KEY_Cyrillic_KA* = 0x000006EB
  CLUTTER_KEY_Cyrillic_EL* = 0x000006EC
  CLUTTER_KEY_Cyrillic_EM* = 0x000006ED
  CLUTTER_KEY_Cyrillic_EN* = 0x000006EE
  CLUTTER_KEY_Cyrillic_O* = 0x000006EF
  CLUTTER_KEY_Cyrillic_PE* = 0x000006F0
  CLUTTER_KEY_Cyrillic_YA* = 0x000006F1
  CLUTTER_KEY_Cyrillic_ER* = 0x000006F2
  CLUTTER_KEY_Cyrillic_ES* = 0x000006F3
  CLUTTER_KEY_Cyrillic_TE* = 0x000006F4
  CLUTTER_KEY_Cyrillic_U* = 0x000006F5
  CLUTTER_KEY_Cyrillic_ZHE* = 0x000006F6
  CLUTTER_KEY_Cyrillic_VE* = 0x000006F7
  CLUTTER_KEY_Cyrillic_SOFTSIGN* = 0x000006F8
  CLUTTER_KEY_Cyrillic_YERU* = 0x000006F9
  CLUTTER_KEY_Cyrillic_ZE* = 0x000006FA
  CLUTTER_KEY_Cyrillic_SHA* = 0x000006FB
  CLUTTER_KEY_Cyrillic_E* = 0x000006FC
  CLUTTER_KEY_Cyrillic_SHCHA* = 0x000006FD
  CLUTTER_KEY_Cyrillic_CHE* = 0x000006FE
  CLUTTER_KEY_Cyrillic_HARDSIGN* = 0x000006FF
  CLUTTER_KEY_Greek_ALPHAaccent* = 0x000007A1
  CLUTTER_KEY_Greek_EPSILONaccent* = 0x000007A2
  CLUTTER_KEY_Greek_ETAaccent* = 0x000007A3
  CLUTTER_KEY_Greek_IOTAaccent* = 0x000007A4
  CLUTTER_KEY_Greek_IOTAdieresis* = 0x000007A5
  CLUTTER_KEY_Greek_IOTAdiaeresis* = 0x000007A5
  CLUTTER_KEY_Greek_OMICRONaccent* = 0x000007A7
  CLUTTER_KEY_Greek_UPSILONaccent* = 0x000007A8
  CLUTTER_KEY_Greek_UPSILONdieresis* = 0x000007A9
  CLUTTER_KEY_Greek_OMEGAaccent* = 0x000007AB
  CLUTTER_KEY_Greek_accentdieresis* = 0x000007AE
  CLUTTER_KEY_Greek_horizbar* = 0x000007AF
  CLUTTER_KEY_Greek_alphaaccent* = 0x000007B1
  CLUTTER_KEY_Greek_epsilonaccent* = 0x000007B2
  CLUTTER_KEY_Greek_etaaccent* = 0x000007B3
  CLUTTER_KEY_Greek_iotaaccent* = 0x000007B4
  CLUTTER_KEY_Greek_iotadieresis* = 0x000007B5
  CLUTTER_KEY_Greek_iotaaccentdieresis* = 0x000007B6
  CLUTTER_KEY_Greek_omicronaccent* = 0x000007B7
  CLUTTER_KEY_Greek_upsilonaccent* = 0x000007B8
  CLUTTER_KEY_Greek_upsilondieresis* = 0x000007B9
  CLUTTER_KEY_Greek_upsilonaccentdieresis* = 0x000007BA
  CLUTTER_KEY_Greek_omegaaccent* = 0x000007BB
  CLUTTER_KEY_Greek_ALPHA* = 0x000007C1
  CLUTTER_KEY_Greek_BETA* = 0x000007C2
  CLUTTER_KEY_Greek_GAMMA* = 0x000007C3
  CLUTTER_KEY_Greek_DELTA* = 0x000007C4
  CLUTTER_KEY_Greek_EPSILON* = 0x000007C5
  CLUTTER_KEY_Greek_ZETA* = 0x000007C6
  CLUTTER_KEY_Greek_ETA* = 0x000007C7
  CLUTTER_KEY_Greek_THETA* = 0x000007C8
  CLUTTER_KEY_Greek_IOTA* = 0x000007C9
  CLUTTER_KEY_Greek_KAPPA* = 0x000007CA
  CLUTTER_KEY_Greek_LAMDA* = 0x000007CB
  CLUTTER_KEY_Greek_LAMBDA* = 0x000007CB
  CLUTTER_KEY_Greek_MU* = 0x000007CC
  CLUTTER_KEY_Greek_NU* = 0x000007CD
  CLUTTER_KEY_Greek_XI* = 0x000007CE
  CLUTTER_KEY_Greek_OMICRON* = 0x000007CF
  CLUTTER_KEY_Greek_PI* = 0x000007D0
  CLUTTER_KEY_Greek_RHO* = 0x000007D1
  CLUTTER_KEY_Greek_SIGMA* = 0x000007D2
  CLUTTER_KEY_Greek_TAU* = 0x000007D4
  CLUTTER_KEY_Greek_UPSILON* = 0x000007D5
  CLUTTER_KEY_Greek_PHI* = 0x000007D6
  CLUTTER_KEY_Greek_CHI* = 0x000007D7
  CLUTTER_KEY_Greek_PSI* = 0x000007D8
  CLUTTER_KEY_Greek_OMEGA* = 0x000007D9
  CLUTTER_KEY_Greek_alpha* = 0x000007E1
  CLUTTER_KEY_Greek_beta* = 0x000007E2
  CLUTTER_KEY_Greek_gamma* = 0x000007E3
  CLUTTER_KEY_Greek_delta* = 0x000007E4
  CLUTTER_KEY_Greek_epsilon* = 0x000007E5
  CLUTTER_KEY_Greek_zeta* = 0x000007E6
  CLUTTER_KEY_Greek_eta* = 0x000007E7
  CLUTTER_KEY_Greek_theta* = 0x000007E8
  CLUTTER_KEY_Greek_iota* = 0x000007E9
  CLUTTER_KEY_Greek_kappa* = 0x000007EA
  CLUTTER_KEY_Greek_lamda* = 0x000007EB
  CLUTTER_KEY_Greek_lambda* = 0x000007EB
  CLUTTER_KEY_Greek_mu* = 0x000007EC
  CLUTTER_KEY_Greek_nu* = 0x000007ED
  CLUTTER_KEY_Greek_xi* = 0x000007EE
  CLUTTER_KEY_Greek_omicron* = 0x000007EF
  CLUTTER_KEY_Greek_pi* = 0x000007F0
  CLUTTER_KEY_Greek_rho* = 0x000007F1
  CLUTTER_KEY_Greek_sigma* = 0x000007F2
  CLUTTER_KEY_Greek_finalsmallsigma* = 0x000007F3
  CLUTTER_KEY_Greek_tau* = 0x000007F4
  CLUTTER_KEY_Greek_upsilon* = 0x000007F5
  CLUTTER_KEY_Greek_phi* = 0x000007F6
  CLUTTER_KEY_Greek_chi* = 0x000007F7
  CLUTTER_KEY_Greek_psi* = 0x000007F8
  CLUTTER_KEY_Greek_omega* = 0x000007F9
  CLUTTER_KEY_Greek_switch* = 0x0000FF7E
  CLUTTER_KEY_leftradical* = 0x000008A1
  CLUTTER_KEY_topleftradical* = 0x000008A2
  CLUTTER_KEY_horizconnector* = 0x000008A3
  CLUTTER_KEY_topintegral* = 0x000008A4
  CLUTTER_KEY_botintegral* = 0x000008A5
  CLUTTER_KEY_vertconnector* = 0x000008A6
  CLUTTER_KEY_topleftsqbracket* = 0x000008A7
  CLUTTER_KEY_botleftsqbracket* = 0x000008A8
  CLUTTER_KEY_toprightsqbracket* = 0x000008A9
  CLUTTER_KEY_botrightsqbracket* = 0x000008AA
  CLUTTER_KEY_topleftparens* = 0x000008AB
  CLUTTER_KEY_botleftparens* = 0x000008AC
  CLUTTER_KEY_toprightparens* = 0x000008AD
  CLUTTER_KEY_botrightparens* = 0x000008AE
  CLUTTER_KEY_leftmiddlecurlybrace* = 0x000008AF
  CLUTTER_KEY_rightmiddlecurlybrace* = 0x000008B0
  CLUTTER_KEY_topleftsummation* = 0x000008B1
  CLUTTER_KEY_botleftsummation* = 0x000008B2
  CLUTTER_KEY_topvertsummationconnector* = 0x000008B3
  CLUTTER_KEY_botvertsummationconnector* = 0x000008B4
  CLUTTER_KEY_toprightsummation* = 0x000008B5
  CLUTTER_KEY_botrightsummation* = 0x000008B6
  CLUTTER_KEY_rightmiddlesummation* = 0x000008B7
  CLUTTER_KEY_lessthanequal* = 0x000008BC
  CLUTTER_KEY_notequal* = 0x000008BD
  CLUTTER_KEY_greaterthanequal* = 0x000008BE
  CLUTTER_KEY_integral* = 0x000008BF
  CLUTTER_KEY_therefore* = 0x000008C0
  CLUTTER_KEY_variation* = 0x000008C1
  CLUTTER_KEY_infinity* = 0x000008C2
  CLUTTER_KEY_nabla* = 0x000008C5
  CLUTTER_KEY_approximate* = 0x000008C8
  CLUTTER_KEY_similarequal* = 0x000008C9
  CLUTTER_KEY_ifonlyif* = 0x000008CD
  CLUTTER_KEY_implies* = 0x000008CE
  CLUTTER_KEY_identical* = 0x000008CF
  CLUTTER_KEY_radical* = 0x000008D6
  CLUTTER_KEY_includedin* = 0x000008DA
  CLUTTER_KEY_includes* = 0x000008DB
  CLUTTER_KEY_intersection* = 0x000008DC
  CLUTTER_KEY_union* = 0x000008DD
  CLUTTER_KEY_logicaland* = 0x000008DE
  CLUTTER_KEY_logicalor* = 0x000008DF
  CLUTTER_KEY_partialderivative* = 0x000008EF
  CLUTTER_KEY_function* = 0x000008F6
  CLUTTER_KEY_leftarrow* = 0x000008FB
  CLUTTER_KEY_uparrow* = 0x000008FC
  CLUTTER_KEY_rightarrow* = 0x000008FD
  CLUTTER_KEY_downarrow* = 0x000008FE
  CLUTTER_KEY_blank* = 0x000009DF
  CLUTTER_KEY_soliddiamond* = 0x000009E0
  CLUTTER_KEY_checkerboard* = 0x000009E1
  CLUTTER_KEY_ht* = 0x000009E2
  CLUTTER_KEY_ff* = 0x000009E3
  CLUTTER_KEY_cr* = 0x000009E4
  CLUTTER_KEY_lf* = 0x000009E5
  CLUTTER_KEY_nl* = 0x000009E8
  CLUTTER_KEY_vt* = 0x000009E9
  CLUTTER_KEY_lowrightcorner* = 0x000009EA
  CLUTTER_KEY_uprightcorner* = 0x000009EB
  CLUTTER_KEY_upleftcorner* = 0x000009EC
  CLUTTER_KEY_lowleftcorner* = 0x000009ED
  CLUTTER_KEY_crossinglines* = 0x000009EE
  CLUTTER_KEY_horizlinescan1* = 0x000009EF
  CLUTTER_KEY_horizlinescan3* = 0x000009F0
  CLUTTER_KEY_horizlinescan5* = 0x000009F1
  CLUTTER_KEY_horizlinescan7* = 0x000009F2
  CLUTTER_KEY_horizlinescan9* = 0x000009F3
  CLUTTER_KEY_leftt* = 0x000009F4
  CLUTTER_KEY_rightt* = 0x000009F5
  CLUTTER_KEY_bott* = 0x000009F6
  CLUTTER_KEY_topt* = 0x000009F7
  CLUTTER_KEY_vertbar* = 0x000009F8
  CLUTTER_KEY_emspace* = 0x00000AA1
  CLUTTER_KEY_enspace* = 0x00000AA2
  CLUTTER_KEY_em3space* = 0x00000AA3
  CLUTTER_KEY_em4space* = 0x00000AA4
  CLUTTER_KEY_digitspace* = 0x00000AA5
  CLUTTER_KEY_punctspace* = 0x00000AA6
  CLUTTER_KEY_thinspace* = 0x00000AA7
  CLUTTER_KEY_hairspace* = 0x00000AA8
  CLUTTER_KEY_emdash* = 0x00000AA9
  CLUTTER_KEY_endash* = 0x00000AAA
  CLUTTER_KEY_signifblank* = 0x00000AAC
  CLUTTER_KEY_ellipsis* = 0x00000AAE
  CLUTTER_KEY_doubbaselinedot* = 0x00000AAF
  CLUTTER_KEY_onethird* = 0x00000AB0
  CLUTTER_KEY_twothirds* = 0x00000AB1
  CLUTTER_KEY_onefifth* = 0x00000AB2
  CLUTTER_KEY_twofifths* = 0x00000AB3
  CLUTTER_KEY_threefifths* = 0x00000AB4
  CLUTTER_KEY_fourfifths* = 0x00000AB5
  CLUTTER_KEY_onesixth* = 0x00000AB6
  CLUTTER_KEY_fivesixths* = 0x00000AB7
  CLUTTER_KEY_careof* = 0x00000AB8
  CLUTTER_KEY_figdash* = 0x00000ABB
  CLUTTER_KEY_leftanglebracket* = 0x00000ABC
  CLUTTER_KEY_decimalpoint* = 0x00000ABD
  CLUTTER_KEY_rightanglebracket* = 0x00000ABE
  CLUTTER_KEY_marker* = 0x00000ABF
  CLUTTER_KEY_oneeighth* = 0x00000AC3
  CLUTTER_KEY_threeeighths* = 0x00000AC4
  CLUTTER_KEY_fiveeighths* = 0x00000AC5
  CLUTTER_KEY_seveneighths* = 0x00000AC6
  CLUTTER_KEY_trademark* = 0x00000AC9
  CLUTTER_KEY_signaturemark* = 0x00000ACA
  CLUTTER_KEY_trademarkincircle* = 0x00000ACB
  CLUTTER_KEY_leftopentriangle* = 0x00000ACC
  CLUTTER_KEY_rightopentriangle* = 0x00000ACD
  CLUTTER_KEY_emopencircle* = 0x00000ACE
  CLUTTER_KEY_emopenrectangle* = 0x00000ACF
  CLUTTER_KEY_leftsinglequotemark* = 0x00000AD0
  CLUTTER_KEY_rightsinglequotemark* = 0x00000AD1
  CLUTTER_KEY_leftdoublequotemark* = 0x00000AD2
  CLUTTER_KEY_rightdoublequotemark* = 0x00000AD3
  CLUTTER_KEY_prescription* = 0x00000AD4
  CLUTTER_KEY_permille* = 0x00000AD5
  CLUTTER_KEY_minutes* = 0x00000AD6
  CLUTTER_KEY_seconds* = 0x00000AD7
  CLUTTER_KEY_latincross* = 0x00000AD9
  CLUTTER_KEY_hexagram* = 0x00000ADA
  CLUTTER_KEY_filledrectbullet* = 0x00000ADB
  CLUTTER_KEY_filledlefttribullet* = 0x00000ADC
  CLUTTER_KEY_filledrighttribullet* = 0x00000ADD
  CLUTTER_KEY_emfilledcircle* = 0x00000ADE
  CLUTTER_KEY_emfilledrect* = 0x00000ADF
  CLUTTER_KEY_enopencircbullet* = 0x00000AE0
  CLUTTER_KEY_enopensquarebullet* = 0x00000AE1
  CLUTTER_KEY_openrectbullet* = 0x00000AE2
  CLUTTER_KEY_opentribulletup* = 0x00000AE3
  CLUTTER_KEY_opentribulletdown* = 0x00000AE4
  CLUTTER_KEY_openstar* = 0x00000AE5
  CLUTTER_KEY_enfilledcircbullet* = 0x00000AE6
  CLUTTER_KEY_enfilledsqbullet* = 0x00000AE7
  CLUTTER_KEY_filledtribulletup* = 0x00000AE8
  CLUTTER_KEY_filledtribulletdown* = 0x00000AE9
  CLUTTER_KEY_leftpointer* = 0x00000AEA
  CLUTTER_KEY_rightpointer* = 0x00000AEB
  CLUTTER_KEY_club* = 0x00000AEC
  CLUTTER_KEY_diamond* = 0x00000AED
  CLUTTER_KEY_heart* = 0x00000AEE
  CLUTTER_KEY_maltesecross* = 0x00000AF0
  CLUTTER_KEY_dagger* = 0x00000AF1
  CLUTTER_KEY_doubledagger* = 0x00000AF2
  CLUTTER_KEY_checkmark* = 0x00000AF3
  CLUTTER_KEY_ballotcross* = 0x00000AF4
  CLUTTER_KEY_musicalsharp* = 0x00000AF5
  CLUTTER_KEY_musicalflat* = 0x00000AF6
  CLUTTER_KEY_malesymbol* = 0x00000AF7
  CLUTTER_KEY_femalesymbol* = 0x00000AF8
  CLUTTER_KEY_telephone* = 0x00000AF9
  CLUTTER_KEY_telephonerecorder* = 0x00000AFA
  CLUTTER_KEY_phonographcopyright* = 0x00000AFB
  CLUTTER_KEY_caret* = 0x00000AFC
  CLUTTER_KEY_singlelowquotemark* = 0x00000AFD
  CLUTTER_KEY_doublelowquotemark* = 0x00000AFE
  CLUTTER_KEY_cursor* = 0x00000AFF
  CLUTTER_KEY_leftcaret* = 0x00000BA3
  CLUTTER_KEY_rightcaret* = 0x00000BA6
  CLUTTER_KEY_downcaret* = 0x00000BA8
  CLUTTER_KEY_upcaret* = 0x00000BA9
  CLUTTER_KEY_overbar* = 0x00000BC0
  CLUTTER_KEY_downtack* = 0x00000BC2
  CLUTTER_KEY_upshoe* = 0x00000BC3
  CLUTTER_KEY_downstile* = 0x00000BC4
  CLUTTER_KEY_underbar* = 0x00000BC6
  CLUTTER_KEY_jot* = 0x00000BCA
  CLUTTER_KEY_quad* = 0x00000BCC
  CLUTTER_KEY_uptack* = 0x00000BCE
  CLUTTER_KEY_circle* = 0x00000BCF
  CLUTTER_KEY_upstile* = 0x00000BD3
  CLUTTER_KEY_downshoe* = 0x00000BD6
  CLUTTER_KEY_rightshoe* = 0x00000BD8
  CLUTTER_KEY_leftshoe* = 0x00000BDA
  CLUTTER_KEY_lefttack* = 0x00000BDC
  CLUTTER_KEY_righttack* = 0x00000BFC
  CLUTTER_KEY_hebrew_doublelowline* = 0x00000CDF
  CLUTTER_KEY_hebrew_aleph* = 0x00000CE0
  CLUTTER_KEY_hebrew_bet* = 0x00000CE1
  CLUTTER_KEY_hebrew_beth* = 0x00000CE1
  CLUTTER_KEY_hebrew_gimel* = 0x00000CE2
  CLUTTER_KEY_hebrew_gimmel* = 0x00000CE2
  CLUTTER_KEY_hebrew_dalet* = 0x00000CE3
  CLUTTER_KEY_hebrew_daleth* = 0x00000CE3
  CLUTTER_KEY_hebrew_he* = 0x00000CE4
  CLUTTER_KEY_hebrew_waw* = 0x00000CE5
  CLUTTER_KEY_hebrew_zain* = 0x00000CE6
  CLUTTER_KEY_hebrew_zayin* = 0x00000CE6
  CLUTTER_KEY_hebrew_chet* = 0x00000CE7
  CLUTTER_KEY_hebrew_het* = 0x00000CE7
  CLUTTER_KEY_hebrew_tet* = 0x00000CE8
  CLUTTER_KEY_hebrew_teth* = 0x00000CE8
  CLUTTER_KEY_hebrew_yod* = 0x00000CE9
  CLUTTER_KEY_hebrew_finalkaph* = 0x00000CEA
  CLUTTER_KEY_hebrew_kaph* = 0x00000CEB
  CLUTTER_KEY_hebrew_lamed* = 0x00000CEC
  CLUTTER_KEY_hebrew_finalmem* = 0x00000CED
  CLUTTER_KEY_hebrew_mem* = 0x00000CEE
  CLUTTER_KEY_hebrew_finalnun* = 0x00000CEF
  CLUTTER_KEY_hebrew_nun* = 0x00000CF0
  CLUTTER_KEY_hebrew_samech* = 0x00000CF1
  CLUTTER_KEY_hebrew_samekh* = 0x00000CF1
  CLUTTER_KEY_hebrew_ayin* = 0x00000CF2
  CLUTTER_KEY_hebrew_finalpe* = 0x00000CF3
  CLUTTER_KEY_hebrew_pe* = 0x00000CF4
  CLUTTER_KEY_hebrew_finalzade* = 0x00000CF5
  CLUTTER_KEY_hebrew_finalzadi* = 0x00000CF5
  CLUTTER_KEY_hebrew_zade* = 0x00000CF6
  CLUTTER_KEY_hebrew_zadi* = 0x00000CF6
  CLUTTER_KEY_hebrew_qoph* = 0x00000CF7
  CLUTTER_KEY_hebrew_kuf* = 0x00000CF7
  CLUTTER_KEY_hebrew_resh* = 0x00000CF8
  CLUTTER_KEY_hebrew_shin* = 0x00000CF9
  CLUTTER_KEY_hebrew_taw* = 0x00000CFA
  CLUTTER_KEY_hebrew_taf* = 0x00000CFA
  CLUTTER_KEY_Hebrew_switch* = 0x0000FF7E
  CLUTTER_KEY_Thai_kokai* = 0x00000DA1
  CLUTTER_KEY_Thai_khokhai* = 0x00000DA2
  CLUTTER_KEY_Thai_khokhuat* = 0x00000DA3
  CLUTTER_KEY_Thai_khokhwai* = 0x00000DA4
  CLUTTER_KEY_Thai_khokhon* = 0x00000DA5
  CLUTTER_KEY_Thai_khorakhang* = 0x00000DA6
  CLUTTER_KEY_Thai_ngongu* = 0x00000DA7
  CLUTTER_KEY_Thai_chochan* = 0x00000DA8
  CLUTTER_KEY_Thai_choching* = 0x00000DA9
  CLUTTER_KEY_Thai_chochang* = 0x00000DAA
  CLUTTER_KEY_Thai_soso* = 0x00000DAB
  CLUTTER_KEY_Thai_chochoe* = 0x00000DAC
  CLUTTER_KEY_Thai_yoying* = 0x00000DAD
  CLUTTER_KEY_Thai_dochada* = 0x00000DAE
  CLUTTER_KEY_Thai_topatak* = 0x00000DAF
  CLUTTER_KEY_Thai_thothan* = 0x00000DB0
  CLUTTER_KEY_Thai_thonangmontho* = 0x00000DB1
  CLUTTER_KEY_Thai_thophuthao* = 0x00000DB2
  CLUTTER_KEY_Thai_nonen* = 0x00000DB3
  CLUTTER_KEY_Thai_dodek* = 0x00000DB4
  CLUTTER_KEY_Thai_totao* = 0x00000DB5
  CLUTTER_KEY_Thai_thothung* = 0x00000DB6
  CLUTTER_KEY_Thai_thothahan* = 0x00000DB7
  CLUTTER_KEY_Thai_thothong* = 0x00000DB8
  CLUTTER_KEY_Thai_nonu* = 0x00000DB9
  CLUTTER_KEY_Thai_bobaimai* = 0x00000DBA
  CLUTTER_KEY_Thai_popla* = 0x00000DBB
  CLUTTER_KEY_Thai_phophung* = 0x00000DBC
  CLUTTER_KEY_Thai_fofa* = 0x00000DBD
  CLUTTER_KEY_Thai_phophan* = 0x00000DBE
  CLUTTER_KEY_Thai_fofan* = 0x00000DBF
  CLUTTER_KEY_Thai_phosamphao* = 0x00000DC0
  CLUTTER_KEY_Thai_moma* = 0x00000DC1
  CLUTTER_KEY_Thai_yoyak* = 0x00000DC2
  CLUTTER_KEY_Thai_rorua* = 0x00000DC3
  CLUTTER_KEY_Thai_ru* = 0x00000DC4
  CLUTTER_KEY_Thai_loling* = 0x00000DC5
  CLUTTER_KEY_Thai_lu* = 0x00000DC6
  CLUTTER_KEY_Thai_wowaen* = 0x00000DC7
  CLUTTER_KEY_Thai_sosala* = 0x00000DC8
  CLUTTER_KEY_Thai_sorusi* = 0x00000DC9
  CLUTTER_KEY_Thai_sosua* = 0x00000DCA
  CLUTTER_KEY_Thai_hohip* = 0x00000DCB
  CLUTTER_KEY_Thai_lochula* = 0x00000DCC
  CLUTTER_KEY_Thai_oang* = 0x00000DCD
  CLUTTER_KEY_Thai_honokhuk* = 0x00000DCE
  CLUTTER_KEY_Thai_paiyannoi* = 0x00000DCF
  CLUTTER_KEY_Thai_saraa* = 0x00000DD0
  CLUTTER_KEY_Thai_maihanakat* = 0x00000DD1
  CLUTTER_KEY_Thai_saraaa* = 0x00000DD2
  CLUTTER_KEY_Thai_saraam* = 0x00000DD3
  CLUTTER_KEY_Thai_sarai* = 0x00000DD4
  CLUTTER_KEY_Thai_saraii* = 0x00000DD5
  CLUTTER_KEY_Thai_saraue* = 0x00000DD6
  CLUTTER_KEY_Thai_sarauee* = 0x00000DD7
  CLUTTER_KEY_Thai_sarau* = 0x00000DD8
  CLUTTER_KEY_Thai_sarauu* = 0x00000DD9
  CLUTTER_KEY_Thai_phinthu* = 0x00000DDA
  CLUTTER_KEY_Thai_maihanakat_maitho* = 0x00000DDE
  CLUTTER_KEY_Thai_baht* = 0x00000DDF
  CLUTTER_KEY_Thai_sarae* = 0x00000DE0
  CLUTTER_KEY_Thai_saraae* = 0x00000DE1
  CLUTTER_KEY_Thai_sarao* = 0x00000DE2
  CLUTTER_KEY_Thai_saraaimaimuan* = 0x00000DE3
  CLUTTER_KEY_Thai_saraaimaimalai* = 0x00000DE4
  CLUTTER_KEY_Thai_lakkhangyao* = 0x00000DE5
  CLUTTER_KEY_Thai_maiyamok* = 0x00000DE6
  CLUTTER_KEY_Thai_maitaikhu* = 0x00000DE7
  CLUTTER_KEY_Thai_maiek* = 0x00000DE8
  CLUTTER_KEY_Thai_maitho* = 0x00000DE9
  CLUTTER_KEY_Thai_maitri* = 0x00000DEA
  CLUTTER_KEY_Thai_maichattawa* = 0x00000DEB
  CLUTTER_KEY_Thai_thanthakhat* = 0x00000DEC
  CLUTTER_KEY_Thai_nikhahit* = 0x00000DED
  CLUTTER_KEY_Thai_leksun* = 0x00000DF0
  CLUTTER_KEY_Thai_leknung* = 0x00000DF1
  CLUTTER_KEY_Thai_leksong* = 0x00000DF2
  CLUTTER_KEY_Thai_leksam* = 0x00000DF3
  CLUTTER_KEY_Thai_leksi* = 0x00000DF4
  CLUTTER_KEY_Thai_lekha* = 0x00000DF5
  CLUTTER_KEY_Thai_lekhok* = 0x00000DF6
  CLUTTER_KEY_Thai_lekchet* = 0x00000DF7
  CLUTTER_KEY_Thai_lekpaet* = 0x00000DF8
  CLUTTER_KEY_Thai_lekkao* = 0x00000DF9
  CLUTTER_KEY_Hangul* = 0x0000FF31
  CLUTTER_KEY_Hangul_Start* = 0x0000FF32
  CLUTTER_KEY_Hangul_End* = 0x0000FF33
  CLUTTER_KEY_Hangul_Hanja* = 0x0000FF34
  CLUTTER_KEY_Hangul_Jamo* = 0x0000FF35
  CLUTTER_KEY_Hangul_Romaja* = 0x0000FF36
  CLUTTER_KEY_Hangul_Codeinput* = 0x0000FF37
  CLUTTER_KEY_Hangul_Jeonja* = 0x0000FF38
  CLUTTER_KEY_Hangul_Banja* = 0x0000FF39
  CLUTTER_KEY_Hangul_PreHanja* = 0x0000FF3A
  CLUTTER_KEY_Hangul_PostHanja* = 0x0000FF3B
  CLUTTER_KEY_Hangul_SingleCandidate* = 0x0000FF3C
  CLUTTER_KEY_Hangul_MultipleCandidate* = 0x0000FF3D
  CLUTTER_KEY_Hangul_PreviousCandidate* = 0x0000FF3E
  CLUTTER_KEY_Hangul_Special* = 0x0000FF3F
  CLUTTER_KEY_Hangul_switch* = 0x0000FF7E
  CLUTTER_KEY_Hangul_Kiyeog* = 0x00000EA1
  CLUTTER_KEY_Hangul_SsangKiyeog* = 0x00000EA2
  CLUTTER_KEY_Hangul_KiyeogSios* = 0x00000EA3
  CLUTTER_KEY_Hangul_Nieun* = 0x00000EA4
  CLUTTER_KEY_Hangul_NieunJieuj* = 0x00000EA5
  CLUTTER_KEY_Hangul_NieunHieuh* = 0x00000EA6
  CLUTTER_KEY_Hangul_Dikeud* = 0x00000EA7
  CLUTTER_KEY_Hangul_SsangDikeud* = 0x00000EA8
  CLUTTER_KEY_Hangul_Rieul* = 0x00000EA9
  CLUTTER_KEY_Hangul_RieulKiyeog* = 0x00000EAA
  CLUTTER_KEY_Hangul_RieulMieum* = 0x00000EAB
  CLUTTER_KEY_Hangul_RieulPieub* = 0x00000EAC
  CLUTTER_KEY_Hangul_RieulSios* = 0x00000EAD
  CLUTTER_KEY_Hangul_RieulTieut* = 0x00000EAE
  CLUTTER_KEY_Hangul_RieulPhieuf* = 0x00000EAF
  CLUTTER_KEY_Hangul_RieulHieuh* = 0x00000EB0
  CLUTTER_KEY_Hangul_Mieum* = 0x00000EB1
  CLUTTER_KEY_Hangul_Pieub* = 0x00000EB2
  CLUTTER_KEY_Hangul_SsangPieub* = 0x00000EB3
  CLUTTER_KEY_Hangul_PieubSios* = 0x00000EB4
  CLUTTER_KEY_Hangul_Sios* = 0x00000EB5
  CLUTTER_KEY_Hangul_SsangSios* = 0x00000EB6
  CLUTTER_KEY_Hangul_Ieung* = 0x00000EB7
  CLUTTER_KEY_Hangul_Jieuj* = 0x00000EB8
  CLUTTER_KEY_Hangul_SsangJieuj* = 0x00000EB9
  CLUTTER_KEY_Hangul_Cieuc* = 0x00000EBA
  CLUTTER_KEY_Hangul_Khieuq* = 0x00000EBB
  CLUTTER_KEY_Hangul_Tieut* = 0x00000EBC
  CLUTTER_KEY_Hangul_Phieuf* = 0x00000EBD
  CLUTTER_KEY_Hangul_Hieuh* = 0x00000EBE
  CLUTTER_KEY_Hangul_A* = 0x00000EBF
  CLUTTER_KEY_Hangul_AE* = 0x00000EC0
  CLUTTER_KEY_Hangul_YA* = 0x00000EC1
  CLUTTER_KEY_Hangul_YAE* = 0x00000EC2
  CLUTTER_KEY_Hangul_EO* = 0x00000EC3
  CLUTTER_KEY_Hangul_E* = 0x00000EC4
  CLUTTER_KEY_Hangul_YEO* = 0x00000EC5
  CLUTTER_KEY_Hangul_YE* = 0x00000EC6
  CLUTTER_KEY_Hangul_O* = 0x00000EC7
  CLUTTER_KEY_Hangul_WA* = 0x00000EC8
  CLUTTER_KEY_Hangul_WAE* = 0x00000EC9
  CLUTTER_KEY_Hangul_OE* = 0x00000ECA
  CLUTTER_KEY_Hangul_YO* = 0x00000ECB
  CLUTTER_KEY_Hangul_U* = 0x00000ECC
  CLUTTER_KEY_Hangul_WEO* = 0x00000ECD
  CLUTTER_KEY_Hangul_WE* = 0x00000ECE
  CLUTTER_KEY_Hangul_WI* = 0x00000ECF
  CLUTTER_KEY_Hangul_YU* = 0x00000ED0
  CLUTTER_KEY_Hangul_EU* = 0x00000ED1
  CLUTTER_KEY_Hangul_YI* = 0x00000ED2
  CLUTTER_KEY_Hangul_I* = 0x00000ED3
  CLUTTER_KEY_Hangul_J_Kiyeog* = 0x00000ED4
  CLUTTER_KEY_Hangul_J_SsangKiyeog* = 0x00000ED5
  CLUTTER_KEY_Hangul_J_KiyeogSios* = 0x00000ED6
  CLUTTER_KEY_Hangul_J_Nieun* = 0x00000ED7
  CLUTTER_KEY_Hangul_J_NieunJieuj* = 0x00000ED8
  CLUTTER_KEY_Hangul_J_NieunHieuh* = 0x00000ED9
  CLUTTER_KEY_Hangul_J_Dikeud* = 0x00000EDA
  CLUTTER_KEY_Hangul_J_Rieul* = 0x00000EDB
  CLUTTER_KEY_Hangul_J_RieulKiyeog* = 0x00000EDC
  CLUTTER_KEY_Hangul_J_RieulMieum* = 0x00000EDD
  CLUTTER_KEY_Hangul_J_RieulPieub* = 0x00000EDE
  CLUTTER_KEY_Hangul_J_RieulSios* = 0x00000EDF
  CLUTTER_KEY_Hangul_J_RieulTieut* = 0x00000EE0
  CLUTTER_KEY_Hangul_J_RieulPhieuf* = 0x00000EE1
  CLUTTER_KEY_Hangul_J_RieulHieuh* = 0x00000EE2
  CLUTTER_KEY_Hangul_J_Mieum* = 0x00000EE3
  CLUTTER_KEY_Hangul_J_Pieub* = 0x00000EE4
  CLUTTER_KEY_Hangul_J_PieubSios* = 0x00000EE5
  CLUTTER_KEY_Hangul_J_Sios* = 0x00000EE6
  CLUTTER_KEY_Hangul_J_SsangSios* = 0x00000EE7
  CLUTTER_KEY_Hangul_J_Ieung* = 0x00000EE8
  CLUTTER_KEY_Hangul_J_Jieuj* = 0x00000EE9
  CLUTTER_KEY_Hangul_J_Cieuc* = 0x00000EEA
  CLUTTER_KEY_Hangul_J_Khieuq* = 0x00000EEB
  CLUTTER_KEY_Hangul_J_Tieut* = 0x00000EEC
  CLUTTER_KEY_Hangul_J_Phieuf* = 0x00000EED
  CLUTTER_KEY_Hangul_J_Hieuh* = 0x00000EEE
  CLUTTER_KEY_Hangul_RieulYeorinHieuh* = 0x00000EEF
  CLUTTER_KEY_Hangul_SunkyeongeumMieum* = 0x00000EF0
  CLUTTER_KEY_Hangul_SunkyeongeumPieub* = 0x00000EF1
  CLUTTER_KEY_Hangul_PanSios* = 0x00000EF2
  CLUTTER_KEY_Hangul_KkogjiDalrinIeung* = 0x00000EF3
  CLUTTER_KEY_Hangul_SunkyeongeumPhieuf* = 0x00000EF4
  CLUTTER_KEY_Hangul_YeorinHieuh* = 0x00000EF5
  CLUTTER_KEY_Hangul_AraeA* = 0x00000EF6
  CLUTTER_KEY_Hangul_AraeAE* = 0x00000EF7
  CLUTTER_KEY_Hangul_J_PanSios* = 0x00000EF8
  CLUTTER_KEY_Hangul_J_KkogjiDalrinIeung* = 0x00000EF9
  CLUTTER_KEY_Hangul_J_YeorinHieuh* = 0x00000EFA
  CLUTTER_KEY_Korean_Won* = 0x00000EFF
  CLUTTER_KEY_Armenian_ligature_ew* = 0x01000587
  CLUTTER_KEY_Armenian_full_stop* = 0x01000589
  CLUTTER_KEY_Armenian_verjaket* = 0x01000589
  CLUTTER_KEY_Armenian_separation_mark* = 0x0100055D
  CLUTTER_KEY_Armenian_but* = 0x0100055D
  CLUTTER_KEY_Armenian_hyphen* = 0x0100058A
  CLUTTER_KEY_Armenian_yentamna* = 0x0100058A
  CLUTTER_KEY_Armenian_exclam* = 0x0100055C
  CLUTTER_KEY_Armenian_amanak* = 0x0100055C
  CLUTTER_KEY_Armenian_accent* = 0x0100055B
  CLUTTER_KEY_Armenian_shesht* = 0x0100055B
  CLUTTER_KEY_Armenian_question* = 0x0100055E
  CLUTTER_KEY_Armenian_paruyk* = 0x0100055E
  CLUTTER_KEY_Armenian_AYB* = 0x01000531
  CLUTTER_KEY_Armenian_ayb* = 0x01000561
  CLUTTER_KEY_Armenian_BEN* = 0x01000532
  CLUTTER_KEY_Armenian_ben* = 0x01000562
  CLUTTER_KEY_Armenian_GIM* = 0x01000533
  CLUTTER_KEY_Armenian_gim* = 0x01000563
  CLUTTER_KEY_Armenian_DA* = 0x01000534
  CLUTTER_KEY_Armenian_da* = 0x01000564
  CLUTTER_KEY_Armenian_YECH* = 0x01000535
  CLUTTER_KEY_Armenian_yech* = 0x01000565
  CLUTTER_KEY_Armenian_ZA* = 0x01000536
  CLUTTER_KEY_Armenian_za* = 0x01000566
  CLUTTER_KEY_Armenian_E* = 0x01000537
  CLUTTER_KEY_Armenian_e* = 0x01000567
  CLUTTER_KEY_Armenian_AT* = 0x01000538
  CLUTTER_KEY_Armenian_at* = 0x01000568
  CLUTTER_KEY_Armenian_TO* = 0x01000539
  CLUTTER_KEY_Armenian_to* = 0x01000569
  CLUTTER_KEY_Armenian_ZHE* = 0x0100053A
  CLUTTER_KEY_Armenian_zhe* = 0x0100056A
  CLUTTER_KEY_Armenian_INI* = 0x0100053B
  CLUTTER_KEY_Armenian_ini* = 0x0100056B
  CLUTTER_KEY_Armenian_LYUN* = 0x0100053C
  CLUTTER_KEY_Armenian_lyun* = 0x0100056C
  CLUTTER_KEY_Armenian_KHE* = 0x0100053D
  CLUTTER_KEY_Armenian_khe* = 0x0100056D
  CLUTTER_KEY_Armenian_TSA* = 0x0100053E
  CLUTTER_KEY_Armenian_tsa* = 0x0100056E
  CLUTTER_KEY_Armenian_KEN* = 0x0100053F
  CLUTTER_KEY_Armenian_ken* = 0x0100056F
  CLUTTER_KEY_Armenian_HO* = 0x01000540
  CLUTTER_KEY_Armenian_ho* = 0x01000570
  CLUTTER_KEY_Armenian_DZA* = 0x01000541
  CLUTTER_KEY_Armenian_dza* = 0x01000571
  CLUTTER_KEY_Armenian_GHAT* = 0x01000542
  CLUTTER_KEY_Armenian_ghat* = 0x01000572
  CLUTTER_KEY_Armenian_TCHE* = 0x01000543
  CLUTTER_KEY_Armenian_tche* = 0x01000573
  CLUTTER_KEY_Armenian_MEN* = 0x01000544
  CLUTTER_KEY_Armenian_men* = 0x01000574
  CLUTTER_KEY_Armenian_HI* = 0x01000545
  CLUTTER_KEY_Armenian_hi* = 0x01000575
  CLUTTER_KEY_Armenian_NU* = 0x01000546
  CLUTTER_KEY_Armenian_nu* = 0x01000576
  CLUTTER_KEY_Armenian_SHA* = 0x01000547
  CLUTTER_KEY_Armenian_sha* = 0x01000577
  CLUTTER_KEY_Armenian_VO* = 0x01000548
  CLUTTER_KEY_Armenian_vo* = 0x01000578
  CLUTTER_KEY_Armenian_CHA* = 0x01000549
  CLUTTER_KEY_Armenian_cha* = 0x01000579
  CLUTTER_KEY_Armenian_PE* = 0x0100054A
  CLUTTER_KEY_Armenian_pe* = 0x0100057A
  CLUTTER_KEY_Armenian_JE* = 0x0100054B
  CLUTTER_KEY_Armenian_je* = 0x0100057B
  CLUTTER_KEY_Armenian_RA* = 0x0100054C
  CLUTTER_KEY_Armenian_ra* = 0x0100057C
  CLUTTER_KEY_Armenian_SE* = 0x0100054D
  CLUTTER_KEY_Armenian_se* = 0x0100057D
  CLUTTER_KEY_Armenian_VEV* = 0x0100054E
  CLUTTER_KEY_Armenian_vev* = 0x0100057E
  CLUTTER_KEY_Armenian_TYUN* = 0x0100054F
  CLUTTER_KEY_Armenian_tyun* = 0x0100057F
  CLUTTER_KEY_Armenian_RE* = 0x01000550
  CLUTTER_KEY_Armenian_re* = 0x01000580
  CLUTTER_KEY_Armenian_TSO* = 0x01000551
  CLUTTER_KEY_Armenian_tso* = 0x01000581
  CLUTTER_KEY_Armenian_VYUN* = 0x01000552
  CLUTTER_KEY_Armenian_vyun* = 0x01000582
  CLUTTER_KEY_Armenian_PYUR* = 0x01000553
  CLUTTER_KEY_Armenian_pyur* = 0x01000583
  CLUTTER_KEY_Armenian_KE* = 0x01000554
  CLUTTER_KEY_Armenian_ke* = 0x01000584
  CLUTTER_KEY_Armenian_O* = 0x01000555
  CLUTTER_KEY_Armenian_o* = 0x01000585
  CLUTTER_KEY_Armenian_FE* = 0x01000556
  CLUTTER_KEY_Armenian_fe* = 0x01000586
  CLUTTER_KEY_Armenian_apostrophe* = 0x0100055A
  CLUTTER_KEY_Georgian_an* = 0x010010D0
  CLUTTER_KEY_Georgian_ban* = 0x010010D1
  CLUTTER_KEY_Georgian_gan* = 0x010010D2
  CLUTTER_KEY_Georgian_don* = 0x010010D3
  CLUTTER_KEY_Georgian_en* = 0x010010D4
  CLUTTER_KEY_Georgian_vin* = 0x010010D5
  CLUTTER_KEY_Georgian_zen* = 0x010010D6
  CLUTTER_KEY_Georgian_tan* = 0x010010D7
  CLUTTER_KEY_Georgian_in* = 0x010010D8
  CLUTTER_KEY_Georgian_kan* = 0x010010D9
  CLUTTER_KEY_Georgian_las* = 0x010010DA
  CLUTTER_KEY_Georgian_man* = 0x010010DB
  CLUTTER_KEY_Georgian_nar* = 0x010010DC
  CLUTTER_KEY_Georgian_on* = 0x010010DD
  CLUTTER_KEY_Georgian_par* = 0x010010DE
  CLUTTER_KEY_Georgian_zhar* = 0x010010DF
  CLUTTER_KEY_Georgian_rae* = 0x010010E0
  CLUTTER_KEY_Georgian_san* = 0x010010E1
  CLUTTER_KEY_Georgian_tar* = 0x010010E2
  CLUTTER_KEY_Georgian_un* = 0x010010E3
  CLUTTER_KEY_Georgian_phar* = 0x010010E4
  CLUTTER_KEY_Georgian_khar* = 0x010010E5
  CLUTTER_KEY_Georgian_ghan* = 0x010010E6
  CLUTTER_KEY_Georgian_qar* = 0x010010E7
  CLUTTER_KEY_Georgian_shin* = 0x010010E8
  CLUTTER_KEY_Georgian_chin* = 0x010010E9
  CLUTTER_KEY_Georgian_can* = 0x010010EA
  CLUTTER_KEY_Georgian_jil* = 0x010010EB
  CLUTTER_KEY_Georgian_cil* = 0x010010EC
  CLUTTER_KEY_Georgian_char* = 0x010010ED
  CLUTTER_KEY_Georgian_xan* = 0x010010EE
  CLUTTER_KEY_Georgian_jhan* = 0x010010EF
  CLUTTER_KEY_Georgian_hae* = 0x010010F0
  CLUTTER_KEY_Georgian_he* = 0x010010F1
  CLUTTER_KEY_Georgian_hie* = 0x010010F2
  CLUTTER_KEY_Georgian_we* = 0x010010F3
  CLUTTER_KEY_Georgian_har* = 0x010010F4
  CLUTTER_KEY_Georgian_hoe* = 0x010010F5
  CLUTTER_KEY_Georgian_fi* = 0x010010F6
  CLUTTER_KEY_Xabovedot* = 0x01001E8A
  CLUTTER_KEY_Ibreve* = 0x0100012C
  CLUTTER_KEY_Zstroke* = 0x010001B5
  CLUTTER_KEY_Gcaron* = 0x010001E6
  CLUTTER_KEY_Ocaron* = 0x010001D1
  CLUTTER_KEY_Obarred* = 0x0100019F
  CLUTTER_KEY_xabovedot* = 0x01001E8B
  CLUTTER_KEY_ibreve* = 0x0100012D
  CLUTTER_KEY_zstroke* = 0x010001B6
  CLUTTER_KEY_gcaron* = 0x010001E7
  CLUTTER_KEY_ocaron* = 0x010001D2
  CLUTTER_KEY_obarred* = 0x01000275
  CLUTTER_KEY_SCHWA* = 0x0100018F
  CLUTTER_KEY_schwa* = 0x01000259
  CLUTTER_KEY_EZH* = 0x010001B7
  CLUTTER_KEY_ezh* = 0x01000292
  CLUTTER_KEY_Lbelowdot* = 0x01001E36
  CLUTTER_KEY_lbelowdot* = 0x01001E37
  CLUTTER_KEY_Abelowdot* = 0x01001EA0
  CLUTTER_KEY_abelowdot* = 0x01001EA1
  CLUTTER_KEY_Ahook* = 0x01001EA2
  CLUTTER_KEY_ahook* = 0x01001EA3
  CLUTTER_KEY_Acircumflexacute* = 0x01001EA4
  CLUTTER_KEY_acircumflexacute* = 0x01001EA5
  CLUTTER_KEY_Acircumflexgrave* = 0x01001EA6
  CLUTTER_KEY_acircumflexgrave* = 0x01001EA7
  CLUTTER_KEY_Acircumflexhook* = 0x01001EA8
  CLUTTER_KEY_acircumflexhook* = 0x01001EA9
  CLUTTER_KEY_Acircumflextilde* = 0x01001EAA
  CLUTTER_KEY_acircumflextilde* = 0x01001EAB
  CLUTTER_KEY_Acircumflexbelowdot* = 0x01001EAC
  CLUTTER_KEY_acircumflexbelowdot* = 0x01001EAD
  CLUTTER_KEY_Abreveacute* = 0x01001EAE
  CLUTTER_KEY_abreveacute* = 0x01001EAF
  CLUTTER_KEY_Abrevegrave* = 0x01001EB0
  CLUTTER_KEY_abrevegrave* = 0x01001EB1
  CLUTTER_KEY_Abrevehook* = 0x01001EB2
  CLUTTER_KEY_abrevehook* = 0x01001EB3
  CLUTTER_KEY_Abrevetilde* = 0x01001EB4
  CLUTTER_KEY_abrevetilde* = 0x01001EB5
  CLUTTER_KEY_Abrevebelowdot* = 0x01001EB6
  CLUTTER_KEY_abrevebelowdot* = 0x01001EB7
  CLUTTER_KEY_Ebelowdot* = 0x01001EB8
  CLUTTER_KEY_ebelowdot* = 0x01001EB9
  CLUTTER_KEY_Ehook* = 0x01001EBA
  CLUTTER_KEY_ehook* = 0x01001EBB
  CLUTTER_KEY_Etilde* = 0x01001EBC
  CLUTTER_KEY_etilde* = 0x01001EBD
  CLUTTER_KEY_Ecircumflexacute* = 0x01001EBE
  CLUTTER_KEY_ecircumflexacute* = 0x01001EBF
  CLUTTER_KEY_Ecircumflexgrave* = 0x01001EC0
  CLUTTER_KEY_ecircumflexgrave* = 0x01001EC1
  CLUTTER_KEY_Ecircumflexhook* = 0x01001EC2
  CLUTTER_KEY_ecircumflexhook* = 0x01001EC3
  CLUTTER_KEY_Ecircumflextilde* = 0x01001EC4
  CLUTTER_KEY_ecircumflextilde* = 0x01001EC5
  CLUTTER_KEY_Ecircumflexbelowdot* = 0x01001EC6
  CLUTTER_KEY_ecircumflexbelowdot* = 0x01001EC7
  CLUTTER_KEY_Ihook* = 0x01001EC8
  CLUTTER_KEY_ihook* = 0x01001EC9
  CLUTTER_KEY_Ibelowdot* = 0x01001ECA
  CLUTTER_KEY_ibelowdot* = 0x01001ECB
  CLUTTER_KEY_Obelowdot* = 0x01001ECC
  CLUTTER_KEY_obelowdot* = 0x01001ECD
  CLUTTER_KEY_Ohook* = 0x01001ECE
  CLUTTER_KEY_ohook* = 0x01001ECF
  CLUTTER_KEY_Ocircumflexacute* = 0x01001ED0
  CLUTTER_KEY_ocircumflexacute* = 0x01001ED1
  CLUTTER_KEY_Ocircumflexgrave* = 0x01001ED2
  CLUTTER_KEY_ocircumflexgrave* = 0x01001ED3
  CLUTTER_KEY_Ocircumflexhook* = 0x01001ED4
  CLUTTER_KEY_ocircumflexhook* = 0x01001ED5
  CLUTTER_KEY_Ocircumflextilde* = 0x01001ED6
  CLUTTER_KEY_ocircumflextilde* = 0x01001ED7
  CLUTTER_KEY_Ocircumflexbelowdot* = 0x01001ED8
  CLUTTER_KEY_ocircumflexbelowdot* = 0x01001ED9
  CLUTTER_KEY_Ohornacute* = 0x01001EDA
  CLUTTER_KEY_ohornacute* = 0x01001EDB
  CLUTTER_KEY_Ohorngrave* = 0x01001EDC
  CLUTTER_KEY_ohorngrave* = 0x01001EDD
  CLUTTER_KEY_Ohornhook* = 0x01001EDE
  CLUTTER_KEY_ohornhook* = 0x01001EDF
  CLUTTER_KEY_Ohorntilde* = 0x01001EE0
  CLUTTER_KEY_ohorntilde* = 0x01001EE1
  CLUTTER_KEY_Ohornbelowdot* = 0x01001EE2
  CLUTTER_KEY_ohornbelowdot* = 0x01001EE3
  CLUTTER_KEY_Ubelowdot* = 0x01001EE4
  CLUTTER_KEY_ubelowdot* = 0x01001EE5
  CLUTTER_KEY_Uhook* = 0x01001EE6
  CLUTTER_KEY_uhook* = 0x01001EE7
  CLUTTER_KEY_Uhornacute* = 0x01001EE8
  CLUTTER_KEY_uhornacute* = 0x01001EE9
  CLUTTER_KEY_Uhorngrave* = 0x01001EEA
  CLUTTER_KEY_uhorngrave* = 0x01001EEB
  CLUTTER_KEY_Uhornhook* = 0x01001EEC
  CLUTTER_KEY_uhornhook* = 0x01001EED
  CLUTTER_KEY_Uhorntilde* = 0x01001EEE
  CLUTTER_KEY_uhorntilde* = 0x01001EEF
  CLUTTER_KEY_Uhornbelowdot* = 0x01001EF0
  CLUTTER_KEY_uhornbelowdot* = 0x01001EF1
  CLUTTER_KEY_Ybelowdot* = 0x01001EF4
  CLUTTER_KEY_ybelowdot* = 0x01001EF5
  CLUTTER_KEY_Yhook* = 0x01001EF6
  CLUTTER_KEY_yhook* = 0x01001EF7
  CLUTTER_KEY_Ytilde* = 0x01001EF8
  CLUTTER_KEY_ytilde* = 0x01001EF9
  CLUTTER_KEY_Ohorn* = 0x010001A0
  CLUTTER_KEY_ohorn* = 0x010001A1
  CLUTTER_KEY_Uhorn* = 0x010001AF
  CLUTTER_KEY_uhorn* = 0x010001B0
  CLUTTER_KEY_EcuSign* = 0x010020A0
  CLUTTER_KEY_ColonSign* = 0x010020A1
  CLUTTER_KEY_CruzeiroSign* = 0x010020A2
  CLUTTER_KEY_FFrancSign* = 0x010020A3
  CLUTTER_KEY_LiraSign* = 0x010020A4
  CLUTTER_KEY_MillSign* = 0x010020A5
  CLUTTER_KEY_NairaSign* = 0x010020A6
  CLUTTER_KEY_PesetaSign* = 0x010020A7
  CLUTTER_KEY_RupeeSign* = 0x010020A8
  CLUTTER_KEY_WonSign* = 0x010020A9
  CLUTTER_KEY_NewSheqelSign* = 0x010020AA
  CLUTTER_KEY_DongSign* = 0x010020AB
  CLUTTER_KEY_EuroSign* = 0x000020AC
  CLUTTER_KEY_zerosuperior* = 0x01002070
  CLUTTER_KEY_foursuperior* = 0x01002074
  CLUTTER_KEY_fivesuperior* = 0x01002075
  CLUTTER_KEY_sixsuperior* = 0x01002076
  CLUTTER_KEY_sevensuperior* = 0x01002077
  CLUTTER_KEY_eightsuperior* = 0x01002078
  CLUTTER_KEY_ninesuperior* = 0x01002079
  CLUTTER_KEY_zerosubscript* = 0x01002080
  CLUTTER_KEY_onesubscript* = 0x01002081
  CLUTTER_KEY_twosubscript* = 0x01002082
  CLUTTER_KEY_threesubscript* = 0x01002083
  CLUTTER_KEY_foursubscript* = 0x01002084
  CLUTTER_KEY_fivesubscript* = 0x01002085
  CLUTTER_KEY_sixsubscript* = 0x01002086
  CLUTTER_KEY_sevensubscript* = 0x01002087
  CLUTTER_KEY_eightsubscript* = 0x01002088
  CLUTTER_KEY_ninesubscript* = 0x01002089
  CLUTTER_KEY_partdifferential* = 0x01002202
  CLUTTER_KEY_emptyset* = 0x01002205
  CLUTTER_KEY_elementof* = 0x01002208
  CLUTTER_KEY_notelementof* = 0x01002209
  CLUTTER_KEY_containsas* = 0x0100220B
  CLUTTER_KEY_squareroot* = 0x0100221A
  CLUTTER_KEY_cuberoot* = 0x0100221B
  CLUTTER_KEY_fourthroot* = 0x0100221C
  CLUTTER_KEY_dintegral* = 0x0100222C
  CLUTTER_KEY_tintegral* = 0x0100222D
  CLUTTER_KEY_because* = 0x01002235
  CLUTTER_KEY_approxeq* = 0x01002248
  CLUTTER_KEY_notapproxeq* = 0x01002247
  CLUTTER_KEY_notidentical* = 0x01002262
  CLUTTER_KEY_stricteq* = 0x01002263
  CLUTTER_KEY_braille_dot_1* = 0x0000FFF1
  CLUTTER_KEY_braille_dot_2* = 0x0000FFF2
  CLUTTER_KEY_braille_dot_3* = 0x0000FFF3
  CLUTTER_KEY_braille_dot_4* = 0x0000FFF4
  CLUTTER_KEY_braille_dot_5* = 0x0000FFF5
  CLUTTER_KEY_braille_dot_6* = 0x0000FFF6
  CLUTTER_KEY_braille_dot_7* = 0x0000FFF7
  CLUTTER_KEY_braille_dot_8* = 0x0000FFF8
  CLUTTER_KEY_braille_dot_9* = 0x0000FFF9
  CLUTTER_KEY_braille_dot_10* = 0x0000FFFA
  CLUTTER_KEY_braille_blank* = 0x01002800
  CLUTTER_KEY_braille_dots_1* = 0x01002801
  CLUTTER_KEY_braille_dots_2* = 0x01002802
  CLUTTER_KEY_braille_dots_12* = 0x01002803
  CLUTTER_KEY_braille_dots_3* = 0x01002804
  CLUTTER_KEY_braille_dots_13* = 0x01002805
  CLUTTER_KEY_braille_dots_23* = 0x01002806
  CLUTTER_KEY_braille_dots_123* = 0x01002807
  CLUTTER_KEY_braille_dots_4* = 0x01002808
  CLUTTER_KEY_braille_dots_14* = 0x01002809
  CLUTTER_KEY_braille_dots_24* = 0x0100280A
  CLUTTER_KEY_braille_dots_124* = 0x0100280B
  CLUTTER_KEY_braille_dots_34* = 0x0100280C
  CLUTTER_KEY_braille_dots_134* = 0x0100280D
  CLUTTER_KEY_braille_dots_234* = 0x0100280E
  CLUTTER_KEY_braille_dots_1234* = 0x0100280F
  CLUTTER_KEY_braille_dots_5* = 0x01002810
  CLUTTER_KEY_braille_dots_15* = 0x01002811
  CLUTTER_KEY_braille_dots_25* = 0x01002812
  CLUTTER_KEY_braille_dots_125* = 0x01002813
  CLUTTER_KEY_braille_dots_35* = 0x01002814
  CLUTTER_KEY_braille_dots_135* = 0x01002815
  CLUTTER_KEY_braille_dots_235* = 0x01002816
  CLUTTER_KEY_braille_dots_1235* = 0x01002817
  CLUTTER_KEY_braille_dots_45* = 0x01002818
  CLUTTER_KEY_braille_dots_145* = 0x01002819
  CLUTTER_KEY_braille_dots_245* = 0x0100281A
  CLUTTER_KEY_braille_dots_1245* = 0x0100281B
  CLUTTER_KEY_braille_dots_345* = 0x0100281C
  CLUTTER_KEY_braille_dots_1345* = 0x0100281D
  CLUTTER_KEY_braille_dots_2345* = 0x0100281E
  CLUTTER_KEY_braille_dots_12345* = 0x0100281F
  CLUTTER_KEY_braille_dots_6* = 0x01002820
  CLUTTER_KEY_braille_dots_16* = 0x01002821
  CLUTTER_KEY_braille_dots_26* = 0x01002822
  CLUTTER_KEY_braille_dots_126* = 0x01002823
  CLUTTER_KEY_braille_dots_36* = 0x01002824
  CLUTTER_KEY_braille_dots_136* = 0x01002825
  CLUTTER_KEY_braille_dots_236* = 0x01002826
  CLUTTER_KEY_braille_dots_1236* = 0x01002827
  CLUTTER_KEY_braille_dots_46* = 0x01002828
  CLUTTER_KEY_braille_dots_146* = 0x01002829
  CLUTTER_KEY_braille_dots_246* = 0x0100282A
  CLUTTER_KEY_braille_dots_1246* = 0x0100282B
  CLUTTER_KEY_braille_dots_346* = 0x0100282C
  CLUTTER_KEY_braille_dots_1346* = 0x0100282D
  CLUTTER_KEY_braille_dots_2346* = 0x0100282E
  CLUTTER_KEY_braille_dots_12346* = 0x0100282F
  CLUTTER_KEY_braille_dots_56* = 0x01002830
  CLUTTER_KEY_braille_dots_156* = 0x01002831
  CLUTTER_KEY_braille_dots_256* = 0x01002832
  CLUTTER_KEY_braille_dots_1256* = 0x01002833
  CLUTTER_KEY_braille_dots_356* = 0x01002834
  CLUTTER_KEY_braille_dots_1356* = 0x01002835
  CLUTTER_KEY_braille_dots_2356* = 0x01002836
  CLUTTER_KEY_braille_dots_12356* = 0x01002837
  CLUTTER_KEY_braille_dots_456* = 0x01002838
  CLUTTER_KEY_braille_dots_1456* = 0x01002839
  CLUTTER_KEY_braille_dots_2456* = 0x0100283A
  CLUTTER_KEY_braille_dots_12456* = 0x0100283B
  CLUTTER_KEY_braille_dots_3456* = 0x0100283C
  CLUTTER_KEY_braille_dots_13456* = 0x0100283D
  CLUTTER_KEY_braille_dots_23456* = 0x0100283E
  CLUTTER_KEY_braille_dots_123456* = 0x0100283F
  CLUTTER_KEY_braille_dots_7* = 0x01002840
  CLUTTER_KEY_braille_dots_17* = 0x01002841
  CLUTTER_KEY_braille_dots_27* = 0x01002842
  CLUTTER_KEY_braille_dots_127* = 0x01002843
  CLUTTER_KEY_braille_dots_37* = 0x01002844
  CLUTTER_KEY_braille_dots_137* = 0x01002845
  CLUTTER_KEY_braille_dots_237* = 0x01002846
  CLUTTER_KEY_braille_dots_1237* = 0x01002847
  CLUTTER_KEY_braille_dots_47* = 0x01002848
  CLUTTER_KEY_braille_dots_147* = 0x01002849
  CLUTTER_KEY_braille_dots_247* = 0x0100284A
  CLUTTER_KEY_braille_dots_1247* = 0x0100284B
  CLUTTER_KEY_braille_dots_347* = 0x0100284C
  CLUTTER_KEY_braille_dots_1347* = 0x0100284D
  CLUTTER_KEY_braille_dots_2347* = 0x0100284E
  CLUTTER_KEY_braille_dots_12347* = 0x0100284F
  CLUTTER_KEY_braille_dots_57* = 0x01002850
  CLUTTER_KEY_braille_dots_157* = 0x01002851
  CLUTTER_KEY_braille_dots_257* = 0x01002852
  CLUTTER_KEY_braille_dots_1257* = 0x01002853
  CLUTTER_KEY_braille_dots_357* = 0x01002854
  CLUTTER_KEY_braille_dots_1357* = 0x01002855
  CLUTTER_KEY_braille_dots_2357* = 0x01002856
  CLUTTER_KEY_braille_dots_12357* = 0x01002857
  CLUTTER_KEY_braille_dots_457* = 0x01002858
  CLUTTER_KEY_braille_dots_1457* = 0x01002859
  CLUTTER_KEY_braille_dots_2457* = 0x0100285A
  CLUTTER_KEY_braille_dots_12457* = 0x0100285B
  CLUTTER_KEY_braille_dots_3457* = 0x0100285C
  CLUTTER_KEY_braille_dots_13457* = 0x0100285D
  CLUTTER_KEY_braille_dots_23457* = 0x0100285E
  CLUTTER_KEY_braille_dots_123457* = 0x0100285F
  CLUTTER_KEY_braille_dots_67* = 0x01002860
  CLUTTER_KEY_braille_dots_167* = 0x01002861
  CLUTTER_KEY_braille_dots_267* = 0x01002862
  CLUTTER_KEY_braille_dots_1267* = 0x01002863
  CLUTTER_KEY_braille_dots_367* = 0x01002864
  CLUTTER_KEY_braille_dots_1367* = 0x01002865
  CLUTTER_KEY_braille_dots_2367* = 0x01002866
  CLUTTER_KEY_braille_dots_12367* = 0x01002867
  CLUTTER_KEY_braille_dots_467* = 0x01002868
  CLUTTER_KEY_braille_dots_1467* = 0x01002869
  CLUTTER_KEY_braille_dots_2467* = 0x0100286A
  CLUTTER_KEY_braille_dots_12467* = 0x0100286B
  CLUTTER_KEY_braille_dots_3467* = 0x0100286C
  CLUTTER_KEY_braille_dots_13467* = 0x0100286D
  CLUTTER_KEY_braille_dots_23467* = 0x0100286E
  CLUTTER_KEY_braille_dots_123467* = 0x0100286F
  CLUTTER_KEY_braille_dots_567* = 0x01002870
  CLUTTER_KEY_braille_dots_1567* = 0x01002871
  CLUTTER_KEY_braille_dots_2567* = 0x01002872
  CLUTTER_KEY_braille_dots_12567* = 0x01002873
  CLUTTER_KEY_braille_dots_3567* = 0x01002874
  CLUTTER_KEY_braille_dots_13567* = 0x01002875
  CLUTTER_KEY_braille_dots_23567* = 0x01002876
  CLUTTER_KEY_braille_dots_123567* = 0x01002877
  CLUTTER_KEY_braille_dots_4567* = 0x01002878
  CLUTTER_KEY_braille_dots_14567* = 0x01002879
  CLUTTER_KEY_braille_dots_24567* = 0x0100287A
  CLUTTER_KEY_braille_dots_124567* = 0x0100287B
  CLUTTER_KEY_braille_dots_34567* = 0x0100287C
  CLUTTER_KEY_braille_dots_134567* = 0x0100287D
  CLUTTER_KEY_braille_dots_234567* = 0x0100287E
  CLUTTER_KEY_braille_dots_1234567* = 0x0100287F
  CLUTTER_KEY_braille_dots_8* = 0x01002880
  CLUTTER_KEY_braille_dots_18* = 0x01002881
  CLUTTER_KEY_braille_dots_28* = 0x01002882
  CLUTTER_KEY_braille_dots_128* = 0x01002883
  CLUTTER_KEY_braille_dots_38* = 0x01002884
  CLUTTER_KEY_braille_dots_138* = 0x01002885
  CLUTTER_KEY_braille_dots_238* = 0x01002886
  CLUTTER_KEY_braille_dots_1238* = 0x01002887
  CLUTTER_KEY_braille_dots_48* = 0x01002888
  CLUTTER_KEY_braille_dots_148* = 0x01002889
  CLUTTER_KEY_braille_dots_248* = 0x0100288A
  CLUTTER_KEY_braille_dots_1248* = 0x0100288B
  CLUTTER_KEY_braille_dots_348* = 0x0100288C
  CLUTTER_KEY_braille_dots_1348* = 0x0100288D
  CLUTTER_KEY_braille_dots_2348* = 0x0100288E
  CLUTTER_KEY_braille_dots_12348* = 0x0100288F
  CLUTTER_KEY_braille_dots_58* = 0x01002890
  CLUTTER_KEY_braille_dots_158* = 0x01002891
  CLUTTER_KEY_braille_dots_258* = 0x01002892
  CLUTTER_KEY_braille_dots_1258* = 0x01002893
  CLUTTER_KEY_braille_dots_358* = 0x01002894
  CLUTTER_KEY_braille_dots_1358* = 0x01002895
  CLUTTER_KEY_braille_dots_2358* = 0x01002896
  CLUTTER_KEY_braille_dots_12358* = 0x01002897
  CLUTTER_KEY_braille_dots_458* = 0x01002898
  CLUTTER_KEY_braille_dots_1458* = 0x01002899
  CLUTTER_KEY_braille_dots_2458* = 0x0100289A
  CLUTTER_KEY_braille_dots_12458* = 0x0100289B
  CLUTTER_KEY_braille_dots_3458* = 0x0100289C
  CLUTTER_KEY_braille_dots_13458* = 0x0100289D
  CLUTTER_KEY_braille_dots_23458* = 0x0100289E
  CLUTTER_KEY_braille_dots_123458* = 0x0100289F
  CLUTTER_KEY_braille_dots_68* = 0x010028A0
  CLUTTER_KEY_braille_dots_168* = 0x010028A1
  CLUTTER_KEY_braille_dots_268* = 0x010028A2
  CLUTTER_KEY_braille_dots_1268* = 0x010028A3
  CLUTTER_KEY_braille_dots_368* = 0x010028A4
  CLUTTER_KEY_braille_dots_1368* = 0x010028A5
  CLUTTER_KEY_braille_dots_2368* = 0x010028A6
  CLUTTER_KEY_braille_dots_12368* = 0x010028A7
  CLUTTER_KEY_braille_dots_468* = 0x010028A8
  CLUTTER_KEY_braille_dots_1468* = 0x010028A9
  CLUTTER_KEY_braille_dots_2468* = 0x010028AA
  CLUTTER_KEY_braille_dots_12468* = 0x010028AB
  CLUTTER_KEY_braille_dots_3468* = 0x010028AC
  CLUTTER_KEY_braille_dots_13468* = 0x010028AD
  CLUTTER_KEY_braille_dots_23468* = 0x010028AE
  CLUTTER_KEY_braille_dots_123468* = 0x010028AF
  CLUTTER_KEY_braille_dots_568* = 0x010028B0
  CLUTTER_KEY_braille_dots_1568* = 0x010028B1
  CLUTTER_KEY_braille_dots_2568* = 0x010028B2
  CLUTTER_KEY_braille_dots_12568* = 0x010028B3
  CLUTTER_KEY_braille_dots_3568* = 0x010028B4
  CLUTTER_KEY_braille_dots_13568* = 0x010028B5
  CLUTTER_KEY_braille_dots_23568* = 0x010028B6
  CLUTTER_KEY_braille_dots_123568* = 0x010028B7
  CLUTTER_KEY_braille_dots_4568* = 0x010028B8
  CLUTTER_KEY_braille_dots_14568* = 0x010028B9
  CLUTTER_KEY_braille_dots_24568* = 0x010028BA
  CLUTTER_KEY_braille_dots_124568* = 0x010028BB
  CLUTTER_KEY_braille_dots_34568* = 0x010028BC
  CLUTTER_KEY_braille_dots_134568* = 0x010028BD
  CLUTTER_KEY_braille_dots_234568* = 0x010028BE
  CLUTTER_KEY_braille_dots_1234568* = 0x010028BF
  CLUTTER_KEY_braille_dots_78* = 0x010028C0
  CLUTTER_KEY_braille_dots_178* = 0x010028C1
  CLUTTER_KEY_braille_dots_278* = 0x010028C2
  CLUTTER_KEY_braille_dots_1278* = 0x010028C3
  CLUTTER_KEY_braille_dots_378* = 0x010028C4
  CLUTTER_KEY_braille_dots_1378* = 0x010028C5
  CLUTTER_KEY_braille_dots_2378* = 0x010028C6
  CLUTTER_KEY_braille_dots_12378* = 0x010028C7
  CLUTTER_KEY_braille_dots_478* = 0x010028C8
  CLUTTER_KEY_braille_dots_1478* = 0x010028C9
  CLUTTER_KEY_braille_dots_2478* = 0x010028CA
  CLUTTER_KEY_braille_dots_12478* = 0x010028CB
  CLUTTER_KEY_braille_dots_3478* = 0x010028CC
  CLUTTER_KEY_braille_dots_13478* = 0x010028CD
  CLUTTER_KEY_braille_dots_23478* = 0x010028CE
  CLUTTER_KEY_braille_dots_123478* = 0x010028CF
  CLUTTER_KEY_braille_dots_578* = 0x010028D0
  CLUTTER_KEY_braille_dots_1578* = 0x010028D1
  CLUTTER_KEY_braille_dots_2578* = 0x010028D2
  CLUTTER_KEY_braille_dots_12578* = 0x010028D3
  CLUTTER_KEY_braille_dots_3578* = 0x010028D4
  CLUTTER_KEY_braille_dots_13578* = 0x010028D5
  CLUTTER_KEY_braille_dots_23578* = 0x010028D6
  CLUTTER_KEY_braille_dots_123578* = 0x010028D7
  CLUTTER_KEY_braille_dots_4578* = 0x010028D8
  CLUTTER_KEY_braille_dots_14578* = 0x010028D9
  CLUTTER_KEY_braille_dots_24578* = 0x010028DA
  CLUTTER_KEY_braille_dots_124578* = 0x010028DB
  CLUTTER_KEY_braille_dots_34578* = 0x010028DC
  CLUTTER_KEY_braille_dots_134578* = 0x010028DD
  CLUTTER_KEY_braille_dots_234578* = 0x010028DE
  CLUTTER_KEY_braille_dots_1234578* = 0x010028DF
  CLUTTER_KEY_braille_dots_678* = 0x010028E0
  CLUTTER_KEY_braille_dots_1678* = 0x010028E1
  CLUTTER_KEY_braille_dots_2678* = 0x010028E2
  CLUTTER_KEY_braille_dots_12678* = 0x010028E3
  CLUTTER_KEY_braille_dots_3678* = 0x010028E4
  CLUTTER_KEY_braille_dots_13678* = 0x010028E5
  CLUTTER_KEY_braille_dots_23678* = 0x010028E6
  CLUTTER_KEY_braille_dots_123678* = 0x010028E7
  CLUTTER_KEY_braille_dots_4678* = 0x010028E8
  CLUTTER_KEY_braille_dots_14678* = 0x010028E9
  CLUTTER_KEY_braille_dots_24678* = 0x010028EA
  CLUTTER_KEY_braille_dots_124678* = 0x010028EB
  CLUTTER_KEY_braille_dots_34678* = 0x010028EC
  CLUTTER_KEY_braille_dots_134678* = 0x010028ED
  CLUTTER_KEY_braille_dots_234678* = 0x010028EE
  CLUTTER_KEY_braille_dots_1234678* = 0x010028EF
  CLUTTER_KEY_braille_dots_5678* = 0x010028F0
  CLUTTER_KEY_braille_dots_15678* = 0x010028F1
  CLUTTER_KEY_braille_dots_25678* = 0x010028F2
  CLUTTER_KEY_braille_dots_125678* = 0x010028F3
  CLUTTER_KEY_braille_dots_35678* = 0x010028F4
  CLUTTER_KEY_braille_dots_135678* = 0x010028F5
  CLUTTER_KEY_braille_dots_235678* = 0x010028F6
  CLUTTER_KEY_braille_dots_1235678* = 0x010028F7
  CLUTTER_KEY_braille_dots_45678* = 0x010028F8
  CLUTTER_KEY_braille_dots_145678* = 0x010028F9
  CLUTTER_KEY_braille_dots_245678* = 0x010028FA
  CLUTTER_KEY_braille_dots_1245678* = 0x010028FB
  CLUTTER_KEY_braille_dots_345678* = 0x010028FC
  CLUTTER_KEY_braille_dots_1345678* = 0x010028FD
  CLUTTER_KEY_braille_dots_2345678* = 0x010028FE
  CLUTTER_KEY_braille_dots_12345678* = 0x010028FF
  CLUTTER_KEY_Sinh_ng* = 0x01000D82
  CLUTTER_KEY_Sinh_h2* = 0x01000D83
  CLUTTER_KEY_Sinh_a* = 0x01000D85
  CLUTTER_KEY_Sinh_aa* = 0x01000D86
  CLUTTER_KEY_Sinh_ae* = 0x01000D87
  CLUTTER_KEY_Sinh_aee* = 0x01000D88
  CLUTTER_KEY_Sinh_i* = 0x01000D89
  CLUTTER_KEY_Sinh_ii* = 0x01000D8A
  CLUTTER_KEY_Sinh_u* = 0x01000D8B
  CLUTTER_KEY_Sinh_uu* = 0x01000D8C
  CLUTTER_KEY_Sinh_ri* = 0x01000D8D
  CLUTTER_KEY_Sinh_rii* = 0x01000D8E
  CLUTTER_KEY_Sinh_lu* = 0x01000D8F
  CLUTTER_KEY_Sinh_luu* = 0x01000D90
  CLUTTER_KEY_Sinh_e* = 0x01000D91
  CLUTTER_KEY_Sinh_ee* = 0x01000D92
  CLUTTER_KEY_Sinh_ai* = 0x01000D93
  CLUTTER_KEY_Sinh_o* = 0x01000D94
  CLUTTER_KEY_Sinh_oo* = 0x01000D95
  CLUTTER_KEY_Sinh_au* = 0x01000D96
  CLUTTER_KEY_Sinh_ka* = 0x01000D9A
  CLUTTER_KEY_Sinh_kha* = 0x01000D9B
  CLUTTER_KEY_Sinh_ga* = 0x01000D9C
  CLUTTER_KEY_Sinh_gha* = 0x01000D9D
  CLUTTER_KEY_Sinh_ng2* = 0x01000D9E
  CLUTTER_KEY_Sinh_nga* = 0x01000D9F
  CLUTTER_KEY_Sinh_ca* = 0x01000DA0
  CLUTTER_KEY_Sinh_cha* = 0x01000DA1
  CLUTTER_KEY_Sinh_ja* = 0x01000DA2
  CLUTTER_KEY_Sinh_jha* = 0x01000DA3
  CLUTTER_KEY_Sinh_nya* = 0x01000DA4
  CLUTTER_KEY_Sinh_jnya* = 0x01000DA5
  CLUTTER_KEY_Sinh_nja* = 0x01000DA6
  CLUTTER_KEY_Sinh_tta* = 0x01000DA7
  CLUTTER_KEY_Sinh_ttha* = 0x01000DA8
  CLUTTER_KEY_Sinh_dda* = 0x01000DA9
  CLUTTER_KEY_Sinh_ddha* = 0x01000DAA
  CLUTTER_KEY_Sinh_nna* = 0x01000DAB
  CLUTTER_KEY_Sinh_ndda* = 0x01000DAC
  CLUTTER_KEY_Sinh_tha* = 0x01000DAD
  CLUTTER_KEY_Sinh_thha* = 0x01000DAE
  CLUTTER_KEY_Sinh_dha* = 0x01000DAF
  CLUTTER_KEY_Sinh_dhha* = 0x01000DB0
  CLUTTER_KEY_Sinh_na* = 0x01000DB1
  CLUTTER_KEY_Sinh_ndha* = 0x01000DB3
  CLUTTER_KEY_Sinh_pa* = 0x01000DB4
  CLUTTER_KEY_Sinh_pha* = 0x01000DB5
  CLUTTER_KEY_Sinh_ba* = 0x01000DB6
  CLUTTER_KEY_Sinh_bha* = 0x01000DB7
  CLUTTER_KEY_Sinh_ma* = 0x01000DB8
  CLUTTER_KEY_Sinh_mba* = 0x01000DB9
  CLUTTER_KEY_Sinh_ya* = 0x01000DBA
  CLUTTER_KEY_Sinh_ra* = 0x01000DBB
  CLUTTER_KEY_Sinh_la* = 0x01000DBD
  CLUTTER_KEY_Sinh_va* = 0x01000DC0
  CLUTTER_KEY_Sinh_sha* = 0x01000DC1
  CLUTTER_KEY_Sinh_ssha* = 0x01000DC2
  CLUTTER_KEY_Sinh_sa* = 0x01000DC3
  CLUTTER_KEY_Sinh_ha* = 0x01000DC4
  CLUTTER_KEY_Sinh_lla* = 0x01000DC5
  CLUTTER_KEY_Sinh_fa* = 0x01000DC6
  CLUTTER_KEY_Sinh_al* = 0x01000DCA
  CLUTTER_KEY_Sinh_aa2* = 0x01000DCF
  CLUTTER_KEY_Sinh_ae2* = 0x01000DD0
  CLUTTER_KEY_Sinh_aee2* = 0x01000DD1
  CLUTTER_KEY_Sinh_i2* = 0x01000DD2
  CLUTTER_KEY_Sinh_ii2* = 0x01000DD3
  CLUTTER_KEY_Sinh_u2* = 0x01000DD4
  CLUTTER_KEY_Sinh_uu2* = 0x01000DD6
  CLUTTER_KEY_Sinh_ru2* = 0x01000DD8
  CLUTTER_KEY_Sinh_e2* = 0x01000DD9
  CLUTTER_KEY_Sinh_ee2* = 0x01000DDA
  CLUTTER_KEY_Sinh_ai2* = 0x01000DDB
  CLUTTER_KEY_Sinh_o2* = 0x01000DDC
  CLUTTER_KEY_Sinh_oo2* = 0x01000DDD
  CLUTTER_KEY_Sinh_au2* = 0x01000DDE
  CLUTTER_KEY_Sinh_lu2* = 0x01000DDF
  CLUTTER_KEY_Sinh_ruu2* = 0x01000DF2
  CLUTTER_KEY_Sinh_luu2* = 0x01000DF3
  CLUTTER_KEY_Sinh_kunddaliya* = 0x01000DF4
  CLUTTER_KEY_ModeLock* = 0x1008FF01
  CLUTTER_KEY_MonBrightnessUp* = 0x1008FF02
  CLUTTER_KEY_MonBrightnessDown* = 0x1008FF03
  CLUTTER_KEY_KbdLightOnOff* = 0x1008FF04
  CLUTTER_KEY_KbdBrightnessUp* = 0x1008FF05
  CLUTTER_KEY_KbdBrightnessDown* = 0x1008FF06
  CLUTTER_KEY_Standby* = 0x1008FF10
  CLUTTER_KEY_AudioLowerVolume* = 0x1008FF11
  CLUTTER_KEY_AudioMute* = 0x1008FF12
  CLUTTER_KEY_AudioRaiseVolume* = 0x1008FF13
  CLUTTER_KEY_AudioPlay* = 0x1008FF14
  CLUTTER_KEY_AudioStop* = 0x1008FF15
  CLUTTER_KEY_AudioPrev* = 0x1008FF16
  CLUTTER_KEY_AudioNext* = 0x1008FF17
  CLUTTER_KEY_HomePage* = 0x1008FF18
  CLUTTER_KEY_Mail* = 0x1008FF19
  CLUTTER_KEY_Start* = 0x1008FF1A
  CLUTTER_KEY_Search* = 0x1008FF1B
  CLUTTER_KEY_AudioRecord* = 0x1008FF1C
  CLUTTER_KEY_Calculator* = 0x1008FF1D
  CLUTTER_KEY_Memo* = 0x1008FF1E
  CLUTTER_KEY_ToDoList* = 0x1008FF1F
  CLUTTER_KEY_Calendar* = 0x1008FF20
  CLUTTER_KEY_PowerDown* = 0x1008FF21
  CLUTTER_KEY_ContrastAdjust* = 0x1008FF22
  CLUTTER_KEY_RockerUp* = 0x1008FF23
  CLUTTER_KEY_RockerDown* = 0x1008FF24
  CLUTTER_KEY_RockerEnter* = 0x1008FF25
  CLUTTER_KEY_Back* = 0x1008FF26
  CLUTTER_KEY_Forward* = 0x1008FF27
  CLUTTER_KEY_Stop* = 0x1008FF28
  CLUTTER_KEY_Refresh* = 0x1008FF29
  CLUTTER_KEY_PowerOff* = 0x1008FF2A
  CLUTTER_KEY_WakeUp* = 0x1008FF2B
  CLUTTER_KEY_Eject* = 0x1008FF2C
  CLUTTER_KEY_ScreenSaver* = 0x1008FF2D
  CLUTTER_KEY_WWW* = 0x1008FF2E
  CLUTTER_KEY_Sleep* = 0x1008FF2F
  CLUTTER_KEY_Favorites* = 0x1008FF30
  CLUTTER_KEY_AudioPause* = 0x1008FF31
  CLUTTER_KEY_AudioMedia* = 0x1008FF32
  CLUTTER_KEY_MyComputer* = 0x1008FF33
  CLUTTER_KEY_VendorHome* = 0x1008FF34
  CLUTTER_KEY_LightBulb* = 0x1008FF35
  CLUTTER_KEY_Shop* = 0x1008FF36
  CLUTTER_KEY_History* = 0x1008FF37
  CLUTTER_KEY_OpenURL* = 0x1008FF38
  CLUTTER_KEY_AddFavorite* = 0x1008FF39
  CLUTTER_KEY_HotLinks* = 0x1008FF3A
  CLUTTER_KEY_BrightnessAdjust* = 0x1008FF3B
  CLUTTER_KEY_Finance* = 0x1008FF3C
  CLUTTER_KEY_Community* = 0x1008FF3D
  CLUTTER_KEY_AudioRewind* = 0x1008FF3E
  CLUTTER_KEY_BackForward* = 0x1008FF3F
  CLUTTER_KEY_Launch0* = 0x1008FF40
  CLUTTER_KEY_Launch1* = 0x1008FF41
  CLUTTER_KEY_Launch2* = 0x1008FF42
  CLUTTER_KEY_Launch3* = 0x1008FF43
  CLUTTER_KEY_Launch4* = 0x1008FF44
  CLUTTER_KEY_Launch5* = 0x1008FF45
  CLUTTER_KEY_Launch6* = 0x1008FF46
  CLUTTER_KEY_Launch7* = 0x1008FF47
  CLUTTER_KEY_Launch8* = 0x1008FF48
  CLUTTER_KEY_Launch9* = 0x1008FF49
  CLUTTER_KEY_LaunchA* = 0x1008FF4A
  CLUTTER_KEY_LaunchB* = 0x1008FF4B
  CLUTTER_KEY_LaunchC* = 0x1008FF4C
  CLUTTER_KEY_LaunchD* = 0x1008FF4D
  CLUTTER_KEY_LaunchE* = 0x1008FF4E
  CLUTTER_KEY_LaunchF* = 0x1008FF4F
  CLUTTER_KEY_ApplicationLeft* = 0x1008FF50
  CLUTTER_KEY_ApplicationRight* = 0x1008FF51
  CLUTTER_KEY_Book* = 0x1008FF52
  CLUTTER_KEY_CD* = 0x1008FF53
  CLUTTER_KEY_WindowClear* = 0x1008FF55
  CLUTTER_KEY_Close* = 0x1008FF56
  CLUTTER_KEY_Copy* = 0x1008FF57
  CLUTTER_KEY_Cut* = 0x1008FF58
  CLUTTER_KEY_Display* = 0x1008FF59
  CLUTTER_KEY_DOS* = 0x1008FF5A
  CLUTTER_KEY_Documents* = 0x1008FF5B
  CLUTTER_KEY_Excel* = 0x1008FF5C
  CLUTTER_KEY_Explorer* = 0x1008FF5D
  CLUTTER_KEY_Game* = 0x1008FF5E
  CLUTTER_KEY_Go* = 0x1008FF5F
  CLUTTER_KEY_iTouch* = 0x1008FF60
  CLUTTER_KEY_LogOff* = 0x1008FF61
  CLUTTER_KEY_Market* = 0x1008FF62
  CLUTTER_KEY_Meeting* = 0x1008FF63
  CLUTTER_KEY_MenuKB* = 0x1008FF65
  CLUTTER_KEY_MenuPB* = 0x1008FF66
  CLUTTER_KEY_MySites* = 0x1008FF67
  CLUTTER_KEY_New* = 0x1008FF68
  CLUTTER_KEY_News* = 0x1008FF69
  CLUTTER_KEY_OfficeHome* = 0x1008FF6A
  CLUTTER_KEY_Open* = 0x1008FF6B
  CLUTTER_KEY_Option* = 0x1008FF6C
  CLUTTER_KEY_Paste* = 0x1008FF6D
  CLUTTER_KEY_Phone* = 0x1008FF6E
  CLUTTER_KEY_Reply* = 0x1008FF72
  CLUTTER_KEY_Reload* = 0x1008FF73
  CLUTTER_KEY_RotateWindows* = 0x1008FF74
  CLUTTER_KEY_RotationPB* = 0x1008FF75
  CLUTTER_KEY_RotationKB* = 0x1008FF76
  CLUTTER_KEY_Save* = 0x1008FF77
  CLUTTER_KEY_ScrollUp* = 0x1008FF78
  CLUTTER_KEY_ScrollDown* = 0x1008FF79
  CLUTTER_KEY_ScrollClick* = 0x1008FF7A
  CLUTTER_KEY_Send* = 0x1008FF7B
  CLUTTER_KEY_Spell* = 0x1008FF7C
  CLUTTER_KEY_SplitScreen* = 0x1008FF7D
  CLUTTER_KEY_Support* = 0x1008FF7E
  CLUTTER_KEY_TaskPane* = 0x1008FF7F
  CLUTTER_KEY_Terminal* = 0x1008FF80
  CLUTTER_KEY_Tools* = 0x1008FF81
  CLUTTER_KEY_Travel* = 0x1008FF82
  CLUTTER_KEY_UserPB* = 0x1008FF84
  CLUTTER_KEY_User1KB* = 0x1008FF85
  CLUTTER_KEY_User2KB* = 0x1008FF86
  CLUTTER_KEY_Video* = 0x1008FF87
  CLUTTER_KEY_WheelButton* = 0x1008FF88
  CLUTTER_KEY_Word* = 0x1008FF89
  CLUTTER_KEY_Xfer* = 0x1008FF8A
  CLUTTER_KEY_ZoomIn* = 0x1008FF8B
  CLUTTER_KEY_ZoomOut* = 0x1008FF8C
  CLUTTER_KEY_Away* = 0x1008FF8D
  CLUTTER_KEY_Messenger* = 0x1008FF8E
  CLUTTER_KEY_WebCam* = 0x1008FF8F
  CLUTTER_KEY_MailForward* = 0x1008FF90
  CLUTTER_KEY_Pictures* = 0x1008FF91
  CLUTTER_KEY_Music* = 0x1008FF92
  CLUTTER_KEY_Battery* = 0x1008FF93
  CLUTTER_KEY_Bluetooth* = 0x1008FF94
  CLUTTER_KEY_WLAN* = 0x1008FF95
  CLUTTER_KEY_UWB* = 0x1008FF96
  CLUTTER_KEY_AudioForward* = 0x1008FF97
  CLUTTER_KEY_AudioRepeat* = 0x1008FF98
  CLUTTER_KEY_AudioRandomPlay* = 0x1008FF99
  CLUTTER_KEY_Subtitle* = 0x1008FF9A
  CLUTTER_KEY_AudioCycleTrack* = 0x1008FF9B
  CLUTTER_KEY_CycleAngle* = 0x1008FF9C
  CLUTTER_KEY_FrameBack* = 0x1008FF9D
  CLUTTER_KEY_FrameForward* = 0x1008FF9E
  CLUTTER_KEY_Time* = 0x1008FF9F
  CLUTTER_KEY_SelectButton* = 0x1008FFA0
  CLUTTER_KEY_View* = 0x1008FFA1
  CLUTTER_KEY_TopMenu* = 0x1008FFA2
  CLUTTER_KEY_Red* = 0x1008FFA3
  CLUTTER_KEY_Green* = 0x1008FFA4
  CLUTTER_KEY_Yellow* = 0x1008FFA5
  CLUTTER_KEY_Blue* = 0x1008FFA6
  CLUTTER_KEY_Suspend* = 0x1008FFA7
  CLUTTER_KEY_Hibernate* = 0x1008FFA8
  CLUTTER_KEY_TouchpadToggle* = 0x1008FFA9
  CLUTTER_KEY_TouchpadOn* = 0x1008FFB0
  CLUTTER_KEY_TouchpadOff* = 0x1008FFB1
  CLUTTER_KEY_AudioMicMute* = 0x1008FFB2
  CLUTTER_KEY_Switch_VT_1* = 0x1008FE01
  CLUTTER_KEY_Switch_VT_2* = 0x1008FE02
  CLUTTER_KEY_Switch_VT_3* = 0x1008FE03
  CLUTTER_KEY_Switch_VT_4* = 0x1008FE04
  CLUTTER_KEY_Switch_VT_5* = 0x1008FE05
  CLUTTER_KEY_Switch_VT_6* = 0x1008FE06
  CLUTTER_KEY_Switch_VT_7* = 0x1008FE07
  CLUTTER_KEY_Switch_VT_8* = 0x1008FE08
  CLUTTER_KEY_Switch_VT_9* = 0x1008FE09
  CLUTTER_KEY_Switch_VT_10* = 0x1008FE0A
  CLUTTER_KEY_Switch_VT_11* = 0x1008FE0B
  CLUTTER_KEY_Switch_VT_12* = 0x1008FE0C
  CLUTTER_KEY_Ungrab* = 0x1008FE20
  CLUTTER_KEY_ClearGrab* = 0x1008FE21
  CLUTTER_KEY_Next_VMode* = 0x1008FE22
  CLUTTER_KEY_Prev_VMode* = 0x1008FE23
  CLUTTER_KEY_LogWindowTree* = 0x1008FE24
  CLUTTER_KEY_LogGrabInfo* = 0x1008FE25]#

type
  ClutterRedrawFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_REDRAW_CLIPPED_TO_ALLOCATION = 1 shl 0
  ClutterActorTraverseFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ACTOR_TRAVERSE_DEPTH_FIRST = 1 shl 0,
    CLUTTER_ACTOR_TRAVERSE_BREADTH_FIRST = 1 shl 1
  ClutterActorTraverseVisitFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ACTOR_TRAVERSE_VISIT_CONTINUE = 1 shl 0,
    CLUTTER_ACTOR_TRAVERSE_VISIT_SKIP_CHILDREN = 1 shl 1,
    CLUTTER_ACTOR_TRAVERSE_VISIT_BREAK = 1 shl 2
  ClutterDebugFlag* {.size: sizeof(cint), pure.} = enum
    CLUTTER_DEBUG_MISC = 1 shl 0, CLUTTER_DEBUG_ACTOR = 1 shl 1,
    CLUTTER_DEBUG_TEXTURE = 1 shl 2, CLUTTER_DEBUG_EVENT = 1 shl 3,
    CLUTTER_DEBUG_PAINT = 1 shl 4, CLUTTER_DEBUG_PANGO = 1 shl 5,
    CLUTTER_DEBUG_BACKEND = 1 shl 6, CLUTTER_DEBUG_SCHEDULER = 1 shl 7,
    CLUTTER_DEBUG_SCRIPT = 1 shl 8, CLUTTER_DEBUG_SHADER = 1 shl 9,
    CLUTTER_DEBUG_MULTISTAGE = 1 shl 10, CLUTTER_DEBUG_ANIMATION = 1 shl 11,
    CLUTTER_DEBUG_LAYOUT = 1 shl 12, CLUTTER_DEBUG_PICK = 1 shl 13,
    CLUTTER_DEBUG_EVENTLOOP = 1 shl 14, CLUTTER_DEBUG_CLIPPING = 1 shl 15,
    CLUTTER_DEBUG_OOB_TRANSFORMS = 1 shl 16
  ClutterPickDebugFlag* {.size: sizeof(cint), pure.} = enum
    CLUTTER_DEBUG_NOP_PICKING = 1 shl 0, CLUTTER_DEBUG_DUMP_PICK_BUFFERS = 1 shl 1
  ClutterDrawDebugFlag* {.size: sizeof(cint), pure.} = enum
    CLUTTER_DEBUG_DISABLE_SWAP_EVENTS = 1 shl 0,
    CLUTTER_DEBUG_DISABLE_CLIPPED_REDRAWS = 1 shl 1, CLUTTER_DEBUG_REDRAWS = 1 shl 2,
    CLUTTER_DEBUG_PAINT_VOLUMES = 1 shl 3, CLUTTER_DEBUG_DISABLE_CULLING = 1 shl 4,
    CLUTTER_DEBUG_DISABLE_OFFSCREEN_REDIRECT = 1 shl 5,
    CLUTTER_DEBUG_CONTINUOUS_REDRAW = 1 shl 6,
    CLUTTER_DEBUG_PAINT_DEFORM_TILES = 1 shl 7
  ClutterGravity* {.size: sizeof(cint), pure.} = enum
    CLUTTER_GRAVITY_NONE = 0, CLUTTER_GRAVITY_NORTH, CLUTTER_GRAVITY_NORTH_EAST,
    CLUTTER_GRAVITY_EAST, CLUTTER_GRAVITY_SOUTH_EAST, CLUTTER_GRAVITY_SOUTH,
    CLUTTER_GRAVITY_SOUTH_WEST, CLUTTER_GRAVITY_WEST, CLUTTER_GRAVITY_NORTH_WEST,
    CLUTTER_GRAVITY_CENTER
  ClutterRotateAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_X_AXIS, CLUTTER_Y_AXIS, CLUTTER_Z_AXIS
  ClutterRotateDirection* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ROTATE_CW, CLUTTER_ROTATE_CCW
  ClutterRequestMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_REQUEST_HEIGHT_FOR_WIDTH, CLUTTER_REQUEST_WIDTH_FOR_HEIGHT,
    CLUTTER_REQUEST_CONTENT_SIZE
  ClutterAnimationMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_CUSTOM_MODE = 0, CLUTTER_LINEAR, CLUTTER_EASE_IN_QUAD,
    CLUTTER_EASE_OUT_QUAD, CLUTTER_EASE_IN_OUT_QUAD, CLUTTER_EASE_IN_CUBIC,
    CLUTTER_EASE_OUT_CUBIC, CLUTTER_EASE_IN_OUT_CUBIC, CLUTTER_EASE_IN_QUART,
    CLUTTER_EASE_OUT_QUART, CLUTTER_EASE_IN_OUT_QUART, CLUTTER_EASE_IN_QUINT,
    CLUTTER_EASE_OUT_QUINT, CLUTTER_EASE_IN_OUT_QUINT, CLUTTER_EASE_IN_SINE,
    CLUTTER_EASE_OUT_SINE, CLUTTER_EASE_IN_OUT_SINE, CLUTTER_EASE_IN_EXPO,
    CLUTTER_EASE_OUT_EXPO, CLUTTER_EASE_IN_OUT_EXPO, CLUTTER_EASE_IN_CIRC,
    CLUTTER_EASE_OUT_CIRC, CLUTTER_EASE_IN_OUT_CIRC, CLUTTER_EASE_IN_ELASTIC,
    CLUTTER_EASE_OUT_ELASTIC, CLUTTER_EASE_IN_OUT_ELASTIC, CLUTTER_EASE_IN_BACK,
    CLUTTER_EASE_OUT_BACK, CLUTTER_EASE_IN_OUT_BACK, CLUTTER_EASE_IN_BOUNCE,
    CLUTTER_EASE_OUT_BOUNCE, CLUTTER_EASE_IN_OUT_BOUNCE, CLUTTER_STEPS,
    CLUTTER_STEP_START, CLUTTER_STEP_END, CLUTTER_CUBIC_BEZIER, CLUTTER_EASE,
    CLUTTER_EASE_IN, CLUTTER_EASE_OUT, CLUTTER_EASE_IN_OUT, CLUTTER_ANIMATION_LAST
  ClutterFontFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_FONT_MIPMAPPING = (1 shl 0), CLUTTER_FONT_HINTING = (1 shl 1)
  ClutterTextDirection* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TEXT_DIRECTION_DEFAULT, CLUTTER_TEXT_DIRECTION_LTR,
    CLUTTER_TEXT_DIRECTION_RTL
  ClutterShaderType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_VERTEX_SHADER, CLUTTER_FRAGMENT_SHADER
  ClutterScrollDirection* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SCROLL_UP, CLUTTER_SCROLL_DOWN, CLUTTER_SCROLL_LEFT, CLUTTER_SCROLL_RIGHT, CLUTTER_SCROLL_SMOOTH
  ClutterModifierType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SHIFT_MASK = 1 shl 0, CLUTTER_LOCK_MASK = 1 shl 1,
    CLUTTER_CONTROL_MASK = 1 shl 2, CLUTTER_MOD1_MASK = 1 shl 3,
    CLUTTER_MOD2_MASK = 1 shl 4, CLUTTER_MOD3_MASK = 1 shl 5, CLUTTER_MOD4_MASK = 1 shl 6,
    CLUTTER_MOD5_MASK = 1 shl 7, CLUTTER_BUTTON1_MASK = 1 shl 8,
    CLUTTER_BUTTON2_MASK = 1 shl 9, CLUTTER_BUTTON3_MASK = 1 shl 10,
    CLUTTER_BUTTON4_MASK = 1 shl 11, CLUTTER_BUTTON5_MASK = 1 shl 12,
    CLUTTER_SUPER_MASK = 1 shl 26, CLUTTER_HYPER_MASK = 1 shl 27,
    CLUTTER_META_MASK = 1 shl 28, CLUTTER_RELEASE_MASK = 1 shl 30,
    CLUTTER_MODIFIER_MASK = 0x5C001FFF
  ClutterActorFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ACTOR_MAPPED = 1 shl 1, CLUTTER_ACTOR_REALIZED = 1 shl 2,
    CLUTTER_ACTOR_REACTIVE = 1 shl 3, CLUTTER_ACTOR_VISIBLE = 1 shl 4,
    CLUTTER_ACTOR_NO_LAYOUT = 1 shl 5
  ClutterOffscreenRedirect* {.size: sizeof(cint), pure.} = enum
    CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY = 1 shl 0,
    CLUTTER_OFFSCREEN_REDIRECT_ALWAYS = 1 shl 1
  ClutterAllocationFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ALLOCATION_NONE = 0, CLUTTER_ABSOLUTE_ORIGIN_CHANGED = 1 shl 1,
    CLUTTER_DELEGATE_LAYOUT = 1 shl 2
  ClutterAlignAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ALIGN_X_AXIS, CLUTTER_ALIGN_Y_AXIS, CLUTTER_ALIGN_BOTH
  ClutterInterpolation* {.size: sizeof(cint), pure.} = enum
    CLUTTER_INTERPOLATION_LINEAR, CLUTTER_INTERPOLATION_CUBIC
  ClutterBinAlignment* {.size: sizeof(cint), pure.} = enum
    CLUTTER_BIN_ALIGNMENT_FIXED, CLUTTER_BIN_ALIGNMENT_FILL,
    CLUTTER_BIN_ALIGNMENT_START, CLUTTER_BIN_ALIGNMENT_END,
    CLUTTER_BIN_ALIGNMENT_CENTER
  ClutterBindCoordinate* {.size: sizeof(cint), pure.} = enum
    CLUTTER_BIND_X, CLUTTER_BIND_Y, CLUTTER_BIND_WIDTH, CLUTTER_BIND_HEIGHT,
    CLUTTER_BIND_POSITION, CLUTTER_BIND_SIZE, CLUTTER_BIND_ALL
  ClutterEffectPaintFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_EFFECT_PAINT_ACTOR_DIRTY = (1 shl 0)
  ClutterBoxAlignment* {.size: sizeof(cint), pure.} = enum
    CLUTTER_BOX_ALIGNMENT_START, CLUTTER_BOX_ALIGNMENT_END,
    CLUTTER_BOX_ALIGNMENT_CENTER
  ClutterLongPressState* {.size: sizeof(cint), pure.} = enum
    CLUTTER_LONG_PRESS_QUERY, CLUTTER_LONG_PRESS_ACTIVATE,
    CLUTTER_LONG_PRESS_CANCEL
  ClutterStaticColor* {.size: sizeof(cint), pure.} = enum
    CLUTTER_COLOR_WHITE = 0, CLUTTER_COLOR_BLACK, CLUTTER_COLOR_RED,
    CLUTTER_COLOR_DARK_RED, CLUTTER_COLOR_GREEN, CLUTTER_COLOR_DARK_GREEN,
    CLUTTER_COLOR_BLUE, CLUTTER_COLOR_DARK_BLUE, CLUTTER_COLOR_CYAN,
    CLUTTER_COLOR_DARK_CYAN, CLUTTER_COLOR_MAGENTA, CLUTTER_COLOR_DARK_MAGENTA,
    CLUTTER_COLOR_YELLOW, CLUTTER_COLOR_DARK_YELLOW, CLUTTER_COLOR_GRAY,
    CLUTTER_COLOR_DARK_GRAY, CLUTTER_COLOR_LIGHT_GRAY, CLUTTER_COLOR_BUTTER,
    CLUTTER_COLOR_BUTTER_LIGHT, CLUTTER_COLOR_BUTTER_DARK, CLUTTER_COLOR_ORANGE,
    CLUTTER_COLOR_ORANGE_LIGHT, CLUTTER_COLOR_ORANGE_DARK,
    CLUTTER_COLOR_CHOCOLATE, CLUTTER_COLOR_CHOCOLATE_LIGHT,
    CLUTTER_COLOR_CHOCOLATE_DARK, CLUTTER_COLOR_CHAMELEON,
    CLUTTER_COLOR_CHAMELEON_LIGHT, CLUTTER_COLOR_CHAMELEON_DARK,
    CLUTTER_COLOR_SKY_BLUE, CLUTTER_COLOR_SKY_BLUE_LIGHT,
    CLUTTER_COLOR_SKY_BLUE_DARK, CLUTTER_COLOR_PLUM, CLUTTER_COLOR_PLUM_LIGHT,
    CLUTTER_COLOR_PLUM_DARK, CLUTTER_COLOR_SCARLET_RED,
    CLUTTER_COLOR_SCARLET_RED_LIGHT, CLUTTER_COLOR_SCARLET_RED_DARK,
    CLUTTER_COLOR_ALUMINIUM_1, CLUTTER_COLOR_ALUMINIUM_2,
    CLUTTER_COLOR_ALUMINIUM_3, CLUTTER_COLOR_ALUMINIUM_4,
    CLUTTER_COLOR_ALUMINIUM_5, CLUTTER_COLOR_ALUMINIUM_6,
    CLUTTER_COLOR_TRANSPARENT
  ClutterDragAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_DRAG_AXIS_NONE = 0, CLUTTER_DRAG_X_AXIS, CLUTTER_DRAG_Y_AXIS
  ClutterEventFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_EVENT_NONE = 0, CLUTTER_EVENT_FLAG_SYNTHETIC = 1 shl 0
  ClutterEventType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_NOTHING = 0, CLUTTER_KEY_PRESS, CLUTTER_KEY_RELEASE, CLUTTER_MOTION,
    CLUTTER_ENTER, CLUTTER_LEAVE, CLUTTER_BUTTON_PRESS, CLUTTER_BUTTON_RELEASE,
    CLUTTER_SCROLL, CLUTTER_STAGE_STATE, CLUTTER_DESTROY_NOTIFY,
    CLUTTER_CLIENT_MESSAGE, CLUTTER_DELETE, CLUTTER_TOUCH_BEGIN,
    CLUTTER_TOUCH_UPDATE, CLUTTER_TOUCH_END, CLUTTER_TOUCH_CANCEL,
    CLUTTER_EVENT_LAST
  ClutterStageState* {.size: sizeof(cint), pure.} = enum
    CLUTTER_STAGE_STATE_FULLSCREEN = (1 shl 1),
    CLUTTER_STAGE_STATE_OFFSCREEN = (1 shl 2),
    CLUTTER_STAGE_STATE_ACTIVATED = (1 shl 3)
  ClutterFeatureFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_FEATURE_TEXTURE_NPOT = (1 shl 2),
    CLUTTER_FEATURE_SYNC_TO_VBLANK = (1 shl 3),
    CLUTTER_FEATURE_TEXTURE_YUV = (1 shl 4),
    CLUTTER_FEATURE_TEXTURE_READ_PIXELS = (1 shl 5),
    CLUTTER_FEATURE_STAGE_STATIC = (1 shl 6),
    CLUTTER_FEATURE_STAGE_USER_RESIZE = (1 shl 7),
    CLUTTER_FEATURE_STAGE_CURSOR = (1 shl 8),
    CLUTTER_FEATURE_SHADERS_GLSL = (1 shl 9), CLUTTER_FEATURE_OFFSCREEN = (1 shl 10),
    CLUTTER_FEATURE_STAGE_MULTIPLE = (1 shl 11),
    CLUTTER_FEATURE_SWAP_EVENTS = (1 shl 12)
  ClutterFlowOrientation* {.size: sizeof(cint), pure.} = enum
    CLUTTER_FLOW_HORIZONTAL, CLUTTER_FLOW_VERTICAL
  ClutterInputDeviceType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_POINTER_DEVICE, CLUTTER_KEYBOARD_DEVICE, CLUTTER_EXTENSION_DEVICE,
    CLUTTER_JOYSTICK_DEVICE, CLUTTER_TABLET_DEVICE, CLUTTER_TOUCHPAD_DEVICE,
    CLUTTER_TOUCHSCREEN_DEVICE, CLUTTER_PEN_DEVICE, CLUTTER_ERASER_DEVICE,
    CLUTTER_CURSOR_DEVICE, CLUTTER_N_DEVICE_TYPES
  ClutterInputMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_INPUT_MODE_MASTER, CLUTTER_INPUT_MODE_SLAVE,
    CLUTTER_INPUT_MODE_FLOATING
  ClutterInputAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_INPUT_AXIS_IGNORE, CLUTTER_INPUT_AXIS_X, CLUTTER_INPUT_AXIS_Y,
    CLUTTER_INPUT_AXIS_PRESSURE, CLUTTER_INPUT_AXIS_XTILT,
    CLUTTER_INPUT_AXIS_YTILT, CLUTTER_INPUT_AXIS_WHEEL,
    CLUTTER_INPUT_AXIS_DISTANCE, CLUTTER_INPUT_AXIS_LAST
  ClutterSnapEdge* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SNAP_EDGE_TOP, CLUTTER_SNAP_EDGE_RIGHT, CLUTTER_SNAP_EDGE_BOTTOM,
    CLUTTER_SNAP_EDGE_LEFT
  ClutterPickMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_PICK_NONE = 0, CLUTTER_PICK_REACTIVE, CLUTTER_PICK_ALL
  ClutterSwipeDirection* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SWIPE_DIRECTION_UP = 1 shl 0, CLUTTER_SWIPE_DIRECTION_DOWN = 1 shl 1,
    CLUTTER_SWIPE_DIRECTION_LEFT = 1 shl 2, CLUTTER_SWIPE_DIRECTION_RIGHT = 1 shl 3
  ClutterPanAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_PAN_AXIS_NONE = 0, CLUTTER_PAN_X_AXIS, CLUTTER_PAN_Y_AXIS
  ClutterTableAlignment* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TABLE_ALIGNMENT_START, CLUTTER_TABLE_ALIGNMENT_CENTER,
    CLUTTER_TABLE_ALIGNMENT_END
  ClutterTextureFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TEXTURE_NONE = 0, CLUTTER_TEXTURE_RGB_FLAG_BGR = 1 shl 1,
    CLUTTER_TEXTURE_RGB_FLAG_PREMULT = 1 shl 2,
    CLUTTER_TEXTURE_YUV_FLAG_YUV2 = 1 shl 3
  ClutterTextureQuality* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TEXTURE_QUALITY_LOW, CLUTTER_TEXTURE_QUALITY_MEDIUM,
    CLUTTER_TEXTURE_QUALITY_HIGH
  ClutterTimelineDirection* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TIMELINE_FORWARD, CLUTTER_TIMELINE_BACKWARD
  ClutterUnitType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_UNIT_PIXEL, CLUTTER_UNIT_EM, CLUTTER_UNIT_MM, CLUTTER_UNIT_POINT,
    CLUTTER_UNIT_CM
  ClutterPathNodeType* {.size: sizeof(cint), pure.} = enum
    CLUTTER_PATH_MOVE_TO = 0, CLUTTER_PATH_LINE_TO = 1, CLUTTER_PATH_CURVE_TO = 2,
    CLUTTER_PATH_CLOSE = 3
  ClutterActorAlign* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ACTOR_ALIGN_FILL, CLUTTER_ACTOR_ALIGN_START,
    CLUTTER_ACTOR_ALIGN_CENTER, CLUTTER_ACTOR_ALIGN_END
  ClutterRepaintFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_REPAINT_FLAGS_PRE_PAINT = 1 shl 0,
    CLUTTER_REPAINT_FLAGS_POST_PAINT = 1 shl 1,
    CLUTTER_REPAINT_FLAGS_QUEUE_REDRAW_ON_ADD = 1 shl 2
  ClutterContentGravity* {.size: sizeof(cint), pure.} = enum
    CLUTTER_CONTENT_GRAVITY_TOP_LEFT, CLUTTER_CONTENT_GRAVITY_TOP,
    CLUTTER_CONTENT_GRAVITY_TOP_RIGHT, CLUTTER_CONTENT_GRAVITY_LEFT,
    CLUTTER_CONTENT_GRAVITY_CENTER, CLUTTER_CONTENT_GRAVITY_RIGHT,
    CLUTTER_CONTENT_GRAVITY_BOTTOM_LEFT, CLUTTER_CONTENT_GRAVITY_BOTTOM,
    CLUTTER_CONTENT_GRAVITY_BOTTOM_RIGHT, CLUTTER_CONTENT_GRAVITY_RESIZE_FILL,
    CLUTTER_CONTENT_GRAVITY_RESIZE_ASPECT
  ClutterScalingFilter* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SCALING_FILTER_LINEAR, CLUTTER_SCALING_FILTER_NEAREST,
    CLUTTER_SCALING_FILTER_TRILINEAR
  ClutterOrientation* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ORIENTATION_HORIZONTAL, CLUTTER_ORIENTATION_VERTICAL
  ClutterScrollMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SCROLL_NONE = 0, CLUTTER_SCROLL_HORIZONTALLY = 1 shl 0,
    CLUTTER_SCROLL_VERTICALLY = 1 shl 1
  ClutterGridPosition* {.size: sizeof(cint), pure.} = enum
    CLUTTER_GRID_POSITION_LEFT, CLUTTER_GRID_POSITION_RIGHT,
    CLUTTER_GRID_POSITION_TOP, CLUTTER_GRID_POSITION_BOTTOM
  ClutterContentRepeat* {.size: sizeof(cint), pure.} = enum
    CLUTTER_REPEAT_NONE = 0, CLUTTER_REPEAT_X_AXIS = 1 shl 0,
    CLUTTER_REPEAT_Y_AXIS = 1 shl 1
  ClutterStepMode* {.size: sizeof(cint), pure.} = enum
    CLUTTER_STEP_MODE_START, CLUTTER_STEP_MODE_END
  ClutterZoomAxis* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ZOOM_X_AXIS, CLUTTER_ZOOM_Y_AXIS, CLUTTER_ZOOM_BOTH
  ClutterGestureTriggerEdge* {.size: sizeof(cint), pure.} = enum
    CLUTTER_GESTURE_TRIGGER_EDGE_NONE = 0, CLUTTER_GESTURE_TRIGGER_EDGE_AFTER,
    CLUTTER_GESTURE_TRIGGER_EDGE_BEFORE
  ClutterTranslateReturn* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TRANSLATE_CONTINUE, CLUTTER_TRANSLATE_REMOVE, CLUTTER_TRANSLATE_QUEUE
  ClutterImageError* {.size: sizeof(cint), pure.} = enum
    CLUTTER_IMAGE_ERROR_INVALID_DATA
  ClutterInitError* {.size: sizeof(cint), pure.} = enum
    CLUTTER_INIT_ERROR_INTERNAL = -3, CLUTTER_INIT_ERROR_BACKEND = -2,
    CLUTTER_INIT_ERROR_THREADS = -1, CLUTTER_INIT_ERROR_UNKNOWN = 0,
    CLUTTER_INIT_SUCCESS = 1
  PaintOpCode* {.size: sizeof(cint), pure.} = enum
    PAINT_OP_INVALID = 0, PAINT_OP_TEX_RECT, PAINT_OP_PATH, PAINT_OP_PRIMITIVE
  ClutterPrivateFlags* {.size: sizeof(cint), pure.} = enum
    CLUTTER_ACTOR_UNUSED_FLAG = 0, CLUTTER_IN_DESTRUCTION = 1 shl 0,
    CLUTTER_IS_TOPLEVEL = 1 shl 1, CLUTTER_IN_REPARENT = 1 shl 2,
    CLUTTER_IN_PAINT = 1 shl 3, CLUTTER_IN_RELAYOUT = 1 shl 4,
    CLUTTER_INTERNAL_CHILD = 1 shl 5
  ClutterCullResult* {.size: sizeof(cint), pure.} = enum
    CLUTTER_CULL_RESULT_UNKNOWN, CLUTTER_CULL_RESULT_IN, CLUTTER_CULL_RESULT_OUT,
    CLUTTER_CULL_RESULT_PARTIAL
  ClutterProfileFlag* {.size: sizeof(cint), pure.} = enum
    CLUTTER_PROFILE_PICKING_ONLY = 1 shl 0, CLUTTER_PROFILE_DISABLE_REPORT = 1 shl 1
  ClutterScriptError* {.size: sizeof(cint), pure.} = enum
    CLUTTER_SCRIPT_ERROR_INVALID_TYPE_FUNCTION,
    CLUTTER_SCRIPT_ERROR_INVALID_PROPERTY, CLUTTER_SCRIPT_ERROR_INVALID_VALUE
  ClutterTextureError* {.size: sizeof(cint), pure.} = enum
    CLUTTER_TEXTURE_ERROR_OUT_OF_MEMORY, CLUTTER_TEXTURE_ERROR_NO_YUV,
    CLUTTER_TEXTURE_ERROR_BAD_FORMAT

const
  CLUTTER_PATH_REL_MOVE_TO* = ClutterPathNodeType.CLUTTER_PATH_MOVE_TO.int or CLUTTER_PATH_RELATIVE
  CLUTTER_PATH_REL_LINE_TO* = ClutterPathNodeType.CLUTTER_PATH_LINE_TO.int or CLUTTER_PATH_RELATIVE
  CLUTTER_PATH_REL_CURVE_TO* = ClutterPathNodeType.CLUTTER_PATH_CURVE_TO.int or CLUTTER_PATH_RELATIVE
  CLUTTER_SCROLL_BOTH* = ClutterScrollMode.CLUTTER_SCROLL_HORIZONTALLY.int or 
                         ClutterScrollMode.CLUTTER_SCROLL_VERTICALLY.int
  CLUTTER_REPEAT_BOTH* = ClutterContentRepeat.CLUTTER_REPEAT_X_AXIS.int or 
                         ClutterContentRepeat.CLUTTER_REPEAT_Y_AXIS.int

# COGL stubs
type
  CoglMatrix* = ptr object
  CoglRenderer* = ptr object
  CoglDisplay* = ptr object
  CoglContext* = ptr object
  CoglSwapChain* = ptr object
  CoglPath* = ptr object
  CoglTexture* = ptr object
  CoglTextureVertex* = ptr object
  CoglFramebuffer* = ptr object
  CoglPrimitive* = ptr object
  CoglMaterial* = ptr object
  CoglHandle* = object

# Other stubs
type
  JsonNode* = ptr object
  JsonParser* = object
  CoglPixelFormat* {.size: sizeof(cint), pure.} = enum
    COGL_PIXEL_FORMAT_ANY
    COGL_PIXEL_FORMAT_A_8
    COGL_PIXEL_FORMAT_RGB_565
    COGL_PIXEL_FORMAT_RGBA_4444
    COGL_PIXEL_FORMAT_RGBA_5551
    COGL_PIXEL_FORMAT_YUV
    COGL_PIXEL_FORMAT_G_8
    COGL_PIXEL_FORMAT_RG_88
    COGL_PIXEL_FORMAT_RGB_888
    COGL_PIXEL_FORMAT_BGR_888
    COGL_PIXEL_FORMAT_RGBA_8888
    COGL_PIXEL_FORMAT_BGRA_8888
    COGL_PIXEL_FORMAT_ARGB_8888
    COGL_PIXEL_FORMAT_ABGR_8888
    COGL_PIXEL_FORMAT_RGBA_1010102
    COGL_PIXEL_FORMAT_BGRA_1010102
    COGL_PIXEL_FORMAT_ARGB_2101010
    COGL_PIXEL_FORMAT_ABGR_2101010
    COGL_PIXEL_FORMAT_RGBA_8888_PRE
    COGL_PIXEL_FORMAT_BGRA_8888_PRE
    COGL_PIXEL_FORMAT_ARGB_8888_PRE
    COGL_PIXEL_FORMAT_ABGR_8888_PRE
    COGL_PIXEL_FORMAT_RGBA_4444_PRE
    COGL_PIXEL_FORMAT_RGBA_5551_PRE
    COGL_PIXEL_FORMAT_RGBA_1010102_PRE
    COGL_PIXEL_FORMAT_BGRA_1010102_PRE
    COGL_PIXEL_FORMAT_ARGB_2101010_PRE
    COGL_PIXEL_FORMAT_ABGR_2101010_PRE
    COGL_PIXEL_FORMAT_DEPTH_16
    COGL_PIXEL_FORMAT_DEPTH_32
    COGL_PIXEL_FORMAT_DEPTH_24_STENCIL_8
  CoglBufferBit* {.size: sizeof(cint), pure.} = enum
    COGL_BUFFER_BIT_COLOR
    COGL_BUFFER_BIT_DEPTH
    COGL_BUFFER_BIT_STENCIL

type
  AState* = object
    easing_duration*: Guint
    easing_delay*: Guint
    easing_mode*: ClutterAnimationMode
  ClutterAnimationInfo* = object
    states*: ptr GArray
    cur_states*: ptr AState
    transitions*: ptr GHashTable
  ClutterBindConstraint* = object
  ClutterSnapConstraint* = object
  ClutterAlignConstraint* = object
  ClutterAlphaPrivate* = object
  ClutterAlpha* = object
    parent*: GInitiallyUnowned
    priv*: ClutterAlphaPrivate
  ClutterAction*  = object
    parent_instance*: ClutterActorMeta
  ClutterActionClass*  = object
    parent_class*: ClutterActorMetaClass
    clutter_action1*: proc ()
    clutter_action2*: proc ()
    clutter_action3*: proc ()
    clutter_action4*: proc ()
    clutter_action5*: proc ()
    clutter_action6*: proc ()
    clutter_action7*: proc ()
    clutter_action8*: proc ()
  ClutterMetaGroup*  = object
    parent_instance*: GObject
    actor*: ptr ClutterActor
    meta*: ptr GList
  ClutterMetaGroupClass*  = object
    parent_class*: GObjectClass
  ClutterActorMetaPrivate*  = object
  ClutterActorMeta*  = object
    parent_instance*: GInitiallyUnowned
    priv*: ptr ClutterActorMetaPrivate
  ClutterActorMetaClass*  = object
    parent_class*: GInitiallyUnownedClass
    set_actor*: proc (meta: ptr ClutterActorMeta; actor: ptr ClutterActor)
    clutter_meta1*: proc ()
    clutter_meta2*: proc ()
    clutter_meta3*: proc ()
    clutter_meta4*: proc ()
    clutter_meta5*: proc ()
    clutter_meta6*: proc ()
    clutter_meta7*: proc ()
  INNER_C_STRUCT*  = object
    x*: Gdouble
    y*: Gdouble
  INNER_C_UNION*  = object {.union.}
    fraction*: INNER_C_STRUCT
    units*: ClutterVertex
  AnchorCoord*  = object
    is_fractional*: Gboolean
    v*: INNER_C_UNION
  SizeRequest*  = object
    age*: Guint
    for_size*: Gfloat
    min_size*: Gfloat
    natural_size*: Gfloat
  ClutterLayoutInfo*  = object
    fixed_pos*: ClutterPoint
    margin*: ClutterMargin
    x_align* {.bitsize: 4.}: Guint
    y_align* {.bitsize: 4.}: Guint
    x_expand* {.bitsize: 1.}: Guint
    y_expand* {.bitsize: 1.}: Guint
    minimum*: ClutterSize
    natural*: ClutterSize
  ClutterTransformInfo*  = object
    rx_angle*: Gdouble
    rx_center*: AnchorCoord
    ry_angle*: Gdouble
    ry_center*: AnchorCoord
    rz_angle*: Gdouble
    rz_center*: AnchorCoord
    scale_x*: Gdouble
    scale_y*: Gdouble
    scale_z*: Gdouble
    scale_center*: AnchorCoord
    anchor*: AnchorCoord
    translation*: ClutterVertex
    z_position*: Gfloat
    pivot*: ClutterPoint
    pivot_z*: Gfloat
    transform*: CoglMatrix
    transform_set* {.bitsize: 1.}: Guint
    child_transform*: CoglMatrix
    child_transform_set* {.bitsize: 1.}: Guint
  ClutterCallback* = proc (actor: ptr ClutterActor; data: Gpointer)
  ClutterBezier* = object
  ClutterBrightnessContrastEffect* = object
  ClutterActorPrivate*  = object
  ClutterActor*  = object
    parent_instance*: GInitiallyUnowned
    flags*: uint32
    private_flags*: uint32
    priv*: ptr ClutterActorPrivate
  ClutterActorClass*  = object
    parent_class*: GInitiallyUnownedClass
    show*: proc (self: ptr ClutterActor)
    show_all*: proc (self: ptr ClutterActor)
    hide*: proc (self: ptr ClutterActor)
    hide_all*: proc (self: ptr ClutterActor)
    realize*: proc (self: ptr ClutterActor)
    unrealize*: proc (self: ptr ClutterActor)
    map*: proc (self: ptr ClutterActor)
    unmap*: proc (self: ptr ClutterActor)
    paint*: proc (self: ptr ClutterActor)
    parent_set*: proc (actor: ptr ClutterActor; old_parent: ptr ClutterActor)
    destroy*: proc (self: ptr ClutterActor)
    pick*: proc (actor: ptr ClutterActor; color: ptr ClutterColor)
    queue_redraw*: proc (actor: ptr ClutterActor; leaf_that_queued: ptr ClutterActor)
    get_preferred_width*: proc (self: ptr ClutterActor; for_height: Gfloat; min_width_p: ptr Gfloat; natural_width_p: ptr Gfloat)
    get_preferred_height*: proc (self: ptr ClutterActor; for_width: Gfloat; min_height_p: ptr Gfloat; natural_height_p: ptr Gfloat)
    allocate*: proc (self: ptr ClutterActor; box: ptr ClutterActorBox; flags: ClutterAllocationFlags)
    apply_transform*: proc (actor: ptr ClutterActor; matrix: ptr ClutterMatrix)
    event*: proc (actor: ptr ClutterActor; event: ptr ClutterEvent): Gboolean
    button_press_event*: proc (actor: ptr ClutterActor; event: ptr ClutterButtonEvent): Gboolean
    button_release_event*: proc (actor: ptr ClutterActor; event: ptr ClutterButtonEvent): Gboolean
    scroll_event*: proc (actor: ptr ClutterActor; event: ptr ClutterScrollEvent): Gboolean
    key_press_event*: proc (actor: ptr ClutterActor; event: ptr ClutterKeyEvent): Gboolean
    key_release_event*: proc (actor: ptr ClutterActor; event: ptr ClutterKeyEvent): Gboolean
    motion_event*: proc (actor: ptr ClutterActor; event: ptr ClutterMotionEvent): Gboolean
    enter_event*: proc (actor: ptr ClutterActor; event: ptr ClutterCrossingEvent): Gboolean
    leave_event*: proc (actor: ptr ClutterActor; event: ptr ClutterCrossingEvent): Gboolean
    captured_event*: proc (actor: ptr ClutterActor; event: ptr ClutterEvent): Gboolean
    key_focus_in*: proc (actor: ptr ClutterActor)
    key_focus_out*: proc (actor: ptr ClutterActor)
    queue_relayout*: proc (self: ptr ClutterActor)
    get_accessible*: proc (self: ptr ClutterActor): atk.Object
    get_paint_volume*: proc (actor: ptr ClutterActor; volume: ptr ClutterPaintVolume): Gboolean
    has_overlaps*: proc (self: ptr ClutterActor): Gboolean
    paint_node*: proc (self: ptr ClutterActor; root: ptr ClutterPaintNode)
    touch_event*: proc (self: ptr ClutterActor; event: ptr ClutterTouchEvent): Gboolean
    padding_dummy*: array[26, Gpointer]
  ClutterActorIter*  = object
    CLUTTER_PRIVATE_FIELD1*: proc (a2: int): Gpointer
    CLUTTER_PRIVATE_FIELD2*: proc (a2: int): Gpointer
    CLUTTER_PRIVATE_FIELD3*: proc (a2: int): Gpointer
    CLUTTER_PRIVATE_FIELD4*: proc (a2: int): Gint
    CLUTTER_PRIVATE_FIELD5*: proc (a2: int): Gpointer
  ClutterAnimationPrivate* = object
  ClutterAnimation* = object
    parent_instance*: GObject
    priv*: ClutterAnimationPrivate
  ClutterAnimatable* = object
  ClutterAnimatableIface*  = object
    parent_iface*: GTypeInterface
    animate_property*: proc (animatable: ptr ClutterAnimatable; animation: ptr ClutterAnimation; property_name: ptr Gchar; initial_value: ptr GValue; final_value: ptr GValue; progress: Gdouble; value: ptr GValue): Gboolean
    find_property*: proc (animatable: ptr ClutterAnimatable; property_name: ptr Gchar): ptr GParamSpec
    get_initial_state*: proc (animatable: ptr ClutterAnimatable; property_name: ptr Gchar; value: ptr GValue)
    set_final_state*: proc (animatable: ptr ClutterAnimatable; property_name: ptr Gchar; value: ptr GValue)
    interpolate_value*: proc (animatable: ptr ClutterAnimatable; property_name: ptr Gchar; interval: ptr ClutterInterval; progress: Gdouble; value: ptr GValue): Gboolean
  ClutterBackendPrivate*  = object
  ClutterBackend*  = object
    parent_instance*: GObject
    cogl_renderer*: CoglRenderer
    cogl_display*: CoglDisplay
    cogl_context*: CoglContext
    cogl_source*: ptr GSource
    device_manager*: ptr ClutterDeviceManager
    priv*: ptr ClutterBackendPrivate
  ClutterStageWindow* = object
  ClutterBackendClass*  = object
    parent_class*: GObjectClass
    stage_window_type*: GType
    pre_parse*: proc (backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean
    post_parse*: proc (backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean
    create_stage*: proc (backend: ptr ClutterBackend; wrapper: ptr ClutterStage; error: ptr ptr GError): ptr ClutterStageWindow
    init_events*: proc (backend: ptr ClutterBackend)
    init_features*: proc (backend: ptr ClutterBackend)
    add_options*: proc (backend: ptr ClutterBackend; group: ptr GOptionGroup)
    get_features*: proc (backend: ptr ClutterBackend): ClutterFeatureFlags
    get_renderer*: proc (backend: ptr ClutterBackend; error: ptr ptr GError): CoglRenderer
    get_display*: proc (backend: ptr ClutterBackend; renderer: CoglRenderer; swap_chain: CoglSwapChain; error: ptr ptr GError): CoglDisplay
    create_context*: proc (backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean
    ensure_context*: proc (backend: ptr ClutterBackend; stage: ptr ClutterStage)
    get_device_manager*: proc (backend: ptr ClutterBackend): ptr ClutterDeviceManager
    copy_event_data*: proc (backend: ptr ClutterBackend; src: ptr ClutterEvent; dest: ptr ClutterEvent)
    free_event_data*: proc (backend: ptr ClutterBackend; event: ptr ClutterEvent)
    translate_event*: proc (backend: ptr ClutterBackend; native: Gpointer; event: ptr ClutterEvent): Gboolean
    get_keymap_direction*: proc (backend: ptr ClutterBackend): Direction
    resolution_changed*: proc (backend: ptr ClutterBackend)
    font_changed*: proc (backend: ptr ClutterBackend)
    settings_changed*: proc (backend: ptr ClutterBackend)
  ClutterBinLayoutPrivate*  = object
  ClutterBinLayout*  = object
    parent_instance*: ClutterLayoutManager
    priv*: ptr ClutterBinLayoutPrivate
  ClutterBinLayoutClass*  = object
    parent_class*: ClutterLayoutManagerClass
  ClutterBindingActionFunc* = proc (gobject: ptr GObject; action_name: ptr Gchar; key_val: Guint; modifiers: ClutterModifierType; user_data: Gpointer): Gboolean
  ClutterBindingPool* = object
  ClutterBoxLayoutPrivate*  = object
  ClutterBoxLayout*  = object
    parent_instance*: ClutterLayoutManager
    priv*: ptr ClutterBoxLayoutPrivate
  ClutterBoxLayoutClass*  = object
    parent_class*: ClutterLayoutManagerClass
  ClutterCanvasPrivate*  = object
  ClutterCanvas*  = object
    parent_instance*: GObject
    priv*: ptr ClutterCanvasPrivate
  ClutterCanvasClass*  = object
    parent_class*: GObjectClass
    draw*: proc (canvas: ptr ClutterCanvas; cr: cairo.Context; width: cint; height: cint): Gboolean
    padding*: array[16, Gpointer]
  ClutterChildMeta*  = object
    parent_instance*: GObject
    container*: ptr ClutterContainer
    actor*: ptr ClutterActor
  ClutterChildMetaClass*  = object
    parent_class*: GObjectClass
  ClutterClickActionPrivate*  = object
  ClutterClickAction*  = object
    parent_instance*: ClutterAction
    priv*: ptr ClutterClickActionPrivate
  ClutterClickActionClass*  = object
    parent_class*: ClutterActionClass
    clicked*: proc (action: ptr ClutterClickAction; actor: ptr ClutterActor)
    long_press*: proc (action: ptr ClutterClickAction; actor: ptr ClutterActor; state: ClutterLongPressState): Gboolean
    clutter_click_action1*: proc ()
    clutter_click_action2*: proc ()
    clutter_click_action3*: proc ()
    clutter_click_action4*: proc ()
    clutter_click_action5*: proc ()
    clutter_click_action6*: proc ()
    clutter_click_action7*: proc ()
  ClutterClonePrivate*  = object
  ClutterClone*  = object
    parent_instance*: ClutterActor
    priv*: ptr ClutterClonePrivate
  ClutterCloneClass*  = object
    parent_class*: ClutterActorClass
    clutter_actor_clone1*: proc ()
    clutter_actor_clone2*: proc ()
    clutter_actor_clone3*: proc ()
    clutter_actor_clone4*: proc ()
  ClutterColor* = object
    red*: uint8
    green*: uint8
    blue*: uint8
    alpha*: uint8
  ClutterColorizeEffect* = object
  ClutterContainer* = object
  ClutterParamSpecColor*  = object
    parent_instance*: GParamSpec
    default_value*: ptr ClutterColor
  ClutterConstraint*  = object
    parent_instance*: ClutterActorMeta
  ClutterConstraintClass*  = object
    parent_class*: ClutterActorMetaClass
    update_allocation*: proc (constraint: ptr ClutterConstraint; actor: ptr ClutterActor; allocation: ptr ClutterActorBox)
    update_preferred_size*: proc (constraint: ptr ClutterConstraint; actor: ptr ClutterActor; direction: ClutterOrientation; for_size: cfloat; minimum_size: ptr cfloat; natural_size: ptr cfloat)
    clutter_constraint1*: proc ()
    clutter_constraint2*: proc ()
    clutter_constraint3*: proc ()
    clutter_constraint4*: proc ()
    clutter_constraint5*: proc ()
    clutter_constraint6*: proc ()
    clutter_constraint7*: proc ()
  ClutterContainerIface*  = object
    g_iface*: GTypeInterface
    add*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    remove*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    foreach*: proc (container: ptr ClutterContainer; callback: ClutterCallback; user_data: Gpointer)
    foreach_with_internals*: proc (container: ptr ClutterContainer; callback: ClutterCallback; user_data: Gpointer)
    `raise`*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor; sibling: ptr ClutterActor)
    lower*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor; sibling: ptr ClutterActor)
    sort_depth_order*: proc (container: ptr ClutterContainer)
    child_meta_type*: GType
    create_child_meta*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    destroy_child_meta*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    get_child_meta*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor): ptr ClutterChildMeta
    actor_added*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    actor_removed*: proc (container: ptr ClutterContainer; actor: ptr ClutterActor)
    child_notify*: proc (container: ptr ClutterContainer; child: ptr ClutterActor; pspec: ptr GParamSpec)
  ClutterContent* = object
  ClutterContentIface*  = object
    g_iface*: GTypeInterface
    get_preferred_size*: proc (content: ptr ClutterContent; width: ptr Gfloat; height: ptr Gfloat): Gboolean
    paint_content*: proc (content: ptr ClutterContent; actor: ptr ClutterActor; node: ptr ClutterPaintNode)
    attached*: proc (content: ptr ClutterContent; actor: ptr ClutterActor)
    detached*: proc (content: ptr ClutterContent; actor: ptr ClutterActor)
    invalidate*: proc (content: ptr ClutterContent)
  ClutterDeformEffectPrivate*  = object
  ClutterDeformEffect*  = object
    parent_instance*: ClutterOffscreenEffect
    priv*: ptr ClutterDeformEffectPrivate
  ClutterDeformEffectClass*  = object
    parent_class*: ClutterOffscreenEffectClass
    deform_vertex*: proc (effect: ptr ClutterDeformEffect; width: Gfloat; height: Gfloat; vertex: CoglTextureVertex)
    clutter_deform1*: proc ()
    clutter_deform2*: proc ()
    clutter_deform3*: proc ()
    clutter_deform4*: proc ()
    clutter_deform5*: proc ()
    clutter_deform6*: proc ()
    clutter_deform7*: proc ()
  ClutterDesaturateEffect* = object
  ClutterEventSequence* = object
  ClutterAxisInfo*  = object
    axis*: ClutterInputAxis
    min_axis*: Gdouble
    max_axis*: Gdouble
    min_value*: Gdouble
    max_value*: Gdouble
    resolution*: Gdouble
  ClutterKeyInfo*  = object
    keyval*: Guint
    modifiers*: ClutterModifierType
  ClutterScrollInfo*  = object
    axis_id*: Guint
    direction*: ClutterScrollDirection
    increment*: Gdouble
    last_value*: Gdouble
    last_value_valid* {.bitsize: 1.}: Guint
  ClutterTouchInfo*  = object
    sequence*: ptr ClutterEventSequence
    actor*: ptr ClutterActor
    current_x*: Gfloat
    current_y*: Gfloat
  ClutterInputDevice*  = object
    parent_instance*: GObject
    id*: Gint
    device_type*: ClutterInputDeviceType
    device_mode*: ClutterInputMode
    device_name*: ptr Gchar
    device_manager*: ptr ClutterDeviceManager
    backend*: ptr ClutterBackend
    associated*: ptr ClutterInputDevice
    slaves*: ptr GList
    cursor_actor*: ptr ClutterActor
    inv_touch_sequence_actors*: ptr GHashTable
    pointer_grab_actor*: ptr ClutterActor
    keyboard_grab_actor*: ptr ClutterActor
    sequence_grab_actors*: ptr GHashTable
    inv_sequence_grab_actors*: ptr GHashTable
    click_count*: Gint
    stage*: ptr ClutterStage
    current_x*: Gfloat
    current_y*: Gfloat
    current_time*: uint32
    current_button_number*: Gint
    current_state*: ClutterModifierType
    touch_sequences_info*: ptr GHashTable
    previous_x*: Gint
    previous_y*: Gint
    previous_time*: uint32
    previous_button_number*: Gint
    previous_state*: ClutterModifierType
    axes*: ptr GArray
    n_keys*: Guint
    keys*: ptr GArray
    scroll_info*: ptr GArray
    has_cursor* {.bitsize: 1.}: Guint
    is_enabled* {.bitsize: 1.}: Guint
  ClutterInputDeviceClass*  = object
    parent_class*: GObjectClass
    keycode_to_evdev*: proc (device: ptr ClutterInputDevice; hardware_keycode: Guint; evdev_keycode: ptr Guint): Gboolean
  ClutterDeviceManagerPrivate*  = object
  ClutterDeviceManager*  = object
    parent_instance*: GObject
    priv*: ptr ClutterDeviceManagerPrivate
  ClutterDeviceManagerClass*  = object
    parent_class*: GObjectClass
    get_devices*: proc (device_manager: ptr ClutterDeviceManager): ptr GSList
    get_core_device*: proc (device_manager: ptr ClutterDeviceManager; device_type: ClutterInputDeviceType): ptr ClutterInputDevice
    get_device*: proc (device_manager: ptr ClutterDeviceManager; device_id: Gint): ptr ClutterInputDevice
    add_device*: proc (manager: ptr ClutterDeviceManager; device: ptr ClutterInputDevice)
    remove_device*: proc (manager: ptr ClutterDeviceManager; device: ptr ClutterInputDevice)
    select_stage_events*: proc (manager: ptr ClutterDeviceManager; stage: ptr ClutterStage)
    padding*: array[7, Gpointer]
  ClutterDragActionPrivate*  = object
  ClutterDragAction*  = object
    parent_instance*: ClutterAction
    priv*: ptr ClutterDragActionPrivate
  ClutterDragActionClass*  = object
    parentclass*: ClutterActionClass
    drag_begin*: proc (action: ptr ClutterDragAction; actor: ptr ClutterActor; event_x: Gfloat; event_y: Gfloat; modifiers: ClutterModifierType)
    drag_motion*: proc (action: ptr ClutterDragAction; actor: ptr ClutterActor; delta_x: Gfloat; delta_y: Gfloat)
    drag_end*: proc (action: ptr ClutterDragAction; actor: ptr ClutterActor; event_x: Gfloat; event_y: Gfloat; modifiers: ClutterModifierType)
    drag_progress*: proc (action: ptr ClutterDragAction; actor: ptr ClutterActor; delta_x: Gfloat; delta_y: Gfloat): Gboolean
    clutter_drag_action1*: proc ()
    clutter_drag_action2*: proc ()
    clutter_drag_action3*: proc ()
    clutter_drag_action4*: proc ()
  ClutterDropActionPrivate*  = object
  ClutterDropAction*  = object
    parent_instance*: ClutterAction
    priv*: ptr ClutterDropActionPrivate
  ClutterDropActionClass*  = object
    parentclass*: ClutterActionClass
    can_drop*: proc (action: ptr ClutterDropAction; actor: ptr ClutterActor; event_x: Gfloat; event_y: Gfloat): Gboolean
    over_in*: proc (action: ptr ClutterDropAction; actor: ptr ClutterActor)
    over_out*: proc (action: ptr ClutterDropAction; actor: ptr ClutterActor)
    drop*: proc (action: ptr ClutterDropAction; actor: ptr ClutterActor; event_x: Gfloat; event_y: Gfloat)
    clutter_drop_action1*: proc ()
    clutter_drop_action2*: proc ()
    clutter_drop_action3*: proc ()
    clutter_drop_action4*: proc ()
    clutter_drop_action5*: proc ()
    clutter_drop_action6*: proc ()
    clutter_drop_action7*: proc ()
    clutter_drop_action8*: proc ()
  ClutterEasingFunc* = proc (t: cdouble; d: cdouble): cdouble
  ClutterEffect*  = object
    parent_instance*: ClutterActorMeta
  ClutterEffectClass*  = object
    parent_class*: ClutterActorMetaClass
    pre_paint*: proc (effect: ptr ClutterEffect): Gboolean
    post_paint*: proc (effect: ptr ClutterEffect)
    get_paint_volume*: proc (effect: ptr ClutterEffect; volume: ptr ClutterPaintVolume): Gboolean
    paint*: proc (effect: ptr ClutterEffect; flags: ClutterEffectPaintFlags)
    pick*: proc (effect: ptr ClutterEffect; flags: ClutterEffectPaintFlags)
    clutter_effect4*: proc ()
    clutter_effect5*: proc ()
    clutter_effect6*: proc ()
  ClutterEventTranslator* = object
  ClutterEventTranslatorIface*  = object
    g_iface*: GTypeInterface
    translate_event*: proc (translator: ptr ClutterEventTranslator; native: Gpointer; translated: ptr ClutterEvent): ClutterTranslateReturn
  ClutterAnyEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
  ClutterKeyEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    modifier_state*: ClutterModifierType
    keyval*: Guint
    hardware_keycode*: uint16
    unicode_value*: Gunichar
    device*: ptr ClutterInputDevice
  ClutterButtonEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    x*: Gfloat
    y*: Gfloat
    modifier_state*: ClutterModifierType
    button*: uint32
    click_count*: Guint
    axes*: ptr Gdouble
    device*: ptr ClutterInputDevice
  ClutterCrossingEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    x*: Gfloat
    y*: Gfloat
    device*: ptr ClutterInputDevice
    related*: ptr ClutterActor
  ClutterMotionEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    x*: Gfloat
    y*: Gfloat
    modifier_state*: ClutterModifierType
    axes*: ptr Gdouble
    device*: ptr ClutterInputDevice
  ClutterScrollEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    x*: Gfloat
    y*: Gfloat
    direction*: ClutterScrollDirection
    modifier_state*: ClutterModifierType
    axes*: ptr Gdouble
    device*: ptr ClutterInputDevice
  ClutterStageStateEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    changed_mask*: ClutterStageState
    new_state*: ClutterStageState
  ClutterTouchEvent*  = object
    `type`*: ClutterEventType
    time*: uint32
    flags*: ClutterEventFlags
    stage*: ptr ClutterStage
    source*: ptr ClutterActor
    x*: Gfloat
    y*: Gfloat
    sequence*: ptr ClutterEventSequence
    modifier_state*: ClutterModifierType
    axes*: ptr Gdouble
    device*: ptr ClutterInputDevice
  ClutterEvent*  = object {.union.}
    `type`*: ClutterEventType
    `any`*: ClutterAnyEvent
    button*: ClutterButtonEvent
    key*: ClutterKeyEvent
    motion*: ClutterMotionEvent
    scroll*: ClutterScrollEvent
    stage_state*: ClutterStageStateEvent
    crossing*: ClutterCrossingEvent
    touch*: ClutterTouchEvent
  ClutterEventFilterFunc* = proc (event: ptr ClutterEvent; user_data: Gpointer): Gboolean
  ClutterFixedLayout*  = object
    parent_instance*: ClutterLayoutManager
  ClutterFixedLayoutClass*  = object
    parent_class*: ClutterLayoutManagerClass
  ClutterFlattenEffectClass*  = object
    parent_class*: ClutterOffscreenEffectClass
  ClutterFlattenEffect*  = object
    parent*: ClutterOffscreenEffect
  ClutterFlowLayoutPrivate* = object
  ClutterFlowLayout*  = object
    parent_instance*: ClutterLayoutManager
    priv*: ptr ClutterFlowLayoutPrivate
  ClutterFlowLayoutClass*  = object
    parent_class*: ClutterLayoutManagerClass
  ClutterGestureActionPrivate*  = object
  ClutterGestureAction*  = object
    parent_instance*: ClutterAction
    priv*: ptr ClutterGestureActionPrivate
  ClutterGestureActionClass*  = object
    parent_class*: ClutterActionClass
    gesture_begin*: proc (action: ptr ClutterGestureAction; actor: ptr ClutterActor): Gboolean
    gesture_progress*: proc (action: ptr ClutterGestureAction; actor: ptr ClutterActor): Gboolean
    gesture_end*: proc (action: ptr ClutterGestureAction; actor: ptr ClutterActor)
    gesture_cancel*: proc (action: ptr ClutterGestureAction; actor: ptr ClutterActor)
    gesture_prepare*: proc (action: ptr ClutterGestureAction; actor: ptr ClutterActor): Gboolean
    clutter_gesture_action1*: proc ()
    clutter_gesture_action2*: proc ()
    clutter_gesture_action3*: proc ()
    clutter_gesture_action4*: proc ()
    clutter_gesture_action5*: proc ()
    clutter_gesture_action6*: proc ()
  ClutterGridLayoutPrivate*  = object
  ClutterGridLayout*  = object
    parent_instance*: ClutterLayoutManager
    priv*: ptr ClutterGridLayoutPrivate
  ClutterGridLayoutClass*  = object
    parent_class*: ClutterLayoutManagerClass
    padding*: array[8, Gpointer]
  ClutterGroupPrivate*  = object
  ClutterGroup*  = object
    parent_instance*: ClutterActor
    priv*: ptr ClutterGroupPrivate
  ClutterGroupClass*  = object
    parent_class*: ClutterActorClass
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
  ClutterIDPool* = object
    array*: ptr GArray
    free_ids*: ptr GSList
  ClutterImagePrivate*  = object
  ClutterImage*  = object
    parent_instance*: GObject
    priv*: ptr ClutterImagePrivate
  ClutterImageClass*  = object
    parent_class*: GObjectClass
    padding*: array[16, Gpointer]
  ClutterIntervalPrivate*  = object
  ClutterInterval*  = object
    parent_instance*: GInitiallyUnowned
    priv*: ptr ClutterIntervalPrivate
  ClutterIntervalClass*  = object
    parent_class*: GInitiallyUnownedClass
    validate*: proc (interval: ptr ClutterInterval; pspec: ptr GParamSpec): Gboolean
    compute_value*: proc (interval: ptr ClutterInterval; factor: Gdouble; value: ptr GValue): Gboolean
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
  ClutterKeyframeTransitionPrivate*  = object
  ClutterKeyframeTransition*  = object
    parent_instance*: ClutterPropertyTransition
    priv*: ptr ClutterKeyframeTransitionPrivate
  ClutterKeyframeTransitionClass*  = object
    parent_class*: ClutterPropertyTransitionClass
    padding*: array[8, Gpointer]
  ClutterLayoutManager*  = object
    parent_instance*: GInitiallyUnowned
    dummy*: Gpointer
  ClutterLayoutManagerClass*  = object
    parent_class*: GInitiallyUnownedClass
    get_preferred_width*: proc (manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; for_height: Gfloat; min_width_p: ptr Gfloat; nat_width_p: ptr Gfloat)
    get_preferred_height*: proc (manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; for_width: Gfloat; min_height_p: ptr Gfloat; nat_height_p: ptr Gfloat)
    allocate*: proc (manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; allocation: ptr ClutterActorBox; flags: ClutterAllocationFlags)
    set_container*: proc (manager: ptr ClutterLayoutManager; container: ptr ClutterContainer)
    get_child_meta_type*: proc (manager: ptr ClutterLayoutManager): GType
    create_child_meta*: proc (manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor): ptr ClutterLayoutMeta
    begin_animation*: proc (manager: ptr ClutterLayoutManager; duration: Guint; mode: Gulong): ptr ClutterAlpha
    get_animation_progress*: proc (manager: ptr ClutterLayoutManager): Gdouble
    end_animation*: proc (manager: ptr ClutterLayoutManager)
    layout_changed*: proc (manager: ptr ClutterLayoutManager)
    clutter_padding_1*: proc ()
    clutter_padding_2*: proc ()
    clutter_padding_3*: proc ()
    clutter_padding_4*: proc ()
    clutter_padding_5*: proc ()
    clutter_padding_6*: proc ()
    clutter_padding_7*: proc ()
    clutter_padding_8*: proc ()
  ClutterLayoutMeta*  = object
    parent_instance*: ClutterChildMeta
    manager*: ptr ClutterLayoutManager
    dummy0*: int32
    dummy1*: Gpointer
  ClutterLayoutMetaClass*  = object
    parent_class*: ClutterChildMetaClass
    clutter_padding1*: proc ()
    clutter_padding2*: proc ()
    clutter_padding3*: proc ()
    clutter_padding4*: proc ()
  ClutterListModelPrivate*  = object
  ClutterListModel*  = object
    parent_instance*: ClutterModel
    priv*: ptr ClutterListModelPrivate
  ClutterListModelClass*  = object
    parent_class*: ClutterModelClass
  ClutterModelFilterFunc* = proc (model: ptr ClutterModel; iter: ptr ClutterModelIter; user_data: Gpointer): Gboolean
  ClutterModelSortFunc* = proc (model: ptr ClutterModel; a: ptr GValue; b: ptr GValue; user_data: Gpointer): Gint
  ClutterModelForeachFunc* = proc (model: ptr ClutterModel; iter: ptr ClutterModelIter; user_data: Gpointer): Gboolean
  ClutterModelPrivate*  = object
  ClutterModel*  = object
    parent_instance*: GObject
    priv*: ptr ClutterModelPrivate
  ClutterModelClass*  = object
    parent_class*: GObjectClass
    get_n_rows*: proc (model: ptr ClutterModel): Guint
    get_n_columns*: proc (model: ptr ClutterModel): Guint
    get_column_name*: proc (model: ptr ClutterModel; column: Guint): ptr Gchar
    get_column_type*: proc (model: ptr ClutterModel; column: Guint): GType
    insert_row*: proc (model: ptr ClutterModel; index: Gint): ptr ClutterModelIter
    remove_row*: proc (model: ptr ClutterModel; row: Guint)
    get_iter_at_row*: proc (model: ptr ClutterModel; row: Guint): ptr ClutterModelIter
    resort*: proc (model: ptr ClutterModel; `func`: ClutterModelSortFunc; data: Gpointer)
    row_added*: proc (model: ptr ClutterModel; iter: ptr ClutterModelIter)
    row_removed*: proc (model: ptr ClutterModel; iter: ptr ClutterModelIter)
    row_changed*: proc (model: ptr ClutterModel; iter: ptr ClutterModelIter)
    sort_changed*: proc (model: ptr ClutterModel)
    filter_changed*: proc (model: ptr ClutterModel)
    clutter_model_1*: proc ()
    clutter_model_2*: proc ()
    clutter_model_3*: proc ()
    clutter_model_4*: proc ()
    clutter_model_5*: proc ()
    clutter_model_6*: proc ()
    clutter_model_7*: proc ()
    clutter_model_8*: proc ()
  ClutterModelIterPrivate* = object
  ClutterModelIter*  = object
    parent_instance*: GObject
    priv*: ptr ClutterModelIterPrivate
  ClutterModelIterClass*  = object
    parent_class*: GObjectClass
    get_value*: proc (iter: ptr ClutterModelIter; column: Guint; value: ptr GValue)
    set_value*: proc (iter: ptr ClutterModelIter; column: Guint; value: ptr GValue)
    is_first*: proc (iter: ptr ClutterModelIter): Gboolean
    is_last*: proc (iter: ptr ClutterModelIter): Gboolean
    next*: proc (iter: ptr ClutterModelIter): ptr ClutterModelIter
    prev*: proc (iter: ptr ClutterModelIter): ptr ClutterModelIter
    get_model*: proc (iter: ptr ClutterModelIter): ptr ClutterModel
    get_row*: proc (iter: ptr ClutterModelIter): Guint
    copy*: proc (iter: ptr ClutterModelIter): ptr ClutterModelIter
    clutter_model_iter_1*: proc ()
    clutter_model_iter_2*: proc ()
    clutter_model_iter_3*: proc ()
    clutter_model_iter_4*: proc ()
    clutter_model_iter_5*: proc ()
    clutter_model_iter_6*: proc ()
    clutter_model_iter_7*: proc ()
    clutter_model_iter_8*: proc ()
  ClutterOffscreenEffectPrivate* = object
  ClutterOffscreenEffect*  = object
    parent_instance*: ClutterEffect
    priv*: ptr ClutterOffscreenEffectPrivate
  ClutterOffscreenEffectClass*  = object
    parent_class*: ClutterEffectClass
    create_texture*: proc (effect: ptr ClutterOffscreenEffect; width: Gfloat; height: Gfloat): CoglHandle
    paint_target*: proc (effect: ptr ClutterOffscreenEffect)
    clutter_offscreen1*: proc ()
    clutter_offscreen2*: proc ()
    clutter_offscreen3*: proc ()
    clutter_offscreen4*: proc ()
    clutter_offscreen5*: proc ()
    clutter_offscreen6*: proc ()
    clutter_offscreen7*: proc ()
  ClutterPageTurnEffect* = object
    parent_instance*: ClutterDeformEffect
    period*: Gdouble
    angle*: Gdouble
    radius*: Gfloat
  ClutterPageTurnClass* = object
    parent_class*: ClutterDeformEffectClass
  ClutterPaintNode*  = object
    parent_instance*: GTypeInstance
    parent*: ptr ClutterPaintNode
    first_child*: ptr ClutterPaintNode
    prev_sibling*: ptr ClutterPaintNode
    next_sibling*: ptr ClutterPaintNode
    last_child*: ptr ClutterPaintNode
    n_children*: Guint
    operations*: ptr GArray
    name*: ptr Gchar
    ref_count*: cint
  ClutterPaintNodeClass*  = object
    base_class*: GTypeClass
    finalize*: proc (node: ptr ClutterPaintNode)
    pre_draw*: proc (node: ptr ClutterPaintNode): Gboolean
    draw*: proc (node: ptr ClutterPaintNode)
    post_draw*: proc (node: ptr ClutterPaintNode)
    serialize*: proc (node: ptr ClutterPaintNode): JsonNode
    get_framebuffer*: proc (node: ptr ClutterPaintNode): CoglFramebuffer
  INNER_C_UNION_PAINT*  = object {.union.}
    texrect*: array[8, cfloat]
    path*: CoglPath
    primitive*: CoglPrimitive
  ClutterPaintOperation*  = object
    opcode*: PaintOpCode
    op*: INNER_C_UNION_PAINT
  ClutterPaintVolume*  = object
    actor*: ptr ClutterActor
    vertices*: array[8, ClutterVertex]
    is_static* {.bitsize: 1.}: Guint
    is_empty* {.bitsize: 1.}: Guint
    is_complete* {.bitsize: 1.}: Guint
    is_2d* {.bitsize: 1.}: Guint
    is_axis_aligned* {.bitsize: 1.}: Guint
  ClutterPanActionPrivate* = object
  ClutterPanAction*  = object
    parent_instance*: ClutterGestureAction
    priv*: ptr ClutterPanActionPrivate
  ClutterPanActionClass*  = object
    parent_class*: ClutterGestureActionClass
    pan*: proc (action: ptr ClutterPanAction; actor: ptr ClutterActor; is_interpolated: Gboolean): Gboolean
    pan_stopped*: proc (action: ptr ClutterPanAction; actor: ptr ClutterActor)
    clutter_pan_action1*: proc ()
    clutter_pan_action2*: proc ()
    clutter_pan_action3*: proc ()
    clutter_pan_action4*: proc ()
    clutter_pan_action5*: proc ()
    clutter_pan_action6*: proc ()
  ClutterPathCallback* = proc (node: ptr ClutterPathNode; data: Gpointer)
  ClutterPathPrivate* = object
  ClutterPath*  = object
    parent*: GInitiallyUnowned
    priv*: ptr ClutterPathPrivate
  ClutterPathClass*  = object
    parent_class*: GInitiallyUnownedClass
  ClutterMasterClock* = object
    parent_instance*: GObject
    timelines*: ptr GSList
    cur_tick*: int64
    prev_tick*: int64
    source*: ptr GSource
    idle* {.bitsize: 1.}: Guint
    ensure_next_iteration* {.bitsize: 1.}: Guint
    paused* {.bitsize: 1.}: Guint
  ClutterMainContext*  = object
    backend*: ptr ClutterBackend
    stage_manager*: ptr ClutterStageManager
    master_clock*: ptr ClutterMasterClock
    events_queue*: ptr GQueue
    event_filters*: ptr GList
    pick_mode*: ClutterPickMode
    frame_rate*: Guint
    pointer_grab_actor*: ptr ClutterActor
    keyboard_grab_actor*: ptr ClutterActor
    shaders*: ptr GSList
    fb_r_mask*: Gint
    fb_g_mask*: Gint
    fb_b_mask*: Gint
    fb_r_mask_used*: Gint
    fb_g_mask_used*: Gint
    fb_b_mask_used*: Gint
    font_map*: ptr FontMap
    current_event*: ptr GSList
    repaint_funcs*: ptr GList
    last_repaint_id*: Guint
    settings*: ptr ClutterSettings
    is_initialized* {.bitsize: 1.}: Guint
    motion_events_per_actor* {.bitsize: 1.}: Guint
    defer_display_setup* {.bitsize: 1.}: Guint
    options_parsed* {.bitsize: 1.}: Guint
    show_fps* {.bitsize: 1.}: Guint
  ClutterThreadsDispatch*  = object
    `func`*: GSourceFunc
    data*: Gpointer
    notify*: GDestroyNotify
  ClutterVertex4*  = object
    x*: cfloat
    y*: cfloat
    z*: cfloat
    w*: cfloat
  ClutterPlane*  = object
    v0*: array[3, cfloat]
    n*: array[3, cfloat]
  ClutterPropertyTransitionPrivate* = object
  ClutterPropertyTransition*  = object
    parent_instance*: ClutterTransition
    priv*: ptr ClutterPropertyTransitionPrivate
  ClutterPropertyTransitionClass*  = object
    parent_class*: ClutterTransitionClass
    padding*: array[8, Gpointer]
  ClutterRotateActionPrivate* = object
  ClutterRotateAction*  = object
    parent_instance*: ClutterGestureAction
    priv*: ptr ClutterRotateActionPrivate
  ClutterRotateActionClass*  = object
    parent_class*: ClutterGestureActionClass
    rotate*: proc (action: ptr ClutterRotateAction; actor: ptr ClutterActor; angle: Gdouble): Gboolean
    clutter_rotate_action1*: proc ()
    clutter_rotate_action2*: proc ()
    clutter_rotate_action3*: proc ()
    clutter_rotate_action4*: proc ()
    clutter_rotate_action5*: proc ()
    clutter_rotate_action6*: proc ()
    clutter_rotate_action7*: proc ()
  ClutterScriptParser*  = object
    parent_instance*: JsonParser
    script*: ptr ClutterScript
  ClutterStatePrivate* = object
  ClutterState* = object
    parent*: GObject
    priv*: ClutterStatePrivate
  GTypeGetFunc* = proc (): GType
  ObjectInfo*  = object
    id*: ptr Gchar
    class_name*: ptr Gchar
    type_func*: ptr Gchar
    properties*: ptr GList
    children*: ptr GList
    signals*: ptr GList
    gtype*: GType
    `object`*: ptr GObject
    merge_id*: Guint
    is_actor* {.bitsize: 1.}: Guint
    is_stage* {.bitsize: 1.}: Guint
    is_stage_default* {.bitsize: 1.}: Guint
    has_unresolved* {.bitsize: 1.}: Guint
    is_unmerged* {.bitsize: 1.}: Guint
  PropertyInfo*  = object
    name*: ptr Gchar
    node*: JsonNode
    pspec*: ptr GParamSpec
    is_child* {.bitsize: 1.}: Guint
    is_layout* {.bitsize: 1.}: Guint
  SignalInfo*  = object
    name*: ptr Gchar
    handler*: ptr Gchar
    `object`*: ptr Gchar
    state*: ptr Gchar
    target*: ptr Gchar
    flags*: GConnectFlags
    is_handler* {.bitsize: 1.}: Guint
    warp_to* {.bitsize: 1.}: Guint
  ClutterSettings* = object
  ClutterScriptPrivate* = object
  ClutterScript*  = object
    parent_instance*: GObject
    priv*: ptr ClutterScriptPrivate
  ClutterScriptClass*  = object
    parent_class*: GObjectClass
    get_type_from_name*: proc (script: ptr ClutterScript; type_name: ptr Gchar): GType
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
    clutter_reserved8*: proc ()
  ClutterScriptConnectFunc* = proc (script: ptr ClutterScript; `object`: ptr GObject; signal_name: ptr Gchar; handler_name: ptr Gchar; connect_object: ptr GObject; flags: GConnectFlags; user_data: Gpointer)
  ClutterScriptable* = object
  ClutterScriptableIface*  = object
    g_iface*: GTypeInterface
    set_id*: proc (scriptable: ptr ClutterScriptable; id: ptr Gchar)
    get_id*: proc (scriptable: ptr ClutterScriptable): ptr Gchar
    parse_custom_node*: proc (scriptable: ptr ClutterScriptable; script: ptr ClutterScript; value: ptr GValue; name: ptr Gchar; node: JsonNode): Gboolean
    set_custom_property*: proc (scriptable: ptr ClutterScriptable; script: ptr ClutterScript; name: ptr Gchar; value: ptr GValue)
  ClutterScrollActorPrivate* = object
  ClutterScrollActor*  = object
    parent_instance*: ClutterActor
    priv*: ptr ClutterScrollActorPrivate
  ClutterScrollActorClass*  = object
    parent_instance*: ClutterActorClass
    padding*: array[8, Gpointer]
  ClutterShaderEffectPrivate* = object
  ClutterShaderEffect*  = object
    parent_instance*: ClutterOffscreenEffect
    priv*: ptr ClutterShaderEffectPrivate
  ClutterShaderEffectClass*  = object
    parent_class*: ClutterOffscreenEffectClass
    get_static_shader_source*: proc (effect: ptr ClutterShaderEffect): ptr Gchar
    clutter_shader1*: proc ()
    clutter_shader2*: proc ()
    clutter_shader3*: proc ()
    clutter_shader4*: proc ()
    clutter_shader5*: proc ()
  ClutterStageManager*  = object
    parent_instance*: GObject
    stages*: ptr GSList
  ClutterStageManagerClass*  = object
    parent_class*: GObjectClass
    stage_added*: proc (stage_manager: ptr ClutterStageManager; stage: ptr ClutterStage)
    stage_removed*: proc (stage_manager: ptr ClutterStageManager; stage: ptr ClutterStage)
  ClutterStageQueueRedrawEntry* = object
    actor*: ptr ClutterActor
    has_clip*: Gboolean
    clip*: ClutterPaintVolume
  ClutterStageWindowIface*  = object
    parent_iface*: GTypeInterface
    get_wrapper*: proc (stage_window: ptr ClutterStageWindow): ptr ClutterActor
    set_title*: proc (stage_window: ptr ClutterStageWindow; title: ptr Gchar)
    set_fullscreen*: proc (stage_window: ptr ClutterStageWindow; is_fullscreen: Gboolean)
    set_cursor_visible*: proc (stage_window: ptr ClutterStageWindow; cursor_visible: Gboolean)
    set_user_resizable*: proc (stage_window: ptr ClutterStageWindow; is_resizable: Gboolean)
    realize*: proc (stage_window: ptr ClutterStageWindow): Gboolean
    unrealize*: proc (stage_window: ptr ClutterStageWindow)
    show*: proc (stage_window: ptr ClutterStageWindow; do_raise: Gboolean)
    hide*: proc (stage_window: ptr ClutterStageWindow)
    resize*: proc (stage_window: ptr ClutterStageWindow; width: Gint; height: Gint)
    get_geometry*: proc (stage_window: ptr ClutterStageWindow; geometry: RectangleInt)
    schedule_update*: proc (stage_window: ptr ClutterStageWindow; sync_delay: cint)
    get_update_time*: proc (stage_window: ptr ClutterStageWindow): int64
    clear_update_time*: proc (stage_window: ptr ClutterStageWindow)
    add_redraw_clip*: proc (stage_window: ptr ClutterStageWindow; stage_rectangle: RectangleInt)
    has_redraw_clips*: proc (stage_window: ptr ClutterStageWindow): Gboolean
    ignoring_redraw_clips*: proc (stage_window: ptr ClutterStageWindow): Gboolean
    get_redraw_clip_bounds*: proc (stage_window: ptr ClutterStageWindow; clip: RectangleInt): Gboolean
    set_accept_focus*: proc (stage_window: ptr ClutterStageWindow; accept_focus: Gboolean)
    redraw*: proc (stage_window: ptr ClutterStageWindow)
    dirty_back_buffer*: proc (stage_window: ptr ClutterStageWindow)
    get_dirty_pixel*: proc (stage_window: ptr ClutterStageWindow; x: ptr cint; y: ptr cint)
    get_active_framebuffer*: proc (stage_window: ptr ClutterStageWindow): CoglFramebuffer
    can_clip_redraws*: proc (stage_window: ptr ClutterStageWindow): Gboolean
    set_scale_factor*: proc (stage_window: ptr ClutterStageWindow; factor: cint)
    get_scale_factor*: proc (stage_window: ptr ClutterStageWindow): cint
  ClutterStagePrivate* = object
  ClutterStage*  = object
    parent_instance*: ClutterGroup
    priv*: ptr ClutterStagePrivate
  ClutterStageClass*  = object
    parent_class*: ClutterGroupClass
    fullscreen*: proc (stage: ptr ClutterStage)
    unfullscreen*: proc (stage: ptr ClutterStage)
    activate*: proc (stage: ptr ClutterStage)
    deactivate*: proc (stage: ptr ClutterStage)
    delete_event*: proc (stage: ptr ClutterStage; event: ptr ClutterEvent): Gboolean
    padding_dummy*: array[31, Gpointer]
  ClutterPerspective*  = object
    fovy*: Gfloat
    aspect*: Gfloat
    z_near*: Gfloat
    z_far*: Gfloat
  ClutterFog*  = object
    z_near*: Gfloat
    z_far*: Gfloat
  ClutterSwipeActionPrivate* = object
  ClutterSwipeAction*  = object
    parent_instance*: ClutterGestureAction
    priv*: ptr ClutterSwipeActionPrivate
  ClutterSwipeActionClass*  = object
    parent_class*: ClutterGestureActionClass
    swept*: proc (action: ptr ClutterSwipeAction; actor: ptr ClutterActor; direction: ClutterSwipeDirection)
    swipe*: proc (action: ptr ClutterSwipeAction; actor: ptr ClutterActor; direction: ClutterSwipeDirection): Gboolean
    clutter_swipe_action1*: proc ()
    clutter_swipe_action2*: proc ()
    clutter_swipe_action3*: proc ()
    clutter_swipe_action4*: proc ()
    clutter_swipe_action5*: proc ()
    clutter_swipe_action6*: proc ()
  ClutterTapAction*  = object
    parent_instance*: ClutterGestureAction
  ClutterTapActionClass*  = object
    parent_class*: ClutterGestureActionClass
    tap*: proc (action: ptr ClutterTapAction; actor: ptr ClutterActor): Gboolean
    clutter_tap_action1*: proc ()
    clutter_tap_action2*: proc ()
    clutter_tap_action3*: proc ()
    clutter_tap_action4*: proc ()
    clutter_tap_action5*: proc ()
    clutter_tap_action6*: proc ()
  CluttertextBufferPrivate* = object
  ClutterTextBuffer*  = object
    parent_instance*: GObject
    priv*: ptr ClutterTextBufferPrivate
  ClutterTextBufferClass*  = object
    parent_class*: GObjectClass
    inserted_text*: proc (buffer: ptr ClutterTextBuffer; position: Guint; chars: ptr Gchar; n_chars: Guint)
    deleted_text*: proc (buffer: ptr ClutterTextBuffer; position: Guint; n_chars: Guint)
    get_text*: proc (buffer: ptr ClutterTextBuffer; n_bytes: ptr Gsize): ptr Gchar
    get_length*: proc (buffer: ptr ClutterTextBuffer): Guint
    insert_text*: proc (buffer: ptr ClutterTextBuffer; position: Guint; chars: ptr Gchar; n_chars: Guint): Guint
    delete_text*: proc (buffer: ptr ClutterTextBuffer; position: Guint; n_chars: Guint): Guint
    clutter_reserved*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
    clutter_reserved8*: proc ()
  ClutterTextPrivate* = object
  ClutterText*  = object
    parent_instance*: ClutterActor
    priv*: ptr ClutterTextPrivate
  ClutterTextClass*  = object
    parent_class*: ClutterActorClass
    text_changed*: proc (self: ptr ClutterText)
    activate*: proc (self: ptr ClutterText)
    cursor_event*: proc (self: ptr ClutterText; geometry: ptr ClutterGeometry)
    cursor_changed*: proc (self: ptr ClutterText)
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
  ClutterTexturePrivate* = object
  ClutterTexture*  = object
    parent*: ClutterActor
    priv*: ptr ClutterTexturePrivate
  ClutterTextureClass*  = object
    parent_class*: ClutterActorClass
    size_change*: proc (texture: ptr ClutterTexture; width: Gint; height: Gint)
    pixbuf_change*: proc (texture: ptr ClutterTexture)
    load_finished*: proc (texture: ptr ClutterTexture; error: ptr GError)
    clutter_texture1*: proc ()
    clutter_texture2*: proc ()
    clutter_texture3*: proc ()
    clutter_texture4*: proc ()
    clutter_texture5*: proc ()
  ClutterTimelineProgressFunc* = proc (timeline: ptr ClutterTimeline; elapsed: Gdouble; total: Gdouble; user_data: Gpointer): Gdouble
  ClutterTimelinePrivate* = object
  ClutterTimeline*  = object
    parent_instance*: GObject
    priv*: ptr ClutterTimelinePrivate
  ClutterTimelineClass*  = object
    parent_class*: GObjectClass
    started*: proc (timeline: ptr ClutterTimeline)
    completed*: proc (timeline: ptr ClutterTimeline)
    paused*: proc (timeline: ptr ClutterTimeline)
    new_frame*: proc (timeline: ptr ClutterTimeline; msecs: Gint)
    marker_reached*: proc (timeline: ptr ClutterTimeline; marker_name: ptr Gchar; msecs: Gint)
    stopped*: proc (timeline: ptr ClutterTimeline; is_finished: Gboolean)
    clutter_timeline_1*: proc ()
    clutter_timeline_2*: proc ()
    clutter_timeline_3*: proc ()
    clutter_timeline_4*: proc ()
  ClutterTransitionGroupPrivate* = object
  ClutterTransitionGroup*  = object
    parent_instance*: ClutterTransition
    priv*: ptr ClutterTransitionGroupPrivate
  ClutterTransitionPrivate* = object
  ClutterTransition*  = object
    parent_instance*: ClutterTimeline
    priv*: ptr ClutterTransitionPrivate
  ClutterTransitionClass*  = object
    parent_class*: ClutterTimelineClass
    attached*: proc (transition: ptr ClutterTransition; animatable: ptr ClutterAnimatable)
    detached*: proc (transition: ptr ClutterTransition; animatable: ptr ClutterAnimatable)
    compute_value*: proc (transition: ptr ClutterTransition; animatable: ptr ClutterAnimatable; interval: ptr ClutterInterval; progress: Gdouble)
    padding*: array[8, Gpointer]
  ClutterPoint*  = object
    x*: cfloat
    y*: cfloat
  ClutterMatrix* = CoglMatrix
  ClutterSize*  = object
    width*: cfloat
    height*: cfloat
  ClutterRect*  = object
    origin*: ClutterPoint
    size*: ClutterSize
  ClutterVertex*  = object
    x*: Gfloat
    y*: Gfloat
    z*: Gfloat
  ClutterActorBox*  = object
    x1*: Gfloat
    y1*: Gfloat
    x2*: Gfloat
    y2*: Gfloat
  ClutterGeometry*  = object
    x*: Gint
    y*: Gint
    width*: Guint
    height*: Guint
  ClutterKnot*  = object
    x*: Gint
    y*: Gint
  ClutterPathNode*  = object
    `type`*: ClutterPathNodeType
    points*: array[3, ClutterKnot]
  ClutterPathConstraint* = object
    parent_instance*: ClutterConstraint
    path*: ptr ClutterPath
    offset*: Gfloat
    actor*: ptr ClutterActor
    current_node*: Guint
  ClutterMargin*  = object
    left*: cfloat
    right*: cfloat
    top*: cfloat
    bottom*: cfloat
  ClutterProgressFunc* = proc (a: ptr GValue; b: ptr GValue; progress: Gdouble; retval: ptr GValue): Gboolean
  ClutterUnits*  = object
    unit_type*: ClutterUnitType
    value*: Gfloat
    pixels*: Gfloat
    pixels_set*: Guint
    serial*: int32
    padding_1*: int32
    padding_2*: int64
  ClutterParamSpecUnits*  = object
    parent_instance*: GParamSpec
    default_type*: ClutterUnitType
    default_value*: Gfloat
    minimum*: Gfloat
    maximum*: Gfloat
  ClutterZoomActionPrivate* = object
  ClutterZoomAction*  = object
    parent_instance*: ClutterGestureAction
    priv*: ptr ClutterZoomActionPrivate
  ClutterZoomActionClass*  = object
    parent_class*: ClutterGestureActionClass
    zoom*: proc (action: ptr ClutterZoomAction; actor: ptr ClutterActor; focal_point: ptr ClutterPoint; factor: Gdouble): Gboolean
    clutter_zoom_action1*: proc ()
    clutter_zoom_action2*: proc ()
    clutter_zoom_action3*: proc ()
    clutter_zoom_action4*: proc ()
    clutter_zoom_action5*: proc ()
  ClutterTraverseCallback* = proc (actor: ptr ClutterActor; depth: Gint; user_data: Gpointer): ClutterActorTraverseVisitFlags
  ClutterForeachCallback* = proc (actor: ptr ClutterActor; user_data: Gpointer): Gboolean

proc clutter_action_get_type*(): GType {.importc:"clutter_action_get_type", libclutter.}
proc clutter_actor_add_action*(self: ptr ClutterActor; action: ptr ClutterAction) {.importc:"clutter_actor_add_action", libclutter.}
proc clutter_actor_add_action_with_name*(self: ptr ClutterActor; name: ptr Gchar; action: ptr ClutterAction) {.importc:"clutter_actor_add_action_with_name", libclutter.}
proc clutter_actor_remove_action*(self: ptr ClutterActor; action: ptr ClutterAction) {.importc:"clutter_actor_remove_action", libclutter.}
proc clutter_actor_remove_action_by_name*(self: ptr ClutterActor; name: ptr Gchar) {.importc:"clutter_actor_remove_action_by_name", libclutter.}
proc clutter_actor_get_action*(self: ptr ClutterActor; name: ptr Gchar): ptr ClutterAction {.importc:"clutter_actor_get_action", libclutter.}
proc clutter_actor_get_actions*(self: ptr ClutterActor): ptr GList {.importc:"clutter_actor_get_actions", libclutter.}
proc clutter_actor_clear_actions*(self: ptr ClutterActor) {.importc:"clutter_actor_clear_actions", libclutter.}
proc clutter_actor_has_actions*(self: ptr ClutterActor): Gboolean {.importc:"clutter_actor_has_actions", libclutter.}

proc clutter_meta_group_get_type*(): GType {.importc:"_clutter_meta_group_get_type", libclutter.}
proc clutter_meta_group_add_meta*(group: ptr ClutterMetaGroup; meta: ptr ClutterActorMeta) {.importc:"_clutter_meta_group_add_meta", libclutter.}
proc clutter_meta_group_remove_meta*(group: ptr ClutterMetaGroup; meta: ptr ClutterActorMeta) {.importc:"_clutter_meta_group_remove_meta", libclutter.}
proc clutter_meta_group_peek_metas*(group: ptr ClutterMetaGroup): ptr GList {.importc:"_clutter_meta_group_peek_metas", libclutter.}
proc clutter_meta_group_clear_metas*(group: ptr ClutterMetaGroup) {.importc:"_clutter_meta_group_clear_metas", libclutter.}
proc clutter_meta_group_get_meta*(group: ptr ClutterMetaGroup; name: ptr Gchar): ptr ClutterActorMeta {.importc:"_clutter_meta_group_get_meta", libclutter.}
proc clutter_meta_group_has_metas_no_internal*(group: ptr ClutterMetaGroup): Gboolean {.importc:"_clutter_meta_group_has_metas_no_internal", libclutter.}
proc clutter_meta_group_get_metas_no_internal*(group: ptr ClutterMetaGroup): ptr GList {.importc:"_clutter_meta_group_get_metas_no_internal", libclutter.}
proc clutter_meta_group_clear_metas_no_internal*(group: ptr ClutterMetaGroup) {.importc:"_clutter_meta_group_clear_metas_no_internal", libclutter.}

proc clutter_actor_meta_set_actor*(meta: ptr ClutterActorMeta; actor: ptr ClutterActor) {.importc:"_clutter_actor_meta_set_actor", libclutter.}
proc clutter_actor_meta_get_debug_name*(meta: ptr ClutterActorMeta): ptr Gchar {.importc:"_clutter_actor_meta_get_debug_name", libclutter.}
proc clutter_actor_meta_set_priority*(meta: ptr ClutterActorMeta; priority: Gint) {.importc:"_clutter_actor_meta_set_priority", libclutter.}
proc clutter_actor_meta_get_priority*(meta: ptr ClutterActorMeta): cint {.importc:"_clutter_actor_meta_get_priority", libclutter.}
proc clutter_actor_meta_is_internal*(meta: ptr ClutterActorMeta): Gboolean {.importc:"_clutter_actor_meta_is_internal", libclutter.}

proc clutter_actor_meta_get_type*(): GType {.importc:"clutter_actor_meta_get_type", libclutter.}
proc clutter_actor_meta_set_name*(meta: ptr ClutterActorMeta; name: ptr Gchar) {.importc:"clutter_actor_meta_set_name", libclutter.}
proc clutter_actor_meta_get_name*(meta: ptr ClutterActorMeta): ptr Gchar {.importc:"clutter_actor_meta_get_name", libclutter.} 
proc clutter_actor_meta_set_enabled*(meta: ptr ClutterActorMeta; is_enabled: Gboolean) {.importc:"clutter_actor_meta_set_enabled", libclutter.}
proc clutter_actor_meta_get_enabled*(meta: ptr ClutterActorMeta): Gboolean {.importc:"clutter_actor_meta_get_enabled", libclutter.}
proc clutter_actor_meta_get_actor*(meta: ptr ClutterActorMeta): ptr ClutterActor {.importc:"clutter_actor_meta_get_actor", libclutter.}

proc clutter_actor_get_layout_info_or_defaults*(self: ptr ClutterActor): ptr ClutterLayoutInfo {.importc:"_clutter_actor_get_layout_info_or_defaults", libclutter.}
proc clutter_actor_get_layout_info*(self: ptr ClutterActor): ptr ClutterLayoutInfo {.importc:"_clutter_actor_get_layout_info", libclutter.}
proc clutter_actor_peek_layout_info*(self: ptr ClutterActor): ptr ClutterLayoutInfo {.importc:"_clutter_actor_peek_layout_info", libclutter.}

proc clutter_actor_get_animation_info_or_defaults*(self: ptr ClutterActor): ptr ClutterAnimationInfo {.importc:"_clutter_actor_get_animation_info_or_defaults", libclutter.}
proc clutter_actor_get_animation_info*(self: ptr ClutterActor): ptr ClutterAnimationInfo {.importc:"_clutter_actor_get_animation_info", libclutter.}
proc clutter_actor_create_transition*(self: ptr ClutterActor; pspec: ptr GParamSpec): ptr ClutterTransition {.varargs, importc:"_clutter_actor_create_transition", libclutter.}
proc clutter_actor_get_transition*(self: ptr ClutterActor; pspec: ptr GParamSpec): ptr ClutterTransition {.importc:"_clutter_actor_get_transition", libclutter.}
proc clutter_actor_foreach_child*(self: ptr ClutterActor; callback: ClutterForeachCallback; user_data: Gpointer): Gboolean {.importc:"_clutter_actor_foreach_child", libclutter.}
proc clutter_actor_traverse*(actor: ptr ClutterActor; flags: ClutterActorTraverseFlags; before_children_callback: ClutterTraverseCallback; after_children_callback: ClutterTraverseCallback; user_data: Gpointer) {.importc:"_clutter_actor_traverse", libclutter.}
proc clutter_actor_get_stage_internal*(actor: ptr ClutterActor): ptr ClutterActor {.importc:"_clutter_actor_get_stage_internal", libclutter.}
proc clutter_actor_apply_modelview_transform*(self: ptr ClutterActor; matrix: CoglMatrix) {.importc:"_clutter_actor_apply_modelview_transform", libclutter.}
proc clutter_actor_apply_relative_transformation_matrix*(self: ptr ClutterActor; ancestor: ptr ClutterActor; matrix: CoglMatrix) {.importc:"_clutter_actor_apply_relative_transformation_matrix", libclutter.}
proc clutter_actor_rerealize*(self: ptr ClutterActor; callback: ClutterCallback; data: Gpointer) {.importc:"_clutter_actor_rerealize", libclutter.}
proc clutter_actor_set_opacity_override*(self: ptr ClutterActor; opacity: Gint) {.importc:"_clutter_actor_set_opacity_override", libclutter.}
proc clutter_actor_get_opacity_override*(self: ptr ClutterActor): Gint {.importc:"_clutter_actor_get_opacity_override", libclutter.}
proc clutter_actor_set_in_clone_paint*(self: ptr ClutterActor; is_in_clone_paint: Gboolean) {.importc:"_clutter_actor_set_in_clone_paint", libclutter.}
proc clutter_actor_set_enable_model_view_transform*(self: ptr ClutterActor; enable: Gboolean) {.importc:"_clutter_actor_set_enable_model_view_transform", libclutter.}
proc clutter_actor_set_enable_paint_unmapped*(self: ptr ClutterActor; enable: Gboolean) {.importc:"_clutter_actor_set_enable_paint_unmapped", libclutter.} 
proc clutter_actor_set_has_pointer*(self: ptr ClutterActor; has_pointer: Gboolean) {.importc:"_clutter_actor_set_has_pointer", libclutter.}
proc clutter_actor_queue_redraw_with_clip*(self: ptr ClutterActor; flags: ClutterRedrawFlags; clip_volume: ptr ClutterPaintVolume) {.importc:"_clutter_actor_queue_redraw_with_clip", libclutter.}
proc clutter_actor_queue_redraw_full*(self: ptr ClutterActor; flags: ClutterRedrawFlags; volume: ptr ClutterPaintVolume; effect: ptr ClutterEffect) {.importc:"", libclutter.}
proc clutter_actor_get_queue_redraw_clip*(self: ptr ClutterActor): ptr ClutterPaintVolume {.importc:"_clutter_actor_queue_redraw_full", libclutter.}
proc clutter_actor_set_queue_redraw_clip*(self: ptr ClutterActor; clip_volume: ptr ClutterPaintVolume) {.importc:"_clutter_actor_set_queue_redraw_clip", libclutter.}
proc clutter_actor_finish_queue_redraw*(self: ptr ClutterActor; clip: ptr ClutterPaintVolume) {.importc:"_clutter_actor_finish_queue_redraw", libclutter.}
proc clutter_actor_set_default_paint_volume*(self: ptr ClutterActor; check_gtype: GType; volume: ptr ClutterPaintVolume): Gboolean {.importc:"_clutter_actor_set_default_paint_volume", libclutter.}
proc clutter_actor_get_debug_name*(self: ptr ClutterActor): ptr Gchar {.importc:"_clutter_actor_get_debug_name", libclutter.}
proc clutter_actor_push_clone_paint*() {.importc:"_clutter_actor_push_clone_paint", libclutter.}
proc clutter_actor_pop_clone_paint*() {.importc:"_clutter_actor_pop_clone_paint", libclutter.}
proc clutter_actor_get_pick_id*(self: ptr ClutterActor): uint32 {.importc:"_clutter_actor_get_pick_id", libclutter.}
proc clutter_actor_shader_pre_paint*(actor: ptr ClutterActor; repeat: Gboolean) {.importc:"_clutter_actor_shader_pre_paint", libclutter.}
proc clutter_actor_shader_post_paint*(actor: ptr ClutterActor) {.importc:"_clutter_actor_shader_post_paint", libclutter.}
proc clutter_actor_get_effective_x_align*(self: ptr ClutterActor): ClutterActorAlign {.importc:"_clutter_actor_get_effective_x_align", libclutter.}
proc clutter_actor_handle_event*(actor: ptr ClutterActor; event: ptr ClutterEvent) {.importc:"_clutter_actor_handle_event", libclutter.}
proc clutter_actor_attach_clone*(actor: ptr ClutterActor; clone: ptr ClutterActor) {.importc:"_clutter_actor_attach_clone", libclutter.}
proc clutter_actor_detach_clone*(actor: ptr ClutterActor; clone: ptr ClutterActor) {.importc:"_clutter_actor_detach_clone", libclutter.}
proc clutter_actor_queue_redraw_on_clones*(actor: ptr ClutterActor) {.importc:"_clutter_actor_queue_redraw_on_clones", libclutter.}
proc clutter_actor_queue_relayout_on_clones*(actor: ptr ClutterActor) {.importc:"_clutter_actor_queue_relayout_on_clones", libclutter.}
proc clutter_actor_queue_only_relayout*(actor: ptr ClutterActor) {.importc:"_clutter_actor_queue_only_relayout", libclutter.}
proc clutter_actor_get_active_framebuffer*(actor: ptr ClutterActor): CoglFramebuffer {.importc:"_clutter_actor_get_active_framebuffer", libclutter.}

proc clutter_actor_get_type*(): GType {.importc:"clutter_actor_get_type", libclutter.}
proc clutter_actor_new*(): ptr ClutterActor {.importc:"clutter_actor_new", libclutter.}
proc clutter_actor_set_flags*(self: ptr ClutterActor; flags: ClutterActorFlags) {.importc:"clutter_actor_set_flags", libclutter.}
proc clutter_actor_unset_flags*(self: ptr ClutterActor; flags: ClutterActorFlags) {.importc:"clutter_actor_unset_flags", libclutter.}
proc clutter_actor_get_flags*(self: ptr ClutterActor): ClutterActorFlags {.importc:"clutter_actor_get_flags", libclutter.}
proc clutter_actor_show*(self: ptr ClutterActor) {.importc:"clutter_actor_show", libclutter.}
proc clutter_actor_hide*(self: ptr ClutterActor) {.importc:"clutter_actor_hide", libclutter.}
proc clutter_actor_realize*(self: ptr ClutterActor) {.importc:"clutter_actor_realize", libclutter.}
proc clutter_actor_unrealize*(self: ptr ClutterActor) {.importc:"clutter_actor_unrealize", libclutter.}
proc clutter_actor_map*(self: ptr ClutterActor) {.importc:"clutter_actor_map", libclutter.}
proc clutter_actor_unmap*(self: ptr ClutterActor) {.importc:"clutter_actor_unmap", libclutter.}
proc clutter_actor_paint*(self: ptr ClutterActor) {.importc:"clutter_actor_paint", libclutter.}
proc clutter_actor_continue_paint*(self: ptr ClutterActor) {.importc:"clutter_actor_continue_paint", libclutter.}
proc clutter_actor_queue_redraw*(self: ptr ClutterActor) {.importc:"clutter_actor_queue_redraw", libclutter.}
proc clutter_actor_queue_redraw_with_clip*(self: ptr ClutterActor; clip: RectangleInt) {.importc:"clutter_actor_queue_redraw_with_clip", libclutter.}
proc clutter_actor_queue_relayout*(self: ptr ClutterActor) {.importc:"clutter_actor_queue_relayout", libclutter.}
proc clutter_actor_destroy*(self: ptr ClutterActor) {.importc:"clutter_actor_destroy", libclutter.}
proc clutter_actor_set_name*(self: ptr ClutterActor; name: ptr Gchar) {.importc:"clutter_actor_set_name", libclutter.}
proc clutter_actor_get_name*(self: ptr ClutterActor): ptr Gchar {.importc:"clutter_actor_get_name", libclutter.}
proc clutter_actor_get_accessible*(self: ptr ClutterActor): atk.Object {.importc:"clutter_actor_get_accessible", libclutter.}

proc clutter_backend_add_event_translator*(backend: ptr ClutterBackend; translator: ptr ClutterEventTranslator)  {.importc:"_clutter_backend_add_event_translator", libclutter.}
proc clutter_backend_add_options*(backend: ptr ClutterBackend; group: ptr GOptionGroup)  {.importc:"_clutter_backend_add_options", libclutter.}
proc clutter_backend_copy_event_data*(backend: ptr ClutterBackend; src: ptr ClutterEvent; dest: ptr ClutterEvent)  {.importc:"_clutter_backend_copy_event_data", libclutter.}
proc clutter_backend_create_context*(backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean  {.importc:"_clutter_backend_create_context", libclutter.}
proc clutter_backend_create_stage*(backend: ptr ClutterBackend; wrapper: ptr ClutterStage; error: ptr ptr GError): ptr ClutterStageWindow  {.importc:"_clutter_backend_create_stage", libclutter.}
proc clutter_backend_ensure_context*(backend: ptr ClutterBackend; stage: ptr ClutterStage)  {.importc:"_clutter_backend_ensure_context", libclutter.}
proc clutter_backend_ensure_context_internal*(backend: ptr ClutterBackend; stage: ptr ClutterStage)  {.importc:"_clutter_backend_ensure_context_internal", libclutter.}
proc clutter_backend_free_event_data*(backend: ptr ClutterBackend; event: ptr ClutterEvent)  {.importc:"_clutter_backend_free_event_data", libclutter.}
proc clutter_backend_get_features*(backend: ptr ClutterBackend): ClutterFeatureFlags  {.importc:"_clutter_backend_get_features", libclutter.}
proc clutter_backend_get_keymap_direction*(backend: ptr ClutterBackend): pango.Direction  {.importc:"_clutter_backend_get_keymap_direction", libclutter.}
proc clutter_backend_get_units_per_em*(backend: ptr ClutterBackend; font_desc: pango.FontDescription): Gfloat  {.importc:"_clutter_backend_get_units_per_em", libclutter.}
proc clutter_backend_get_units_serial*(backend: ptr ClutterBackend): int32  {.importc:"_clutter_backend_get_units_serial", libclutter.}
proc clutter_backend_init_events*(backend: ptr ClutterBackend)  {.importc:"_clutter_backend_init_events", libclutter.}
proc clutter_backend_post_parse*(backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean  {.importc:"_clutter_backend_post_parse", libclutter.}
proc clutter_backend_pre_parse*(backend: ptr ClutterBackend; error: ptr ptr GError): Gboolean  {.importc:"_clutter_backend_pre_parse", libclutter.}
proc clutter_backend_remove_event_translator*(backend: ptr ClutterBackend; translator: ptr ClutterEventTranslator)  {.importc:"_clutter_backend_remove_event_translator", libclutter.}
proc clutter_backend_translate_event*(backend: ptr ClutterBackend; native: Gpointer; event: ptr ClutterEvent): Gboolean  {.importc:"_clutter_backend_translate_event", libclutter.}
proc clutter_bezier_adjust*(b: ptr ClutterBezier; knot: ptr ClutterKnot; indx: Guint)  {.importc:"_clutter_bezier_adjust", libclutter.}
proc clutter_bezier_advance*(b: ptr ClutterBezier; L: Gint; knot: ptr ClutterKnot)  {.importc:"_clutter_bezier_advance", libclutter.}
proc clutter_bezier_clone_and_move*(b: ptr ClutterBezier; x: Gint; y: Gint): ptr ClutterBezier  {.importc:"_clutter_bezier_clone_and_move", libclutter.}
proc clutter_bezier_free*(b: ptr ClutterBezier)  {.importc:"_clutter_bezier_free", libclutter.}
proc clutter_bezier_get_length*(b: ptr ClutterBezier): Guint  {.importc:"_clutter_bezier_get_length", libclutter.}
proc clutter_bezier_init*(b: ptr ClutterBezier; x_0: Gint; y_0: Gint; x_1: Gint; y_1: Gint; x_2: Gint; y_2: Gint; x_3: Gint; y_3: Gint)  {.importc:"_clutter_bezier_init", libclutter.}
proc clutter_bezier_new*(): ptr ClutterBezier  {.importc:"_clutter_bezier_new", libclutter.}
proc clutter_clear_events_queue*()  {.importc:"_clutter_clear_events_queue", libclutter.}
proc clutter_clear_events_queue_for_stage*(stage: ptr ClutterStage)  {.importc:"_clutter_clear_events_queue_for_stage", libclutter.}
proc clutter_content_attached*(content: ptr ClutterContent; actor: ptr ClutterActor)  {.importc:"_clutter_content_attached", libclutter.}
proc clutter_content_detached*(content: ptr ClutterContent; actor: ptr ClutterActor)  {.importc:"_clutter_content_detached", libclutter.}
proc clutter_content_paint_content*(content: ptr ClutterContent; actor: ptr ClutterActor; node: ptr ClutterPaintNode)  {.importc:"_clutter_content_paint_content", libclutter.}
proc clutter_create_backend*(): ptr ClutterBackend  {.importc:"_clutter_create_backend", libclutter.}
proc clutter_dummy_node_get_type*(): GType  {.importc:"_clutter_dummy_node_get_type", libclutter.}
proc clutter_dummy_node_new*(actor: ptr ClutterActor): ptr ClutterPaintNode  {.importc:"_clutter_dummy_node_new", libclutter.}
proc clutter_effect_get_paint_volume*(effect: ptr ClutterEffect; volume: ptr ClutterPaintVolume): Gboolean  {.importc:"_clutter_effect_get_paint_volume", libclutter.}
proc clutter_effect_paint*(effect: ptr ClutterEffect; flags: ClutterEffectPaintFlags)  {.importc:"_clutter_effect_paint", libclutter.}
proc clutter_effect_pick*(effect: ptr ClutterEffect; flags: ClutterEffectPaintFlags)  {.importc:"_clutter_effect_pick", libclutter.}
proc clutter_effect_post_paint*(effect: ptr ClutterEffect)  {.importc:"_clutter_effect_post_paint", libclutter.}
proc clutter_effect_pre_paint*(effect: ptr ClutterEffect): Gboolean  {.importc:"_clutter_effect_pre_paint", libclutter.}
proc clutter_event_get_platform_data*(event: ptr ClutterEvent): Gpointer  {.importc:"_clutter_event_get_platform_data", libclutter.}
proc clutter_event_process_filters*(event: ptr ClutterEvent): Gboolean  {.importc:"_clutter_event_process_filters", libclutter.}
proc clutter_event_push*(event: ptr ClutterEvent; do_copy: Gboolean)  {.importc:"_clutter_event_push", libclutter.}
proc clutter_event_set_platform_data*(event: ptr ClutterEvent; data: Gpointer)  {.importc:"_clutter_event_set_platform_data", libclutter.}
proc clutter_event_set_pointer_emulated*(event: ptr ClutterEvent; is_emulated: Gboolean)  {.importc:"_clutter_event_set_pointer_emulated", libclutter.}
proc clutter_event_set_state_full*(event: ptr ClutterEvent; button_state: ClutterModifierType; base_state: ClutterModifierType; latched_state: ClutterModifierType; locked_state: ClutterModifierType; effective_state: ClutterModifierType)  {.importc:"_clutter_event_set_state_full", libclutter.}
proc clutter_model_check_type*(gtype: GType): Gboolean  {.importc:"_clutter_model_check_type", libclutter.}
proc clutter_model_iter_set_row*(iter: ptr ClutterModelIter; row: Guint)  {.importc:"_clutter_model_iter_set_row", libclutter.}
proc clutter_model_set_column_name*(model: ptr ClutterModel; column: Gint; name: ptr Gchar)  {.importc:"_clutter_model_set_column_name", libclutter.}
proc clutter_model_set_column_type*(model: ptr ClutterModel; column: Gint; gtype: GType)  {.importc:"_clutter_model_set_column_type", libclutter.}
proc clutter_model_set_n_columns*(model: ptr ClutterModel; n_columns: Gint; set_types: Gboolean; set_names: Gboolean)  {.importc:"_clutter_model_set_n_columns", libclutter.}
proc clutter_paint_node_create*(gtype: GType): Gpointer  {.importc:"_clutter_paint_node_create", libclutter.}
proc clutter_paint_node_dump_tree*(root: ptr ClutterPaintNode)  {.importc:"_clutter_paint_node_dump_tree", libclutter.}
proc clutter_paint_node_init_types*()  {.importc:"_clutter_paint_node_init_types", libclutter.}
proc clutter_paint_node_paint*(root: ptr ClutterPaintNode)  {.importc:"_clutter_paint_node_paint", libclutter.}
proc clutter_paint_operation_clip_path*(op: ptr ClutterPaintOperation)  {.importc:"_clutter_paint_operation_clip_path", libclutter.}
proc clutter_paint_operation_clip_rectangle*(op: ptr ClutterPaintOperation)  {.importc:"_clutter_paint_operation_clip_rectangle", libclutter.}
proc clutter_paint_operation_paint_path*(op: ptr ClutterPaintOperation)  {.importc:"_clutter_paint_operation_paint_path", libclutter.}
proc clutter_paint_operation_paint_primitive*(op: ptr ClutterPaintOperation)  {.importc:"_clutter_paint_operation_paint_primitive", libclutter.}
proc clutter_paint_operation_paint_rectangle*(op: ptr ClutterPaintOperation)  {.importc:"_clutter_paint_operation_paint_rectangle", libclutter.}
proc clutter_paint_volume_axis_align*(pv: ptr ClutterPaintVolume)  {.importc:"_clutter_paint_volume_axis_align", libclutter.}
proc clutter_paint_volume_complete*(pv: ptr ClutterPaintVolume)  {.importc:"_clutter_paint_volume_complete", libclutter.}
proc clutter_paint_volume_copy_static*(src_pv: ptr ClutterPaintVolume; dst_pv: ptr ClutterPaintVolume)  {.importc:"_clutter_paint_volume_copy_static", libclutter.}
proc clutter_paint_volume_cull*(pv: ptr ClutterPaintVolume; planes: ptr ClutterPlane): ClutterCullResult  {.importc:"_clutter_paint_volume_cull", libclutter.}
proc clutter_paint_volume_get_bounding_box*(pv: ptr ClutterPaintVolume; box: ptr ClutterActorBox)  {.importc:"_clutter_paint_volume_get_bounding_box", libclutter.}
proc clutter_paint_volume_get_stage_paint_box*(pv: ptr ClutterPaintVolume; stage: ptr ClutterStage; box: ptr ClutterActorBox)  {.importc:"_clutter_paint_volume_get_stage_paint_box", libclutter.}
proc clutter_paint_volume_init_static*(pv: ptr ClutterPaintVolume; actor: ptr ClutterActor)  {.importc:"_clutter_paint_volume_init_static", libclutter.}
proc clutter_paint_volume_project*(pv: ptr ClutterPaintVolume; modelview: CoglMatrix; projection: CoglMatrix; viewport: ptr cfloat)  {.importc:"_clutter_paint_volume_project", libclutter.}
proc clutter_paint_volume_set_from_volume*(pv: ptr ClutterPaintVolume; src: ptr ClutterPaintVolume)  {.importc:"_clutter_paint_volume_set_from_volume", libclutter.}
proc clutter_paint_volume_set_reference_actor*(pv: ptr ClutterPaintVolume; actor: ptr ClutterActor)  {.importc:"_clutter_paint_volume_set_reference_actor", libclutter.}
proc clutter_paint_volume_transform*(pv: ptr ClutterPaintVolume; matrix: CoglMatrix)  {.importc:"_clutter_paint_volume_transform", libclutter.}
proc clutter_paint_volume_transform_relative*(pv: ptr ClutterPaintVolume; relative_to_ancestor: ptr ClutterActor)  {.importc:"_clutter_paint_volume_transform_relative", libclutter.}
proc clutter_process_event*(event: ptr ClutterEvent)  {.importc:"_clutter_process_event", libclutter.}
proc clutter_root_node_get_type*(): GType  {.importc:"_clutter_root_node_get_type", libclutter.}
proc clutter_root_node_new*(framebuffer: CoglFramebuffer; clear_color: ptr ClutterColor; clear_flags: CoglBufferBit): ptr ClutterPaintNode  {.importc:"_clutter_root_node_new", libclutter.}
proc clutter_script_add_object_info*(script: ptr ClutterScript; oinfo: ptr ObjectInfo)  {.importc:"_clutter_script_add_object_info", libclutter.}
proc clutter_script_apply_properties*(script: ptr ClutterScript; oinfo: ptr ObjectInfo)  {.importc:"_clutter_script_apply_properties", libclutter.}
proc clutter_script_construct_object*(script: ptr ClutterScript; oinfo: ptr ObjectInfo)  {.importc:"_clutter_script_construct_object", libclutter.}
proc clutter_script_enum_from_string*(gtype: GType; string: ptr Gchar; enum_value: ptr Gint): Gboolean  {.importc:"_clutter_script_enum_from_string", libclutter.}
proc clutter_script_flags_from_string*(gtype: GType; string: ptr Gchar; flags_value: ptr Gint): Gboolean  {.importc:"_clutter_script_flags_from_string", libclutter.}
proc clutter_script_generate_fake_id*(script: ptr ClutterScript): ptr Gchar  {.importc:"_clutter_script_generate_fake_id", libclutter.}
proc clutter_script_get_id_from_node*(node: JsonNode): ptr Gchar  {.importc:"_clutter_script_get_id_from_node", libclutter.}
proc clutter_script_get_last_merge_id*(script: ptr ClutterScript): Guint  {.importc:"_clutter_script_get_last_merge_id", libclutter.}
proc clutter_script_get_object_info*(script: ptr ClutterScript; script_id: ptr Gchar): ptr ObjectInfo  {.importc:"_clutter_script_get_object_info", libclutter.}
proc clutter_script_get_type_from_class*(name: ptr Gchar): GType  {.importc:"_clutter_script_get_type_from_class", libclutter.}
proc clutter_script_get_type_from_symbol*(symbol: ptr Gchar): GType  {.importc:"_clutter_script_get_type_from_symbol", libclutter.}
proc clutter_script_parse_alpha*(script: ptr ClutterScript; node: JsonNode): ptr GObject  {.importc:"_clutter_script_parse_alpha", libclutter.}
proc clutter_script_parse_color*(script: ptr ClutterScript; node: JsonNode; color: ptr ClutterColor): Gboolean  {.importc:"_clutter_script_parse_color", libclutter.}
proc clutter_script_parse_geometry*(script: ptr ClutterScript; node: JsonNode; geometry: ptr ClutterGeometry): Gboolean  {.importc:"_clutter_script_parse_geometry", libclutter.}
proc clutter_script_parse_knot*(script: ptr ClutterScript; node: JsonNode; knot: ptr ClutterKnot): Gboolean  {.importc:"_clutter_script_parse_knot", libclutter.}
proc clutter_script_parse_node*(script: ptr ClutterScript; value: ptr GValue; name: ptr Gchar; node: JsonNode; pspec: ptr GParamSpec): Gboolean  {.importc:"_clutter_script_parse_node", libclutter.}
proc clutter_script_parse_point*(script: ptr ClutterScript; node: JsonNode; point: ptr ClutterPoint): Gboolean  {.importc:"_clutter_script_parse_point", libclutter.}
proc clutter_script_parse_size*(script: ptr ClutterScript; node: JsonNode; size: ptr ClutterSize): Gboolean  {.importc:"_clutter_script_parse_size", libclutter.}
proc clutter_script_parse_translatable_string*(script: ptr ClutterScript; node: JsonNode; str: cstringArray): Gboolean  {.importc:"_clutter_script_parse_translatable_string", libclutter.}
proc clutter_script_parser_get_type*(): GType  {.importc:"_clutter_script_parser_get_type", libclutter.}
proc clutter_script_resolve_animation_mode*(node: JsonNode): Gulong  {.importc:"_clutter_script_resolve_animation_mode", libclutter.}
proc clutter_script_warn_invalid_value*(script: ptr ClutterScript; attribute: ptr Gchar; expected: ptr Gchar; node: JsonNode)  {.importc:"_clutter_script_warn_invalid_value", libclutter.}
proc clutter_script_warn_missing_attribute*(script: ptr ClutterScript; id: ptr Gchar; attribute: ptr Gchar)  {.importc:"_clutter_script_warn_missing_attribute", libclutter.}
proc clutter_settings_read_from_key_file*(settings: ptr ClutterSettings; key_file: ptr GKeyFile)  {.importc:"_clutter_settings_read_from_key_file", libclutter.}
proc clutter_settings_set_backend*(settings: ptr ClutterSettings; backend: ptr ClutterBackend)  {.importc:"_clutter_settings_set_backend", libclutter.}
proc clutter_stage_acquire_pick_id*(stage: ptr ClutterStage; actor: ptr ClutterActor): int32  {.importc:"_clutter_stage_acquire_pick_id", libclutter.}
proc clutter_stage_add_pointer_drag_actor*(stage: ptr ClutterStage; device: ptr ClutterInputDevice; actor: ptr ClutterActor)  {.importc:"_clutter_stage_add_pointer_drag_actor", libclutter.}
proc clutter_stage_add_touch_drag_actor*(stage: ptr ClutterStage; sequence: ptr ClutterEventSequence; actor: ptr ClutterActor)  {.importc:"_clutter_stage_add_touch_drag_actor", libclutter.}
proc clutter_stage_clear_update_time*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_clear_update_time", libclutter.}
proc clutter_stage_dirty_projection*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_dirty_projection", libclutter.}
proc clutter_stage_dirty_viewport*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_dirty_viewport", libclutter.}
proc clutter_stage_do_paint*(stage: ptr ClutterStage; clip: cairo.RectangleInt)  {.importc:"_clutter_stage_do_paint", libclutter.}
proc clutter_stage_do_pick*(stage: ptr ClutterStage; x: Gint; y: Gint; mode: ClutterPickMode): ptr ClutterActor  {.importc:"_clutter_stage_do_pick", libclutter.}
proc clutter_stage_do_update*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_do_update", libclutter.}
proc clutter_stage_get_active_framebuffer*(stage: ptr ClutterStage): CoglFramebuffer  {.importc:"_clutter_stage_get_active_framebuffer", libclutter.}
proc clutter_stage_get_actor_by_pick_id*(stage: ptr ClutterStage; pick_id: int32): ptr ClutterActor  {.importc:"_clutter_stage_get_actor_by_pick_id", libclutter.}
proc clutter_stage_get_clip*(stage: ptr ClutterStage): ptr ClutterPlane  {.importc:"_clutter_stage_get_clip", libclutter.}
proc clutter_stage_get_default_window*(): ptr ClutterStageWindow  {.importc:"_clutter_stage_get_default_window", libclutter.}
proc clutter_stage_get_pointer_drag_actor*(stage: ptr ClutterStage; device: ptr ClutterInputDevice): ptr ClutterActor  {.importc:"_clutter_stage_get_pointer_drag_actor", libclutter.}
proc clutter_stage_get_projection_matrix*(stage: ptr ClutterStage; projection: CoglMatrix)  {.importc:"_clutter_stage_get_projection_matrix", libclutter.}
proc clutter_stage_get_state*(stage: ptr ClutterStage): ClutterStageState  {.importc:"_clutter_stage_get_state", libclutter.}
proc clutter_stage_get_touch_drag_actor*(stage: ptr ClutterStage; sequence: ptr ClutterEventSequence): ptr ClutterActor  {.importc:"_clutter_stage_get_touch_drag_actor", libclutter.}
proc clutter_stage_get_update_time*(stage: ptr ClutterStage): int64  {.importc:"_clutter_stage_get_update_time", libclutter.}
proc clutter_stage_get_viewport*(stage: ptr ClutterStage; x: ptr cfloat; y: ptr cfloat; width: ptr cfloat; height: ptr cfloat)  {.importc:"_clutter_stage_get_viewport", libclutter.}
proc clutter_stage_get_window*(stage: ptr ClutterStage): ptr ClutterStageWindow  {.importc:"_clutter_stage_get_window", libclutter.}
proc clutter_stage_has_full_redraw_queued*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_has_full_redraw_queued", libclutter.}
proc clutter_stage_has_queued_events*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_has_queued_events", libclutter.}
proc clutter_stage_is_activated*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_is_activated", libclutter.}
proc clutter_stage_is_fullscreen*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_is_fullscreen", libclutter.}
proc clutter_stage_manager_add_stage*(stage_manager: ptr ClutterStageManager; stage: ptr ClutterStage)  {.importc:"_clutter_stage_manager_add_stage", libclutter.}
proc clutter_stage_manager_remove_stage*(stage_manager: ptr ClutterStageManager; stage: ptr ClutterStage)  {.importc:"_clutter_stage_manager_remove_stage", libclutter.}
proc clutter_stage_manager_set_default_stage*(stage_manager: ptr ClutterStageManager; stage: ptr ClutterStage)  {.importc:"_clutter_stage_manager_set_default_stage", libclutter.}
proc clutter_stage_maybe_relayout*(stage: ptr ClutterActor)  {.importc:"_clutter_stage_maybe_relayout", libclutter.}
proc clutter_stage_maybe_setup_viewport*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_maybe_setup_viewport", libclutter.}
proc clutter_stage_needs_update*(stage: ptr ClutterStage): Gboolean  {.importc:"_clutter_stage_needs_update", libclutter.}
proc clutter_stage_paint_volume_stack_allocate*(stage: ptr ClutterStage): ptr ClutterPaintVolume  {.importc:"_clutter_stage_paint_volume_stack_allocate", libclutter.}
proc clutter_stage_paint_volume_stack_free_all*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_paint_volume_stack_free_all", libclutter.}
proc clutter_stage_process_queued_events*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_process_queued_events", libclutter.}
proc clutter_stage_queue_actor_redraw*(stage: ptr ClutterStage; entry: ptr ClutterStageQueueRedrawEntry; actor: ptr ClutterActor; clip: ptr ClutterPaintVolume): ptr ClutterStageQueueRedrawEntry  {.importc:"_clutter_stage_queue_actor_redraw", libclutter.}
proc clutter_stage_queue_event*(stage: ptr ClutterStage; event: ptr ClutterEvent; copy_event: Gboolean)  {.importc:"_clutter_stage_queue_event", libclutter.}
proc clutter_stage_queue_redraw_entry_invalidate*(entry: ptr ClutterStageQueueRedrawEntry)  {.importc:"_clutter_stage_queue_redraw_entry_invalidate", libclutter.}
proc clutter_stage_release_pick_id*(stage: ptr ClutterStage; pick_id: int32)  {.importc:"_clutter_stage_release_pick_id", libclutter.}
proc clutter_stage_remove_pointer_drag_actor*(stage: ptr ClutterStage; device: ptr ClutterInputDevice)  {.importc:"_clutter_stage_remove_pointer_drag_actor", libclutter.}
proc clutter_stage_remove_touch_drag_actor*(stage: ptr ClutterStage; sequence: ptr ClutterEventSequence)  {.importc:"_clutter_stage_remove_touch_drag_actor", libclutter.}
proc clutter_stage_schedule_update*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_schedule_update", libclutter.}
proc clutter_stage_set_scale_factor*(stage: ptr ClutterStage; factor: cint)  {.importc:"_clutter_stage_set_scale_factor", libclutter.}
proc clutter_stage_set_viewport*(stage: ptr ClutterStage; x: cfloat; y: cfloat; width: cfloat; height: cfloat)  {.importc:"_clutter_stage_set_viewport", libclutter.}
proc clutter_stage_set_window*(stage: ptr ClutterStage; stage_window: ptr ClutterStageWindow)  {.importc:"_clutter_stage_set_window", libclutter.}
proc clutter_stage_update_input_devices*(stage: ptr ClutterStage)  {.importc:"_clutter_stage_update_input_devices", libclutter.}
proc clutter_stage_update_state*(stage: ptr ClutterStage; unset_state: ClutterStageState; set_state: ClutterStageState): Gboolean  {.importc:"_clutter_stage_update_state", libclutter.}
proc clutter_transform_node_get_type*(): GType  {.importc:"_clutter_transform_node_get_type", libclutter.}
proc clutter_transform_node_new*(matrix: CoglMatrix): ptr ClutterPaintNode  {.importc:"_clutter_transform_node_new", libclutter.}
proc clutter_actor_add_child*(self: ptr ClutterActor; child: ptr ClutterActor)  {.importc:"clutter_actor_add_child", libclutter.}
proc clutter_actor_add_constraint*(self: ptr ClutterActor; constraint: ptr ClutterConstraint)  {.importc:"clutter_actor_add_constraint", libclutter.}
proc clutter_actor_add_constraint_with_name*(self: ptr ClutterActor; name: ptr Gchar; constraint: ptr ClutterConstraint)  {.importc:"clutter_actor_add_constraint_with_name", libclutter.}
proc clutter_actor_add_effect*(self: ptr ClutterActor; effect: ptr ClutterEffect)  {.importc:"clutter_actor_add_effect", libclutter.}
proc clutter_actor_add_effect_with_name*(self: ptr ClutterActor; name: ptr Gchar; effect: ptr ClutterEffect)  {.importc:"clutter_actor_add_effect_with_name", libclutter.}
proc clutter_actor_add_transition*(self: ptr ClutterActor; name: cstring; transition: ptr ClutterTransition)  {.importc:"clutter_actor_add_transition", libclutter.}
proc clutter_actor_allocate*(self: ptr ClutterActor; box: ptr ClutterActorBox; flags: ClutterAllocationFlags)  {.importc:"clutter_actor_allocate", libclutter.}
proc clutter_actor_allocate_align_fill*(self: ptr ClutterActor; box: ptr ClutterActorBox; x_align: Gdouble; y_align: Gdouble; x_fill: Gboolean; y_fill: Gboolean; flags: ClutterAllocationFlags)  {.importc:"clutter_actor_allocate_align_fill", libclutter.}
proc clutter_actor_allocate_available_size*(self: ptr ClutterActor; x: Gfloat; y: Gfloat; available_width: Gfloat; available_height: Gfloat; flags: ClutterAllocationFlags)  {.importc:"clutter_actor_allocate_available_size", libclutter.}
proc clutter_actor_allocate_preferred_size*(self: ptr ClutterActor; flags: ClutterAllocationFlags)  {.importc:"clutter_actor_allocate_preferred_size", libclutter.}
proc clutter_actor_apply_relative_transform_to_point*(self: ptr ClutterActor; ancestor: ptr ClutterActor; point: ptr ClutterVertex; vertex: ptr ClutterVertex)  {.importc:"clutter_actor_apply_relative_transform_to_point", libclutter.}
proc clutter_actor_apply_transform_to_point*(self: ptr ClutterActor; point: ptr ClutterVertex; vertex: ptr ClutterVertex)  {.importc:"clutter_actor_apply_transform_to_point", libclutter.}
proc clutter_actor_box_alloc*(): ptr ClutterActorBox  {.importc:"clutter_actor_box_alloc", libclutter.}
proc clutter_actor_box_clamp_to_pixel*(box: ptr ClutterActorBox)  {.importc:"clutter_actor_box_clamp_to_pixel", libclutter.}
proc clutter_actor_box_contains*(box: ptr ClutterActorBox; x: Gfloat; y: Gfloat): Gboolean  {.importc:"clutter_actor_box_contains", libclutter.}
proc clutter_actor_box_copy*(box: ptr ClutterActorBox): ptr ClutterActorBox  {.importc:"clutter_actor_box_copy", libclutter.}
proc clutter_actor_box_equal*(box_a: ptr ClutterActorBox; box_b: ptr ClutterActorBox): Gboolean  {.importc:"clutter_actor_box_equal", libclutter.}
proc clutter_actor_box_free*(box: ptr ClutterActorBox)  {.importc:"clutter_actor_box_free", libclutter.}
proc clutter_actor_box_from_vertices*(box: ptr ClutterActorBox; verts: ptr ClutterVertex)  {.importc:"clutter_actor_box_from_vertices", libclutter.}
proc clutter_actor_box_get_area*(box: ptr ClutterActorBox): Gfloat  {.importc:"clutter_actor_box_get_area", libclutter.}
proc clutter_actor_box_get_height*(box: ptr ClutterActorBox): Gfloat  {.importc:"clutter_actor_box_get_height", libclutter.}
proc clutter_actor_box_get_origin*(box: ptr ClutterActorBox; x: ptr Gfloat; y: ptr Gfloat)  {.importc:"clutter_actor_box_get_origin", libclutter.}
proc clutter_actor_box_get_size*(box: ptr ClutterActorBox; width: ptr Gfloat; height: ptr Gfloat)  {.importc:"clutter_actor_box_get_size", libclutter.}
proc clutter_actor_box_get_type*(): GType  {.importc:"clutter_actor_box_get_type", libclutter.}
proc clutter_actor_box_get_width*(box: ptr ClutterActorBox): Gfloat  {.importc:"clutter_actor_box_get_width", libclutter.}
proc clutter_actor_box_get_x*(box: ptr ClutterActorBox): Gfloat  {.importc:"clutter_actor_box_get_x", libclutter.}
proc clutter_actor_box_get_y*(box: ptr ClutterActorBox): Gfloat  {.importc:"clutter_actor_box_get_y", libclutter.}
proc clutter_actor_box_init*(box: ptr ClutterActorBox; x_1: Gfloat; y_1: Gfloat; x_2: Gfloat; y_2: Gfloat): ptr ClutterActorBox  {.importc:"clutter_actor_box_init", libclutter.}
proc clutter_actor_box_init_rect*(box: ptr ClutterActorBox; x: Gfloat; y: Gfloat; width: Gfloat; height: Gfloat)  {.importc:"clutter_actor_box_init_rect", libclutter.}
proc clutter_actor_box_interpolate*(initial: ptr ClutterActorBox; final: ptr ClutterActorBox; progress: Gdouble; result: ptr ClutterActorBox)  {.importc:"clutter_actor_box_interpolate", libclutter.}
proc clutter_actor_box_new*(x_1: Gfloat; y_1: Gfloat; x_2: Gfloat; y_2: Gfloat): ptr ClutterActorBox  {.importc:"clutter_actor_box_new", libclutter.}
proc clutter_actor_box_set_origin*(box: ptr ClutterActorBox; x: Gfloat; y: Gfloat)  {.importc:"clutter_actor_box_set_origin", libclutter.}
proc clutter_actor_box_set_size*(box: ptr ClutterActorBox; width: Gfloat; height: Gfloat)  {.importc:"clutter_actor_box_set_size", libclutter.}
proc clutter_actor_box_union*(a: ptr ClutterActorBox; b: ptr ClutterActorBox; result: ptr ClutterActorBox)  {.importc:"clutter_actor_box_union", libclutter.}
proc clutter_actor_clear_constraints*(self: ptr ClutterActor)  {.importc:"clutter_actor_clear_constraints", libclutter.}
proc clutter_actor_clear_effects*(self: ptr ClutterActor)  {.importc:"clutter_actor_clear_effects", libclutter.}
proc clutter_actor_contains*(self: ptr ClutterActor; descendant: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_contains", libclutter.}
proc clutter_actor_create_pango_context*(self: ptr ClutterActor): pango.Context  {.importc:"clutter_actor_create_pango_context", libclutter.}
proc clutter_actor_create_pango_layout*(self: ptr ClutterActor; text: ptr Gchar): pango.Layout {.importc:"clutter_actor_create_pango_layout", libclutter.}
proc clutter_actor_destroy_all_children*(self: ptr ClutterActor)  {.importc:"clutter_actor_destroy_all_children", libclutter.}
proc clutter_actor_event*(actor: ptr ClutterActor; event: ptr ClutterEvent; capture: Gboolean): Gboolean  {.importc:"clutter_actor_event", libclutter.}
proc clutter_actor_get_abs_allocation_vertices*(self: ptr ClutterActor; verts: ptr ClutterVertex)  {.importc:"clutter_actor_get_abs_allocation_vertices", libclutter.}
proc clutter_actor_get_allocation_box*(self: ptr ClutterActor; box: ptr ClutterActorBox)  {.importc:"clutter_actor_get_allocation_box", libclutter.}
proc clutter_actor_get_allocation_vertices*(self: ptr ClutterActor; ancestor: ptr ClutterActor; verts: ptr ClutterVertex)  {.importc:"clutter_actor_get_allocation_vertices", libclutter.}
proc clutter_actor_get_background_color*(self: ptr ClutterActor; color: ptr ClutterColor)  {.importc:"clutter_actor_get_background_color", libclutter.}
proc clutter_actor_get_child_at_index*(self: ptr ClutterActor; index: Gint): ptr ClutterActor  {.importc:"clutter_actor_get_child_at_index", libclutter.}
proc clutter_actor_get_child_transform*(self: ptr ClutterActor; transform: ptr ClutterMatrix)  {.importc:"clutter_actor_get_child_transform", libclutter.}
proc clutter_actor_get_children*(self: ptr ClutterActor): ptr GList  {.importc:"clutter_actor_get_children", libclutter.}
proc clutter_actor_get_clip*(self: ptr ClutterActor; xoff: ptr Gfloat; yoff: ptr Gfloat; width: ptr Gfloat; height: ptr Gfloat)  {.importc:"clutter_actor_get_clip", libclutter.}
proc clutter_actor_get_clip_to_allocation*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_clip_to_allocation", libclutter.}
proc clutter_actor_get_constraint*(self: ptr ClutterActor; name: ptr Gchar): ptr ClutterConstraint  {.importc:"clutter_actor_get_constraint", libclutter.}
proc clutter_actor_get_constraints*(self: ptr ClutterActor): ptr GList  {.importc:"clutter_actor_get_constraints", libclutter.}
proc clutter_actor_get_content*(self: ptr ClutterActor): ptr ClutterContent  {.importc:"clutter_actor_get_content", libclutter.}
proc clutter_actor_get_content_box*(self: ptr ClutterActor; box: ptr ClutterActorBox)  {.importc:"clutter_actor_get_content_box", libclutter.}
proc clutter_actor_get_content_gravity*(self: ptr ClutterActor): ClutterContentGravity  {.importc:"clutter_actor_get_content_gravity", libclutter.}
proc clutter_actor_get_content_repeat*(self: ptr ClutterActor): ClutterContentRepeat  {.importc:"clutter_actor_get_content_repeat", libclutter.}
proc clutter_actor_get_content_scaling_filters*(self: ptr ClutterActor; min_filter: ptr ClutterScalingFilter; mag_filter: ptr ClutterScalingFilter)  {.importc:"clutter_actor_get_content_scaling_filters", libclutter.}
proc clutter_actor_get_default_paint_volume*(self: ptr ClutterActor): ptr ClutterPaintVolume  {.importc:"clutter_actor_get_default_paint_volume", libclutter.}
proc clutter_actor_get_easing_delay*(self: ptr ClutterActor): Guint  {.importc:"clutter_actor_get_easing_delay", libclutter.}
proc clutter_actor_get_easing_duration*(self: ptr ClutterActor): Guint  {.importc:"clutter_actor_get_easing_duration", libclutter.}
proc clutter_actor_get_easing_mode*(self: ptr ClutterActor): ClutterAnimationMode  {.importc:"clutter_actor_get_easing_mode", libclutter.}
proc clutter_actor_get_effect*(self: ptr ClutterActor; name: ptr Gchar): ptr ClutterEffect  {.importc:"clutter_actor_get_effect", libclutter.}
proc clutter_actor_get_effects*(self: ptr ClutterActor): ptr GList  {.importc:"clutter_actor_get_effects", libclutter.}
proc clutter_actor_get_first_child*(self: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_first_child", libclutter.}
proc clutter_actor_get_fixed_position_set*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_fixed_position_set", libclutter.}
proc clutter_actor_get_height*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_height", libclutter.}
proc clutter_actor_get_last_child*(self: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_last_child", libclutter.}
proc clutter_actor_get_layout_manager*(self: ptr ClutterActor): ptr ClutterLayoutManager  {.importc:"clutter_actor_get_layout_manager", libclutter.}
proc clutter_actor_get_margin*(self: ptr ClutterActor; margin: ptr ClutterMargin)  {.importc:"clutter_actor_get_margin", libclutter.}
proc clutter_actor_get_margin_bottom*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_margin_bottom", libclutter.}
proc clutter_actor_get_margin_left*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_margin_left", libclutter.}
proc clutter_actor_get_margin_right*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_margin_right", libclutter.}
proc clutter_actor_get_margin_top*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_margin_top", libclutter.}
proc clutter_actor_get_n_children*(self: ptr ClutterActor): Gint  {.importc:"clutter_actor_get_n_children", libclutter.}
proc clutter_actor_get_next_sibling*(self: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_next_sibling", libclutter.}
proc clutter_actor_get_offscreen_redirect*(self: ptr ClutterActor): ClutterOffscreenRedirect  {.importc:"clutter_actor_get_offscreen_redirect", libclutter.}
proc clutter_actor_get_opacity*(self: ptr ClutterActor): uint8  {.importc:"clutter_actor_get_opacity", libclutter.}
proc clutter_actor_get_paint_box*(self: ptr ClutterActor; box: ptr ClutterActorBox): Gboolean  {.importc:"clutter_actor_get_paint_box", libclutter.}
proc clutter_actor_get_paint_opacity*(self: ptr ClutterActor): uint8  {.importc:"clutter_actor_get_paint_opacity", libclutter.}
proc clutter_actor_get_paint_visibility*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_paint_visibility", libclutter.}
proc clutter_actor_get_paint_volume*(self: ptr ClutterActor): ptr ClutterPaintVolume  {.importc:"clutter_actor_get_paint_volume", libclutter.}
proc clutter_actor_get_pango_context*(self: ptr ClutterActor): pango.Context  {.importc:"clutter_actor_get_pango_context", libclutter.}
proc clutter_actor_get_parent*(self: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_parent", libclutter.}
proc clutter_actor_get_pivot_point*(self: ptr ClutterActor; pivot_x: ptr Gfloat; pivot_y: ptr Gfloat)  {.importc:"clutter_actor_get_pivot_point", libclutter.}
proc clutter_actor_get_pivot_point_z*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_pivot_point_z", libclutter.}
proc clutter_actor_get_position*(self: ptr ClutterActor; x: ptr Gfloat; y: ptr Gfloat)  {.importc:"clutter_actor_get_position", libclutter.}
proc clutter_actor_get_preferred_height*(self: ptr ClutterActor; for_width: Gfloat; min_height_p: ptr Gfloat; natural_height_p: ptr Gfloat)  {.importc:"clutter_actor_get_preferred_height", libclutter.}
proc clutter_actor_get_preferred_size*(self: ptr ClutterActor; min_width_p: ptr Gfloat; min_height_p: ptr Gfloat; natural_width_p: ptr Gfloat; natural_height_p: ptr Gfloat)  {.importc:"clutter_actor_get_preferred_size", libclutter.}
proc clutter_actor_get_preferred_width*(self: ptr ClutterActor; for_height: Gfloat; min_width_p: ptr Gfloat; natural_width_p: ptr Gfloat)  {.importc:"clutter_actor_get_preferred_width", libclutter.}
proc clutter_actor_get_previous_sibling*(self: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_previous_sibling", libclutter.}
proc clutter_actor_get_reactive*(actor: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_reactive", libclutter.}
proc clutter_actor_get_request_mode*(self: ptr ClutterActor): ClutterRequestMode  {.importc:"clutter_actor_get_request_mode", libclutter.}
proc clutter_actor_get_rotation_angle*(self: ptr ClutterActor; axis: ClutterRotateAxis): Gdouble  {.importc:"clutter_actor_get_rotation_angle", libclutter.}
proc clutter_actor_get_scale*(self: ptr ClutterActor; scale_x: ptr Gdouble; scale_y: ptr Gdouble)  {.importc:"clutter_actor_get_scale", libclutter.}
proc clutter_actor_get_scale_z*(self: ptr ClutterActor): Gdouble  {.importc:"clutter_actor_get_scale_z", libclutter.}
proc clutter_actor_get_size*(self: ptr ClutterActor; width: ptr Gfloat; height: ptr Gfloat)  {.importc:"clutter_actor_get_size", libclutter.}
proc clutter_actor_get_stage*(actor: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_actor_get_stage", libclutter.}
proc clutter_actor_get_text_direction*(self: ptr ClutterActor): ClutterTextDirection  {.importc:"clutter_actor_get_text_direction", libclutter.}
proc clutter_actor_get_transform*(self: ptr ClutterActor; transform: ptr ClutterMatrix)  {.importc:"clutter_actor_get_transform", libclutter.}
proc clutter_actor_get_transformed_paint_volume*(self: ptr ClutterActor; relative_to_ancestor: ptr ClutterActor): ptr ClutterPaintVolume  {.importc:"clutter_actor_get_transformed_paint_volume", libclutter.}
proc clutter_actor_get_transformed_position*(self: ptr ClutterActor; x: ptr Gfloat; y: ptr Gfloat)  {.importc:"clutter_actor_get_transformed_position", libclutter.}
proc clutter_actor_get_transformed_size*(self: ptr ClutterActor; width: ptr Gfloat; height: ptr Gfloat)  {.importc:"clutter_actor_get_transformed_size", libclutter.}
proc clutter_actor_get_transition*(self: ptr ClutterActor; name: cstring): ptr ClutterTransition  {.importc:"clutter_actor_get_transition", libclutter.}
proc clutter_actor_get_translation*(self: ptr ClutterActor; translate_x: ptr Gfloat; translate_y: ptr Gfloat; translate_z: ptr Gfloat)  {.importc:"clutter_actor_get_translation", libclutter.}
proc clutter_actor_get_width*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_width", libclutter.}
proc clutter_actor_get_x*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_x", libclutter.}
proc clutter_actor_get_x_align*(self: ptr ClutterActor): ClutterActorAlign  {.importc:"clutter_actor_get_x_align", libclutter.}
proc clutter_actor_get_x_expand*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_x_expand", libclutter.}
proc clutter_actor_get_y*(self: ptr ClutterActor): Gfloat   {.importc:"clutter_actor_get_y", libclutter.}
proc clutter_actor_get_y_align*(self: ptr ClutterActor): ClutterActorAlign  {.importc:"clutter_actor_get_y_align", libclutter.}
proc clutter_actor_get_y_expand*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_get_y_expand", libclutter.}
proc clutter_actor_get_z_position*(self: ptr ClutterActor): Gfloat  {.importc:"clutter_actor_get_z_position", libclutter.}
proc clutter_actor_grab_key_focus*(self: ptr ClutterActor)  {.importc:"clutter_actor_grab_key_focus", libclutter.}
proc clutter_actor_has_allocation*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_allocation", libclutter.}
proc clutter_actor_has_clip*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_clip", libclutter.}
proc clutter_actor_has_constraints*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_constraints", libclutter.}
proc clutter_actor_has_effects*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_effects", libclutter.}
proc clutter_actor_has_key_focus*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_key_focus", libclutter.}
proc clutter_actor_has_overlaps*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_overlaps", libclutter.}
proc clutter_actor_has_pointer*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_has_pointer", libclutter.}
proc clutter_actor_insert_child_above*(self: ptr ClutterActor; child: ptr ClutterActor; sibling: ptr ClutterActor)  {.importc:"clutter_actor_insert_child_above", libclutter.}
proc clutter_actor_insert_child_at_index*(self: ptr ClutterActor; child: ptr ClutterActor; index: Gint)  {.importc:"clutter_actor_insert_child_at_index", libclutter.}
proc clutter_actor_insert_child_below*(self: ptr ClutterActor; child: ptr ClutterActor; sibling: ptr ClutterActor)  {.importc:"clutter_actor_insert_child_below", libclutter.}
proc clutter_actor_is_in_clone_paint*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_is_in_clone_paint", libclutter.}
proc clutter_actor_is_rotated*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_is_rotated", libclutter.}
proc clutter_actor_is_scaled*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_is_scaled", libclutter.}
proc clutter_actor_iter_destroy*(iter: ptr ClutterActorIter)  {.importc:"clutter_actor_iter_destroy", libclutter.}
proc clutter_actor_iter_init*(iter: ptr ClutterActorIter; root: ptr ClutterActor)  {.importc:"clutter_actor_iter_init", libclutter.}
proc clutter_actor_iter_is_valid*(iter: ptr ClutterActorIter): Gboolean  {.importc:"clutter_actor_iter_is_valid", libclutter.}
proc clutter_actor_iter_next*(iter: ptr ClutterActorIter; child: ptr ptr ClutterActor): Gboolean  {.importc:"clutter_actor_iter_next", libclutter.}
proc clutter_actor_iter_prev*(iter: ptr ClutterActorIter; child: ptr ptr ClutterActor): Gboolean  {.importc:"clutter_actor_iter_prev", libclutter.}
proc clutter_actor_iter_remove*(iter: ptr ClutterActorIter)  {.importc:"clutter_actor_iter_remove", libclutter.}
proc clutter_actor_move_by*(self: ptr ClutterActor; dx: Gfloat; dy: Gfloat)  {.importc:"clutter_actor_move_by", libclutter.}
proc clutter_actor_needs_expand*(self: ptr ClutterActor; orientation: ClutterOrientation): Gboolean  {.importc:"clutter_actor_needs_expand", libclutter.}
proc clutter_actor_remove_all_children*(self: ptr ClutterActor)  {.importc:"clutter_actor_remove_all_children", libclutter.}
proc clutter_actor_remove_all_transitions*(self: ptr ClutterActor)  {.importc:"clutter_actor_remove_all_transitions", libclutter.}
proc clutter_actor_remove_child*(self: ptr ClutterActor; child: ptr ClutterActor)  {.importc:"clutter_actor_remove_child", libclutter.}
proc clutter_actor_remove_clip*(self: ptr ClutterActor)  {.importc:"clutter_actor_remove_clip", libclutter.}
proc clutter_actor_remove_constraint*(self: ptr ClutterActor; constraint: ptr ClutterConstraint)  {.importc:"clutter_actor_remove_constraint", libclutter.}
proc clutter_actor_remove_constraint_by_name*(self: ptr ClutterActor; name: ptr Gchar)  {.importc:"clutter_actor_remove_constraint_by_name", libclutter.}
proc clutter_actor_remove_effect*(self: ptr ClutterActor; effect: ptr ClutterEffect)  {.importc:"clutter_actor_remove_effect", libclutter.}
proc clutter_actor_remove_effect_by_name*(self: ptr ClutterActor; name: ptr Gchar)  {.importc:"clutter_actor_remove_effect_by_name", libclutter.}
proc clutter_actor_remove_transition*(self: ptr ClutterActor; name: cstring)  {.importc:"clutter_actor_remove_transition", libclutter.}
proc clutter_actor_replace_child*(self: ptr ClutterActor; old_child: ptr ClutterActor; new_child: ptr ClutterActor)  {.importc:"clutter_actor_replace_child", libclutter.}
proc clutter_actor_restore_easing_state*(self: ptr ClutterActor)  {.importc:"clutter_actor_restore_easing_state", libclutter.}
proc clutter_actor_save_easing_state*(self: ptr ClutterActor)  {.importc:"clutter_actor_save_easing_state", libclutter.}
proc clutter_actor_set_allocation*(self: ptr ClutterActor; box: ptr ClutterActorBox; flags: ClutterAllocationFlags)  {.importc:"clutter_actor_set_allocation", libclutter.}
proc clutter_actor_set_background_color*(self: ptr ClutterActor; color: ptr ClutterColor)  {.importc:"clutter_actor_set_background_color", libclutter.}
proc clutter_actor_set_child_above_sibling*(self: ptr ClutterActor; child: ptr ClutterActor; sibling: ptr ClutterActor)  {.importc:"clutter_actor_set_child_above_sibling", libclutter.}
proc clutter_actor_set_child_at_index*(self: ptr ClutterActor; child: ptr ClutterActor; index: Gint)  {.importc:"clutter_actor_set_child_at_index", libclutter.}
proc clutter_actor_set_child_below_sibling*(self: ptr ClutterActor; child: ptr ClutterActor; sibling: ptr ClutterActor)  {.importc:"clutter_actor_set_child_below_sibling", libclutter.}
proc clutter_actor_set_child_transform*(self: ptr ClutterActor; transform: ptr ClutterMatrix)  {.importc:"clutter_actor_set_child_transform", libclutter.}
proc clutter_actor_set_clip*(self: ptr ClutterActor; xoff: Gfloat; yoff: Gfloat; width: Gfloat; height: Gfloat)  {.importc:"clutter_actor_set_clip", libclutter.}
proc clutter_actor_set_clip_to_allocation*(self: ptr ClutterActor; clip_set: Gboolean)  {.importc:"clutter_actor_set_clip_to_allocation", libclutter.}
proc clutter_actor_set_content*(self: ptr ClutterActor; content: ptr ClutterContent)  {.importc:"clutter_actor_set_content", libclutter.}
proc clutter_actor_set_content_gravity*(self: ptr ClutterActor; gravity: ClutterContentGravity)  {.importc:"clutter_actor_set_content_gravity", libclutter.}
proc clutter_actor_set_content_repeat*(self: ptr ClutterActor; repeat: ClutterContentRepeat)  {.importc:"clutter_actor_set_content_repeat", libclutter.}
proc clutter_actor_set_content_scaling_filters*(self: ptr ClutterActor; min_filter: ClutterScalingFilter; mag_filter: ClutterScalingFilter)  {.importc:"clutter_actor_set_content_scaling_filters", libclutter.}
proc clutter_actor_set_easing_delay*(self: ptr ClutterActor; msecs: Guint)  {.importc:"clutter_actor_set_easing_delay", libclutter.}
proc clutter_actor_set_easing_duration*(self: ptr ClutterActor; msecs: Guint)  {.importc:"clutter_actor_set_easing_duration", libclutter.}
proc clutter_actor_set_easing_mode*(self: ptr ClutterActor; mode: ClutterAnimationMode)  {.importc:"clutter_actor_set_easing_mode", libclutter.}
proc clutter_actor_set_fixed_position_set*(self: ptr ClutterActor; is_set: Gboolean)  {.importc:"clutter_actor_set_fixed_position_set", libclutter.}
proc clutter_actor_set_height*(self: ptr ClutterActor; height: Gfloat)  {.importc:"clutter_actor_set_height", libclutter.}
proc clutter_actor_set_layout_manager*(self: ptr ClutterActor; manager: ptr ClutterLayoutManager)  {.importc:"clutter_actor_set_layout_manager", libclutter.}
proc clutter_actor_set_margin*(self: ptr ClutterActor; margin: ptr ClutterMargin)  {.importc:"clutter_actor_set_margin", libclutter.}
proc clutter_actor_set_margin_bottom*(self: ptr ClutterActor; margin: Gfloat)  {.importc:"clutter_actor_set_margin_bottom", libclutter.}
proc clutter_actor_set_margin_left*(self: ptr ClutterActor; margin: Gfloat)  {.importc:"clutter_actor_set_margin_left", libclutter.}
proc clutter_actor_set_margin_right*(self: ptr ClutterActor; margin: Gfloat)  {.importc:"clutter_actor_set_margin_right", libclutter.}
proc clutter_actor_set_margin_top*(self: ptr ClutterActor; margin: Gfloat)  {.importc:"clutter_actor_set_margin_top", libclutter.}
proc clutter_actor_set_offscreen_redirect*(self: ptr ClutterActor; redirect: ClutterOffscreenRedirect)  {.importc:"clutter_actor_set_offscreen_redirect", libclutter.}
proc clutter_actor_set_opacity*(self: ptr ClutterActor; opacity: uint8)  {.importc:"clutter_actor_set_opacity", libclutter.}
proc clutter_actor_set_pivot_point*(self: ptr ClutterActor; pivot_x: Gfloat; pivot_y: Gfloat)  {.importc:"clutter_actor_set_pivot_point", libclutter.}
proc clutter_actor_set_pivot_point_z*(self: ptr ClutterActor; pivot_z: Gfloat)  {.importc:"clutter_actor_set_pivot_point_z", libclutter.}
proc clutter_actor_set_position*(self: ptr ClutterActor; x: Gfloat; y: Gfloat)  {.importc:"clutter_actor_set_position", libclutter.}
proc clutter_actor_set_reactive*(actor: ptr ClutterActor; reactive: Gboolean)  {.importc:"clutter_actor_set_reactive", libclutter.}
proc clutter_actor_set_request_mode*(self: ptr ClutterActor; mode: ClutterRequestMode)  {.importc:"clutter_actor_set_request_mode", libclutter.}
proc clutter_actor_set_rotation_angle*(self: ptr ClutterActor; axis: ClutterRotateAxis; angle: Gdouble)  {.importc:"clutter_actor_set_rotation_angle", libclutter.}
proc clutter_actor_set_scale*(self: ptr ClutterActor; scale_x: Gdouble; scale_y: Gdouble)  {.importc:"clutter_actor_set_scale", libclutter.}
proc clutter_actor_set_scale_z*(self: ptr ClutterActor; scale_z: Gdouble)  {.importc:"clutter_actor_set_scale_z", libclutter.}
proc clutter_actor_set_size*(self: ptr ClutterActor; width: Gfloat; height: Gfloat)  {.importc:"clutter_actor_set_size", libclutter.}
proc clutter_actor_set_text_direction*(self: ptr ClutterActor; text_dir: ClutterTextDirection)  {.importc:"clutter_actor_set_text_direction", libclutter.}
proc clutter_actor_set_transform*(self: ptr ClutterActor; transform: ptr ClutterMatrix)  {.importc:"clutter_actor_set_transform", libclutter.}
proc clutter_actor_set_translation*(self: ptr ClutterActor; translate_x: Gfloat; translate_y: Gfloat; translate_z: Gfloat)  {.importc:"clutter_actor_set_translation", libclutter.}
proc clutter_actor_set_width*(self: ptr ClutterActor; width: Gfloat)  {.importc:"clutter_actor_set_width", libclutter.}
proc clutter_actor_set_x*(self: ptr ClutterActor; x: Gfloat)  {.importc:"clutter_actor_set_x", libclutter.}
proc clutter_actor_set_x_align*(self: ptr ClutterActor; x_align: ClutterActorAlign)  {.importc:"clutter_actor_set_x_align", libclutter.}
proc clutter_actor_set_x_expand*(self: ptr ClutterActor; expand: Gboolean)  {.importc:"clutter_actor_set_x_expand", libclutter.}
proc clutter_actor_set_y*(self: ptr ClutterActor; y: Gfloat)  {.importc:"clutter_actor_set_y", libclutter.}
proc clutter_actor_set_y_align*(self: ptr ClutterActor; y_align: ClutterActorAlign)  {.importc:"clutter_actor_set_y_align", libclutter.}
proc clutter_actor_set_y_expand*(self: ptr ClutterActor; expand: Gboolean)  {.importc:"clutter_actor_set_y_expand", libclutter.}
proc clutter_actor_set_z_position*(self: ptr ClutterActor; z_position: Gfloat)  {.importc:"clutter_actor_set_z_position", libclutter.}
proc clutter_actor_should_pick_paint*(self: ptr ClutterActor): Gboolean  {.importc:"clutter_actor_should_pick_paint", libclutter.}
proc clutter_actor_transform_stage_point*(self: ptr ClutterActor; x: Gfloat; y: Gfloat; x_out: ptr Gfloat; y_out: ptr Gfloat): Gboolean  {.importc:"clutter_actor_transform_stage_point", libclutter.}
proc clutter_align_constraint_get_align_axis*(align: ptr ClutterAlignConstraint): ClutterAlignAxis  {.importc:"clutter_align_constraint_get_align_axis", libclutter.}
proc clutter_align_constraint_get_factor*(align: ptr ClutterAlignConstraint): Gfloat  {.importc:"clutter_align_constraint_get_factor", libclutter.}
proc clutter_align_constraint_get_source*(align: ptr ClutterAlignConstraint): ptr ClutterActor  {.importc:"clutter_align_constraint_get_source", libclutter.}
proc clutter_align_constraint_get_type*(): GType  {.importc:"clutter_align_constraint_get_type", libclutter.}
proc clutter_align_constraint_new*(source: ptr ClutterActor; axis: ClutterAlignAxis; factor: Gfloat): ptr ClutterConstraint  {.importc:"clutter_align_constraint_new", libclutter.}
proc clutter_align_constraint_set_align_axis*(align: ptr ClutterAlignConstraint; axis: ClutterAlignAxis)  {.importc:"clutter_align_constraint_set_align_axis", libclutter.}
proc clutter_align_constraint_set_factor*(align: ptr ClutterAlignConstraint; factor: Gfloat)  {.importc:"clutter_align_constraint_set_factor", libclutter.}
proc clutter_align_constraint_set_source*(align: ptr ClutterAlignConstraint; source: ptr ClutterActor)  {.importc:"clutter_align_constraint_set_source", libclutter.}
proc clutter_animatable_find_property*(animatable: ptr ClutterAnimatable; property_name: ptr Gchar): ptr GParamSpec  {.importc:"clutter_animatable_find_property", libclutter.}
proc clutter_animatable_get_initial_state*(animatable: ptr ClutterAnimatable; property_name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_animatable_get_initial_state", libclutter.}
proc clutter_animatable_get_type*(): GType  {.importc:"clutter_animatable_get_type", libclutter.}
proc clutter_animatable_interpolate_value*(animatable: ptr ClutterAnimatable; property_name: ptr Gchar; interval: ptr ClutterInterval; progress: Gdouble; value: ptr GValue): Gboolean  {.importc:"clutter_animatable_interpolate_value", libclutter.}
proc clutter_animatable_set_final_state*(animatable: ptr ClutterAnimatable; property_name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_animatable_set_final_state", libclutter.}
proc clutter_backend_get_font_options*(backend: ptr ClutterBackend): FontOptions  {.importc:"clutter_backend_get_font_options", libclutter.}
proc clutter_backend_get_resolution*(backend: ptr ClutterBackend): Gdouble  {.importc:"clutter_backend_get_resolution", libclutter.}
proc clutter_backend_get_type*(): GType  {.importc:"clutter_backend_get_type", libclutter.}
proc clutter_backend_set_font_options*(backend: ptr ClutterBackend; options: FontOptions)  {.importc:"clutter_backend_set_font_options", libclutter.}
proc clutter_base_init*()  {.importc:"clutter_base_init", libclutter.}
proc clutter_bin_layout_get_type*(): GType  {.importc:"clutter_bin_layout_get_type", libclutter.}
proc clutter_bin_layout_new*(x_align: ClutterBinAlignment; y_align: ClutterBinAlignment): ptr ClutterLayoutManager  {.importc:"clutter_bin_layout_new", libclutter.}
proc clutter_bind_constraint_get_coordinate*(constraint: ptr ClutterBindConstraint): ClutterBindCoordinate  {.importc:"clutter_bind_constraint_get_coordinate", libclutter.}
proc clutter_bind_constraint_get_offset*(constraint: ptr ClutterBindConstraint): Gfloat  {.importc:"clutter_bind_constraint_get_offset", libclutter.}
proc clutter_bind_constraint_get_source*(constraint: ptr ClutterBindConstraint): ptr ClutterActor  {.importc:"clutter_bind_constraint_get_source", libclutter.}
proc clutter_bind_constraint_get_type*(): GType  {.importc:"clutter_bind_constraint_get_type", libclutter.}
proc clutter_bind_constraint_new*(source: ptr ClutterActor; coordinate: ClutterBindCoordinate; offset: Gfloat): ptr ClutterConstraint  {.importc:"clutter_bind_constraint_new", libclutter.}
proc clutter_bind_constraint_set_coordinate*(constraint: ptr ClutterBindConstraint; coordinate: ClutterBindCoordinate)  {.importc:"clutter_bind_constraint_set_coordinate", libclutter.}
proc clutter_bind_constraint_set_offset*(constraint: ptr ClutterBindConstraint; offset: Gfloat)  {.importc:"clutter_bind_constraint_set_offset", libclutter.}
proc clutter_bind_constraint_set_source*(constraint: ptr ClutterBindConstraint; source: ptr ClutterActor)  {.importc:"clutter_bind_constraint_set_source", libclutter.}
proc clutter_binding_pool_activate*(pool: ptr ClutterBindingPool; key_val: Guint; modifiers: ClutterModifierType; gobject: ptr GObject): Gboolean  {.importc:"clutter_binding_pool_activate", libclutter.}
proc clutter_binding_pool_block_action*(pool: ptr ClutterBindingPool; action_name: ptr Gchar)  {.importc:"clutter_binding_pool_block_action", libclutter.}
proc clutter_binding_pool_find*(name: ptr Gchar): ptr ClutterBindingPool  {.importc:"clutter_binding_pool_find", libclutter.}
proc clutter_binding_pool_find_action*(pool: ptr ClutterBindingPool; key_val: Guint; modifiers: ClutterModifierType): ptr Gchar  {.importc:"clutter_binding_pool_find_action", libclutter.}
proc clutter_binding_pool_get_for_class*(klass: Gpointer): ptr ClutterBindingPool  {.importc:"clutter_binding_pool_get_for_class", libclutter.}
proc clutter_binding_pool_get_type*(): GType  {.importc:"clutter_binding_pool_get_type", libclutter.}
proc clutter_binding_pool_install_action*(pool: ptr ClutterBindingPool; action_name: ptr Gchar; key_val: Guint; modifiers: ClutterModifierType; callback: GCallback; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_binding_pool_install_action", libclutter.}
proc clutter_binding_pool_install_closure*(pool: ptr ClutterBindingPool; action_name: ptr Gchar; key_val: Guint; modifiers: ClutterModifierType; closure: ptr GClosure)  {.importc:"clutter_binding_pool_install_closure", libclutter.}
proc clutter_binding_pool_new*(name: ptr Gchar): ptr ClutterBindingPool  {.importc:"clutter_binding_pool_new", libclutter.}
proc clutter_binding_pool_override_action*(pool: ptr ClutterBindingPool; key_val: Guint; modifiers: ClutterModifierType; callback: GCallback; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_binding_pool_override_action", libclutter.}
proc clutter_binding_pool_override_closure*(pool: ptr ClutterBindingPool; key_val: Guint; modifiers: ClutterModifierType; closure: ptr GClosure)  {.importc:"clutter_binding_pool_override_closure", libclutter.}
proc clutter_binding_pool_remove_action*(pool: ptr ClutterBindingPool; key_val: Guint; modifiers: ClutterModifierType)  {.importc:"clutter_binding_pool_remove_action", libclutter.}
proc clutter_binding_pool_unblock_action*(pool: ptr ClutterBindingPool; action_name: ptr Gchar)  {.importc:"clutter_binding_pool_unblock_action", libclutter.}
proc clutter_blur_effect_get_type*(): GType  {.importc:"clutter_blur_effect_get_type", libclutter.}
proc clutter_blur_effect_new*(): ptr ClutterEffect  {.importc:"clutter_blur_effect_new", libclutter.}
proc clutter_boolean_continue_accumulator*(ihint: ptr GSignalInvocationHint; return_accu: ptr GValue; handler_return: ptr GValue; dummy: Gpointer): Gboolean  {.importc:"clutter_boolean_continue_accumulator", libclutter.}
proc clutter_boolean_handled_accumulator*(ihint: ptr GSignalInvocationHint; return_accu: ptr GValue; handler_return: ptr GValue; dummy: Gpointer): Gboolean  {.importc:"clutter_boolean_handled_accumulator", libclutter.}
proc clutter_box_layout_get_alignment*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; x_align: ptr ClutterBoxAlignment; y_align: ptr ClutterBoxAlignment)  {.importc:"clutter_box_layout_get_alignment", libclutter.}
proc clutter_box_layout_get_easing_duration*(layout: ptr ClutterBoxLayout): Guint  {.importc:"clutter_box_layout_get_easing_duration", libclutter.}
proc clutter_box_layout_get_easing_mode*(layout: ptr ClutterBoxLayout): Gulong  {.importc:"clutter_box_layout_get_easing_mode", libclutter.}
proc clutter_box_layout_get_expand*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor): Gboolean  {.importc:"clutter_box_layout_get_expand", libclutter.}
proc clutter_box_layout_get_fill*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; x_fill: ptr Gboolean; y_fill: ptr Gboolean)  {.importc:"clutter_box_layout_get_fill", libclutter.}
proc clutter_box_layout_get_homogeneous*(layout: ptr ClutterBoxLayout): Gboolean  {.importc:"clutter_box_layout_get_homogeneous", libclutter.}
proc clutter_box_layout_get_orientation*(layout: ptr ClutterBoxLayout): ClutterOrientation  {.importc:"clutter_box_layout_get_orientation", libclutter.}
proc clutter_box_layout_get_pack_start*(layout: ptr ClutterBoxLayout): Gboolean  {.importc:"clutter_box_layout_get_pack_start", libclutter.}
proc clutter_box_layout_get_spacing*(layout: ptr ClutterBoxLayout): Guint  {.importc:"clutter_box_layout_get_spacing", libclutter.}
proc clutter_box_layout_get_type*(): GType  {.importc:"clutter_box_layout_get_type", libclutter.}
proc clutter_box_layout_get_use_animations*(layout: ptr ClutterBoxLayout): Gboolean  {.importc:"clutter_box_layout_get_use_animations", libclutter.}
proc clutter_box_layout_get_vertical*(layout: ptr ClutterBoxLayout): Gboolean  {.importc:"clutter_box_layout_get_vertical", libclutter.}
proc clutter_box_layout_new*(): ptr ClutterLayoutManager  {.importc:"clutter_box_layout_new", libclutter.}
proc clutter_box_layout_pack*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; expand: Gboolean; x_fill: Gboolean; y_fill: Gboolean; x_align: ClutterBoxAlignment; y_align: ClutterBoxAlignment)  {.importc:"clutter_box_layout_pack", libclutter.}
proc clutter_box_layout_set_alignment*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; x_align: ClutterBoxAlignment; y_align: ClutterBoxAlignment)  {.importc:"clutter_box_layout_set_alignment", libclutter.}
proc clutter_box_layout_set_easing_duration*(layout: ptr ClutterBoxLayout; msecs: Guint)  {.importc:"clutter_box_layout_set_easing_duration", libclutter.}
proc clutter_box_layout_set_easing_mode*(layout: ptr ClutterBoxLayout; mode: Gulong)  {.importc:"clutter_box_layout_set_easing_mode", libclutter.}
proc clutter_box_layout_set_expand*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; expand: Gboolean)  {.importc:"clutter_box_layout_set_expand", libclutter.}
proc clutter_box_layout_set_fill*(layout: ptr ClutterBoxLayout; actor: ptr ClutterActor; x_fill: Gboolean; y_fill: Gboolean)  {.importc:"clutter_box_layout_set_fill", libclutter.}
proc clutter_box_layout_set_homogeneous*(layout: ptr ClutterBoxLayout; homogeneous: Gboolean)  {.importc:"clutter_box_layout_set_homogeneous", libclutter.}
proc clutter_box_layout_set_orientation*(layout: ptr ClutterBoxLayout; orientation: ClutterOrientation)  {.importc:"clutter_box_layout_set_orientation", libclutter.}
proc clutter_box_layout_set_pack_start*(layout: ptr ClutterBoxLayout; pack_start: Gboolean)  {.importc:"clutter_box_layout_set_pack_start", libclutter.}
proc clutter_box_layout_set_spacing*(layout: ptr ClutterBoxLayout; spacing: Guint)  {.importc:"clutter_box_layout_set_spacing", libclutter.}
proc clutter_box_layout_set_use_animations*(layout: ptr ClutterBoxLayout; animate: Gboolean)  {.importc:"clutter_box_layout_set_use_animations", libclutter.}
proc clutter_box_layout_set_vertical*(layout: ptr ClutterBoxLayout; vertical: Gboolean)  {.importc:"clutter_box_layout_set_vertical", libclutter.}
proc clutter_brightness_contrast_effect_get_brightness*(effect: ptr ClutterBrightnessContrastEffect; red: ptr cfloat; green: ptr cfloat; blue: ptr cfloat)  {.importc:"clutter_brightness_contrast_effect_get_brightness", libclutter.}
proc clutter_brightness_contrast_effect_get_contrast*(effect: ptr ClutterBrightnessContrastEffect; red: ptr cfloat; green: ptr cfloat; blue: ptr cfloat)  {.importc:"clutter_brightness_contrast_effect_get_contrast", libclutter.}
proc clutter_brightness_contrast_effect_get_type*(): GType  {.importc:"clutter_brightness_contrast_effect_get_type", libclutter.}
proc clutter_brightness_contrast_effect_new*(): ptr ClutterEffect  {.importc:"clutter_brightness_contrast_effect_new", libclutter.}
proc clutter_brightness_contrast_effect_set_brightness*(effect: ptr ClutterBrightnessContrastEffect; brightness: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_brightness", libclutter.}
proc clutter_brightness_contrast_effect_set_brightness_full*(effect: ptr ClutterBrightnessContrastEffect; red: cfloat; green: cfloat; blue: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_brightness_full", libclutter.}
proc clutter_brightness_contrast_effect_set_contrast*(effect: ptr ClutterBrightnessContrastEffect; contrast: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_contrast", libclutter.}
proc clutter_brightness_contrast_effect_set_contrast_full*(effect: ptr ClutterBrightnessContrastEffect; red: cfloat; green: cfloat; blue: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_contrast_full", libclutter.}
proc clutter_cairo_clear*(cr: cairo.Context)  {.importc:"clutter_cairo_clear", libclutter.}
proc clutter_cairo_set_source_color*(cr: cairo.Context; color: ptr ClutterColor)  {.importc:"clutter_cairo_set_source_color", libclutter.}
proc clutter_canvas_get_scale_factor*(canvas: ptr ClutterCanvas): cint  {.importc:"clutter_canvas_get_scale_factor", libclutter.}
proc clutter_canvas_get_type*(): GType  {.importc:"clutter_canvas_get_type", libclutter.}
proc clutter_canvas_new*(): ptr ClutterContent  {.importc:"clutter_canvas_new", libclutter.}
proc clutter_canvas_set_scale_factor*(canvas: ptr ClutterCanvas; scale: cint)  {.importc:"clutter_canvas_set_scale_factor", libclutter.}
proc clutter_canvas_set_size*(canvas: ptr ClutterCanvas; width: cint; height: cint): Gboolean  {.importc:"clutter_canvas_set_size", libclutter.}
proc clutter_check_version*(major: Guint; minor: Guint; micro: Guint): Gboolean  {.importc:"clutter_check_version", libclutter.}
proc clutter_check_windowing_backend*(backend_type: cstring): Gboolean  {.importc:"clutter_check_windowing_backend", libclutter.}
proc clutter_child_meta_get_actor*(data: ptr ClutterChildMeta): ptr ClutterActor  {.importc:"clutter_child_meta_get_actor", libclutter.}
proc clutter_child_meta_get_container*(data: ptr ClutterChildMeta): ptr ClutterContainer  {.importc:"clutter_child_meta_get_container", libclutter.}
proc clutter_child_meta_get_type*(): GType  {.importc:"clutter_child_meta_get_type", libclutter.}
proc clutter_click_action_get_button*(action: ptr ClutterClickAction): Guint  {.importc:"clutter_click_action_get_button", libclutter.}
proc clutter_click_action_get_coords*(action: ptr ClutterClickAction; press_x: ptr Gfloat; press_y: ptr Gfloat)  {.importc:"clutter_click_action_get_coords", libclutter.}
proc clutter_click_action_get_state*(action: ptr ClutterClickAction): ClutterModifierType  {.importc:"clutter_click_action_get_state", libclutter.}
proc clutter_click_action_get_type*(): GType  {.importc:"clutter_click_action_get_type", libclutter.}
proc clutter_click_action_new*(): ptr ClutterAction  {.importc:"clutter_click_action_new", libclutter.}
proc clutter_click_action_release*(action: ptr ClutterClickAction)  {.importc:"clutter_click_action_release", libclutter.}
proc clutter_clip_node_get_type*(): GType  {.importc:"clutter_clip_node_get_type", libclutter.}
proc clutter_clip_node_new*(): ptr ClutterPaintNode  {.importc:"clutter_clip_node_new", libclutter.}
proc clutter_clone_get_source*(self: ptr ClutterClone): ptr ClutterActor  {.importc:"clutter_clone_get_source", libclutter.}
proc clutter_clone_get_type*(): GType  {.importc:"clutter_clone_get_type", libclutter.}
proc clutter_clone_new*(source: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_clone_new", libclutter.}
proc clutter_clone_set_source*(self: ptr ClutterClone; source: ptr ClutterActor)  {.importc:"clutter_clone_set_source", libclutter.}
proc clutter_color_add*(a: ptr ClutterColor; b: ptr ClutterColor; result: ptr ClutterColor)  {.importc:"clutter_color_add", libclutter.}
proc clutter_color_alloc*(): ptr ClutterColor  {.importc:"clutter_color_alloc", libclutter.}
proc clutter_color_copy*(color: ptr ClutterColor): ptr ClutterColor  {.importc:"clutter_color_copy", libclutter.}
proc clutter_color_darken*(color: ptr ClutterColor; result: ptr ClutterColor)  {.importc:"clutter_color_darken", libclutter.}
proc clutter_color_equal*(v1: Gconstpointer; v2: Gconstpointer): Gboolean  {.importc:"clutter_color_equal", libclutter.}
proc clutter_color_free*(color: ptr ClutterColor)  {.importc:"clutter_color_free", libclutter.}
proc clutter_color_from_hls*(color: ptr ClutterColor; hue: Gfloat; luminance: Gfloat; saturation: Gfloat)  {.importc:"clutter_color_from_hls", libclutter.}
proc clutter_color_from_pixel*(color: ptr ClutterColor; pixel: uint32)  {.importc:"clutter_color_from_pixel", libclutter.}
proc clutter_color_from_string*(color: ptr ClutterColor; str: ptr Gchar): Gboolean  {.importc:"clutter_color_from_string", libclutter.}
proc clutter_color_get_static*(color: ClutterStaticColor): ptr ClutterColor  {.importc:"clutter_color_get_static", libclutter.}
proc clutter_color_get_type*(): GType  {.importc:"clutter_color_get_type", libclutter.}
proc clutter_color_hash*(v: Gconstpointer): Guint  {.importc:"clutter_color_hash", libclutter.}
proc clutter_color_init*(color: ptr ClutterColor; red: uint8; green: uint8; blue: uint8; alpha: uint8): ptr ClutterColor  {.importc:"clutter_color_init", libclutter.}
proc clutter_color_interpolate*(initial: ptr ClutterColor; final: ptr ClutterColor; progress: Gdouble; result: ptr ClutterColor)  {.importc:"clutter_color_interpolate", libclutter.}
proc clutter_color_lighten*(color: ptr ClutterColor; result: ptr ClutterColor)  {.importc:"clutter_color_lighten", libclutter.}
proc clutter_color_new*(red: uint8; green: uint8; blue: uint8; alpha: uint8): ptr ClutterColor  {.importc:"clutter_color_new", libclutter.}
proc clutter_color_node_get_type*(): GType  {.importc:"clutter_color_node_get_type", libclutter.}
proc clutter_color_nodeew*(color: ptr ClutterColor): ptr ClutterPaintNode  {.importc:"clutter_color_nodeew", libclutter.}
proc clutter_color_shade*(color: ptr ClutterColor; factor: Gdouble; result: ptr ClutterColor)  {.importc:"clutter_color_shade", libclutter.}
proc clutter_color_subtract*(a: ptr ClutterColor; b: ptr ClutterColor; result: ptr ClutterColor)  {.importc:"clutter_color_subtract", libclutter.}
proc clutter_color_to_hls*(color: ptr ClutterColor; hue: ptr Gfloat; luminance: ptr Gfloat; saturation: ptr Gfloat)  {.importc:"clutter_color_to_hls", libclutter.}
proc clutter_color_to_pixel*(color: ptr ClutterColor): uint32  {.importc:"clutter_color_to_pixel", libclutter.}
proc clutter_color_to_string*(color: ptr ClutterColor): ptr Gchar  {.importc:"clutter_color_to_string", libclutter.}
proc clutter_colorize_effect_get_tint*(effect: ptr ClutterColorizeEffect; tint: ptr ClutterColor)  {.importc:"clutter_colorize_effect_get_tint", libclutter.}
proc clutter_colorize_effect_get_type*(): GType  {.importc:"clutter_colorize_effect_get_type", libclutter.}
proc clutter_colorize_effect_new*(tint: ptr ClutterColor): ptr ClutterEffect  {.importc:"clutter_colorize_effect_new", libclutter.}
proc clutter_colorize_effect_set_tint*(effect: ptr ClutterColorizeEffect; tint: ptr ClutterColor)  {.importc:"clutter_colorize_effect_set_tint", libclutter.}
proc clutter_constraint_get_type*(): GType  {.importc:"clutter_constraint_get_type", libclutter.}
proc clutter_constraint_update_allocation*(constraint: ptr ClutterConstraint; actor: ptr ClutterActor; allocation: ptr ClutterActorBox): Gboolean  {.importc:"clutter_constraint_update_allocation", libclutter.}
proc clutter_constraint_update_preferred_size*(constraint: ptr ClutterConstraint; actor: ptr ClutterActor; direction: ClutterOrientation; for_size: cfloat; minimum_size: ptr cfloat; natural_size: ptr cfloat)  {.importc:"clutter_constraint_update_preferred_size", libclutter.}
proc clutter_container_child_get*(container: ptr ClutterContainer; actor: ptr ClutterActor; first_prop: ptr Gchar)  {.varargs, importc:"clutter_container_child_get", libclutter.}
proc clutter_container_child_get_property*(container: ptr ClutterContainer; child: ptr ClutterActor; property: ptr Gchar; value: ptr GValue)  {.importc:"clutter_container_child_get_property", libclutter.}
proc clutter_container_child_notify*(container: ptr ClutterContainer; child: ptr ClutterActor; pspec: ptr GParamSpec)  {.importc:"clutter_container_child_notify", libclutter.}
proc clutter_container_child_set*(container: ptr ClutterContainer; actor: ptr ClutterActor; first_prop: ptr Gchar)  {.varargs, importc:"clutter_container_child_set", libclutter.}
proc clutter_container_child_set_property*(container: ptr ClutterContainer; child: ptr ClutterActor; property: ptr Gchar; value: ptr GValue)  {.importc:"clutter_container_child_set_property", libclutter.}
proc clutter_container_class_find_child_property*(klass: ptr GObjectClass; property_name: ptr Gchar): ptr GParamSpec  {.importc:"clutter_container_class_find_child_property", libclutter.}
proc clutter_container_class_list_child_properties*(klass: ptr GObjectClass; n_properties: ptr Guint): ptr ptr GParamSpec  {.importc:"clutter_container_class_list_child_properties", libclutter.}
proc clutter_container_create_child_meta*(container: ptr ClutterContainer; actor: ptr ClutterActor)  {.importc:"clutter_container_create_child_meta", libclutter.}
proc clutter_container_destroy_child_meta*(container: ptr ClutterContainer; actor: ptr ClutterActor)  {.importc:"clutter_container_destroy_child_meta", libclutter.}
proc clutter_container_find_child_by_name*(container: ptr ClutterContainer; child_name: ptr Gchar): ptr ClutterActor  {.importc:"clutter_container_find_child_by_name", libclutter.}
proc clutter_container_get_child_meta*(container: ptr ClutterContainer; actor: ptr ClutterActor): ptr ClutterChildMeta  {.importc:"clutter_container_get_child_meta", libclutter.}
proc clutter_container_get_type*(): GType  {.importc:"clutter_container_get_type", libclutter.}
proc clutter_content_get_preferred_size*(content: ptr ClutterContent; width: ptr Gfloat; height: ptr Gfloat): Gboolean  {.importc:"clutter_content_get_preferred_size", libclutter.}
proc clutter_content_get_type*(): GType  {.importc:"clutter_content_get_type", libclutter.}
proc clutter_content_invalidate*(content: ptr ClutterContent)  {.importc:"clutter_content_invalidate", libclutter.}
proc clutter_context_get_default*(): ptr ClutterMainContext  {.importc:"clutter_context_get_default", libclutter.}
proc clutter_context_get_motion_events_enabled*(): Gboolean  {.importc:"clutter_context_get_motion_events_enabled", libclutter.}
proc clutter_context_get_pick_mode*(): ClutterPickMode  {.importc:"clutter_context_get_pick_mode", libclutter.}
proc clutter_context_get_show_fps*(): Gboolean  {.importc:"clutter_context_get_show_fps", libclutter.}
proc clutter_context_is_initialized*(): Gboolean  {.importc:"clutter_context_is_initialized", libclutter.}
proc clutter_context_lock*()  {.importc:"clutter_context_lock", libclutter.}
proc clutter_context_peek_shader_stack*(): ptr ClutterActor  {.importc:"clutter_context_peek_shader_stack", libclutter.}
proc clutter_context_pop_shader_stack*(actor: ptr ClutterActor): ptr ClutterActor  {.importc:"clutter_context_pop_shader_stack", libclutter.}
proc clutter_context_push_shader_stack*(actor: ptr ClutterActor)  {.importc:"clutter_context_push_shader_stack", libclutter.}
proc clutter_context_unlock*()  {.importc:"clutter_context_unlock", libclutter.}
proc clutter_deform_effect_get_back_material*(effect: ptr ClutterDeformEffect): CoglHandle  {.importc:"clutter_deform_effect_get_back_material", libclutter.}
proc clutter_deform_effect_get_n_tiles*(effect: ptr ClutterDeformEffect; x_tiles: ptr Guint; y_tiles: ptr Guint)  {.importc:"clutter_deform_effect_get_n_tiles", libclutter.}
proc clutter_deform_effect_get_type*(): GType  {.importc:"clutter_deform_effect_get_type", libclutter.}
proc clutter_deform_effect_invalidate*(effect: ptr ClutterDeformEffect)  {.importc:"clutter_deform_effect_invalidate", libclutter.}
proc clutter_deform_effect_set_back_material*(effect: ptr ClutterDeformEffect; material: CoglHandle)  {.importc:"clutter_deform_effect_set_back_material", libclutter.}
proc clutter_deform_effect_set_n_tiles*(effect: ptr ClutterDeformEffect; x_tiles: Guint; y_tiles: Guint)  {.importc:"clutter_deform_effect_set_n_tiles", libclutter.}
proc clutter_desaturate_effect_get_factor*(effect: ptr ClutterDesaturateEffect): Gdouble  {.importc:"clutter_desaturate_effect_get_factor", libclutter.}
proc clutter_desaturate_effect_get_type*(): GType  {.importc:"clutter_desaturate_effect_get_type", libclutter.}
proc clutter_desaturate_effect_new*(factor: Gdouble): ptr ClutterEffect  {.importc:"clutter_desaturate_effect_new", libclutter.}
proc clutter_desaturate_effect_set_factor*(effect: ptr ClutterDesaturateEffect; factor: Gdouble)  {.importc:"clutter_desaturate_effect_set_factor", libclutter.}
proc clutter_device_manager_add_device*(device_manager: ptr ClutterDeviceManager; device: ptr ClutterInputDevice)  {.importc:"clutter_device_manager_add_device", libclutter.}
proc clutter_device_manager_get_backend*(device_manager: ptr ClutterDeviceManager): ptr ClutterBackend  {.importc:"clutter_device_manager_get_backend", libclutter.}
proc clutter_device_manager_get_core_device*(device_manager: ptr ClutterDeviceManager; device_type: ClutterInputDeviceType): ptr ClutterInputDevice  {.importc:"clutter_device_manager_get_core_device", libclutter.}
proc clutter_device_manager_get_default*(): ptr ClutterDeviceManager  {.importc:"clutter_device_manager_get_default", libclutter.}
proc clutter_device_manager_get_device*(device_manager: ptr ClutterDeviceManager; device_id: Gint): ptr ClutterInputDevice  {.importc:"clutter_device_manager_get_device", libclutter.}
proc clutter_device_manager_get_type*(): GType  {.importc:"clutter_device_manager_get_type", libclutter.}
proc clutter_device_manager_list_devices*(device_manager: ptr ClutterDeviceManager): ptr GSList  {.importc:"clutter_device_manager_list_devices", libclutter.}
proc clutter_device_manager_peek_devices*(device_manager: ptr ClutterDeviceManager): ptr GSList  {.importc:"clutter_device_manager_peek_devices", libclutter.}
proc clutter_device_manager_remove_device*(device_manager: ptr ClutterDeviceManager; device: ptr ClutterInputDevice)  {.importc:"clutter_device_manager_remove_device", libclutter.}
proc clutter_device_manager_select_stage_events*(device_manager: ptr ClutterDeviceManager; stage: ptr ClutterStage)  {.importc:"clutter_device_manager_select_stage_events", libclutter.}
proc clutter_device_manager_update_devices*(device_manager: ptr ClutterDeviceManager)  {.importc:"clutter_device_manager_update_devices", libclutter.}
proc clutter_diagnostic_enabled*(): Gboolean  {.importc:"clutter_diagnostic_enabled", libclutter.}
proc clutter_diagnostic_message*(fmt: cstring)  {.varargs, importc:"clutter_diagnostic_message", libclutter.} 
proc clutter_disable_accessibility*()  {.importc:"clutter_disable_accessibility", libclutter.}
proc clutter_do_event*(event: ptr ClutterEvent)  {.importc:"clutter_do_event", libclutter.}
proc clutter_drag_action_get_drag_area*(action: ptr ClutterDragAction; drag_area: ptr ClutterRect): Gboolean  {.importc:"clutter_drag_action_get_drag_area", libclutter.}
proc clutter_drag_action_get_drag_axis*(action: ptr ClutterDragAction): ClutterDragAxis  {.importc:"clutter_drag_action_get_drag_axis", libclutter.}
proc clutter_drag_action_get_drag_handle*(action: ptr ClutterDragAction): ptr ClutterActor  {.importc:"clutter_drag_action_get_drag_handle", libclutter.}
proc clutter_drag_action_get_drag_threshold*(action: ptr ClutterDragAction; x_threshold: ptr Guint; y_threshold: ptr Guint)  {.importc:"clutter_drag_action_get_drag_threshold", libclutter.}
proc clutter_drag_action_get_motioncoords*(action: ptr ClutterDragAction; motion_x: ptr Gfloat; motion_y: ptr Gfloat)  {.importc:"clutter_drag_action_get_motioncoords", libclutter.}
proc clutter_drag_action_get_presscoords*(action: ptr ClutterDragAction; press_x: ptr Gfloat; press_y: ptr Gfloat)  {.importc:"clutter_drag_action_get_presscoords", libclutter.}
proc clutter_drag_action_get_type*(): GType  {.importc:"clutter_drag_action_get_type", libclutter.}
proc clutter_drag_action_new*(): ptr ClutterAction  {.importc:"clutter_drag_action_new", libclutter.}
proc clutter_drag_action_set_drag_area*(action: ptr ClutterDragAction; drag_area: ptr ClutterRect)  {.importc:"clutter_drag_action_set_drag_area", libclutter.}
proc clutter_drag_action_set_drag_axis*(action: ptr ClutterDragAction; axis: ClutterDragAxis)  {.importc:"clutter_drag_action_set_drag_axis", libclutter.}
proc clutter_drag_action_set_drag_handle*(action: ptr ClutterDragAction; handle: ptr ClutterActor)  {.importc:"clutter_drag_action_set_drag_handle", libclutter.}
proc clutter_drag_action_set_drag_threshold*(action: ptr ClutterDragAction; x_threshold: Gint; y_threshold: Gint)  {.importc:"clutter_drag_action_set_drag_threshold", libclutter.}
proc clutter_drop_action_get_type*(): GType  {.importc:"clutter_drop_action_get_type", libclutter.}
proc clutter_drop_action_new*(): ptr ClutterAction  {.importc:"clutter_drop_action_new", libclutter.}
proc clutter_ease_cubic_bezier*(t: cdouble; d: cdouble; x_1: cdouble; y_1: cdouble; x_2: cdouble; y_2: cdouble): cdouble  {.importc:"clutter_ease_cubic_bezier", libclutter.}
proc clutter_ease_in_back*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_back", libclutter.}
proc clutter_ease_in_bounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_bounce", libclutter.}
proc clutter_ease_in_circ*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_circ", libclutter.}
proc clutter_ease_in_cubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_cubic", libclutter.}
proc clutter_ease_in_elastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_elastic", libclutter.}
proc clutter_ease_in_expo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_expo", libclutter.}
proc clutter_ease_in_out_back*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_back", libclutter.}
proc clutter_ease_in_out_bounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_bounce", libclutter.}
proc clutter_ease_in_out_circ*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_circ", libclutter.}
proc clutter_ease_in_out_cubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_cubic", libclutter.}
proc clutter_ease_in_out_elastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_elastic", libclutter.}
proc clutter_ease_in_out_expo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_expo", libclutter.}
proc clutter_ease_in_out_quad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quad", libclutter.}
proc clutter_ease_in_out_quart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quart", libclutter.}
proc clutter_ease_in_out_quint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quint", libclutter.}
proc clutter_ease_in_out_sine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_sine", libclutter.}
proc clutter_ease_in_quad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quad", libclutter.}
proc clutter_ease_in_quart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quart", libclutter.}
proc clutter_ease_in_quint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quint", libclutter.}
proc clutter_ease_in_sine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_sine", libclutter.}
proc clutter_ease_out_back*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_back", libclutter.}
proc clutter_ease_out_bounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_bounce", libclutter.}
proc clutter_ease_out_circ*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_circ", libclutter.}
proc clutter_ease_out_cubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_cubic", libclutter.}
proc clutter_ease_out_elastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_elastic", libclutter.}
proc clutter_ease_out_expo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_expo", libclutter.}
proc clutter_ease_out_quad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quad", libclutter.}
proc clutter_ease_out_quart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quart", libclutter.}
proc clutter_ease_out_quint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quint", libclutter.}
proc clutter_ease_out_sine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_sine", libclutter.}
proc clutter_ease_steps_end*(t: cdouble; d: cdouble; steps: cint): cdouble  {.importc:"clutter_ease_steps_end", libclutter.}
proc clutter_ease_steps_start*(t: cdouble; d: cdouble; steps: cint): cdouble  {.importc:"clutter_ease_steps_start", libclutter.}
proc clutter_easing_for_mode*(mode: ClutterAnimationMode; t: cdouble; d: cdouble): cdouble  {.importc:"clutter_easing_for_mode", libclutter.}
proc clutter_effect_get_type*(): GType  {.importc:"clutter_effect_get_type", libclutter.}
proc clutter_effect_queue_repaint*(effect: ptr ClutterEffect)  {.importc:"clutter_effect_queue_repaint", libclutter.}
proc clutter_event_add_filter*(stage: ptr ClutterStage; `func`: ClutterEventFilterFunc; notify: GDestroyNotify; user_data: Gpointer): Guint  {.importc:"clutter_event_add_filter", libclutter.}
proc clutter_event_copy*(event: ptr ClutterEvent): ptr ClutterEvent  {.importc:"clutter_event_copy", libclutter.}
proc clutter_event_free*(event: ptr ClutterEvent)  {.importc:"clutter_event_free", libclutter.}
proc clutter_event_get*(): ptr ClutterEvent  {.importc:"clutter_event_get", libclutter.}
proc clutter_event_get_angle*(source: ptr ClutterEvent; target: ptr ClutterEvent): cdouble  {.importc:"clutter_event_get_angle", libclutter.}
proc clutter_event_get_axes*(event: ptr ClutterEvent; n_axes: ptr Guint): ptr Gdouble  {.importc:"clutter_event_get_axes", libclutter.}
proc clutter_event_get_button*(event: ptr ClutterEvent): uint32  {.importc:"clutter_event_get_button", libclutter.}
proc clutter_event_get_click_count*(event: ptr ClutterEvent): Guint  {.importc:"clutter_event_get_click_count", libclutter.}
proc clutter_event_get_coords*(event: ptr ClutterEvent; x: ptr Gfloat; y: ptr Gfloat)  {.importc:"clutter_event_get_coords", libclutter.}
proc clutter_event_get_device*(event: ptr ClutterEvent): ptr ClutterInputDevice  {.importc:"clutter_event_get_device", libclutter.}
proc clutter_event_get_device_id*(event: ptr ClutterEvent): Gint  {.importc:"clutter_event_get_device_id", libclutter.}
proc clutter_event_get_device_type*(event: ptr ClutterEvent): ClutterInputDeviceType  {.importc:"clutter_event_get_device_type", libclutter.}
proc clutter_event_get_distance*(source: ptr ClutterEvent; target: ptr ClutterEvent): cfloat  {.importc:"clutter_event_get_distance", libclutter.}
proc clutter_event_get_event_sequence*(event: ptr ClutterEvent): ptr ClutterEventSequence  {.importc:"clutter_event_get_event_sequence", libclutter.}
proc clutter_event_get_flags*(event: ptr ClutterEvent): ClutterEventFlags  {.importc:"clutter_event_get_flags", libclutter.}
proc clutter_event_get_key_code*(event: ptr ClutterEvent): uint16  {.importc:"clutter_event_get_key_code", libclutter.}
proc clutter_event_get_key_symbol*(event: ptr ClutterEvent): Guint  {.importc:"clutter_event_get_key_symbol", libclutter.}
proc clutter_event_get_key_unicode*(event: ptr ClutterEvent): Gunichar  {.importc:"clutter_event_get_key_unicode", libclutter.}
proc clutter_event_get_position*(event: ptr ClutterEvent; position: ptr ClutterPoint)  {.importc:"clutter_event_get_position", libclutter.}
proc clutter_event_get_related*(event: ptr ClutterEvent): ptr ClutterActor  {.importc:"clutter_event_get_related", libclutter.}
proc clutter_event_get_scroll_delta*(event: ptr ClutterEvent; dx: ptr Gdouble; dy: ptr Gdouble)  {.importc:"clutter_event_get_scroll_delta", libclutter.}
proc clutter_event_get_scroll_direction*(event: ptr ClutterEvent): ClutterScrollDirection  {.importc:"clutter_event_get_scroll_direction", libclutter.}
proc clutter_event_get_source*(event: ptr ClutterEvent): ptr ClutterActor  {.importc:"clutter_event_get_source", libclutter.}
proc clutter_event_get_source_device*(event: ptr ClutterEvent): ptr ClutterInputDevice  {.importc:"clutter_event_get_source_device", libclutter.}
proc clutter_event_get_stage*(event: ptr ClutterEvent): ptr ClutterStage  {.importc:"clutter_event_get_stage", libclutter.}
proc clutter_event_get_state*(event: ptr ClutterEvent): ClutterModifierType  {.importc:"clutter_event_get_state", libclutter.}
proc clutter_event_get_state_full*(event: ptr ClutterEvent; button_state: ptr ClutterModifierType; base_state: ptr ClutterModifierType; latched_state: ptr ClutterModifierType; locked_state: ptr ClutterModifierType; effective_state: ptr ClutterModifierType)  {.importc:"clutter_event_get_state_full", libclutter.}
proc clutter_event_get_time*(event: ptr ClutterEvent): uint32  {.importc:"clutter_event_get_time", libclutter.}
proc clutter_event_get_type*(): GType  {.importc:"clutter_event_get_type", libclutter.}
proc clutter_event_has_control_modifier*(event: ptr ClutterEvent): Gboolean  {.importc:"clutter_event_has_control_modifier", libclutter.}
proc clutter_event_has_shift_modifier*(event: ptr ClutterEvent): Gboolean  {.importc:"clutter_event_has_shift_modifier", libclutter.}
proc clutter_event_is_pointer_emulated*(event: ptr ClutterEvent): Gboolean  {.importc:"clutter_event_is_pointer_emulated", libclutter.}
proc clutter_event_new*(`type`: ClutterEventType): ptr ClutterEvent  {.importc:"clutter_event_new", libclutter.}
proc clutter_event_peek*(): ptr ClutterEvent  {.importc:"clutter_event_peek", libclutter.}
proc clutter_event_put*(event: ptr ClutterEvent)  {.importc:"clutter_event_put", libclutter.}
proc clutter_event_remove_filter*(id: Guint)  {.importc:"clutter_event_remove_filter", libclutter.}
proc clutter_event_sequence_get_type*(): GType  {.importc:"clutter_event_sequence_get_type", libclutter.}
proc clutter_event_set_button*(event: ptr ClutterEvent; button: uint32)  {.importc:"clutter_event_set_button", libclutter.}
proc clutter_event_set_coords*(event: ptr ClutterEvent; x: Gfloat; y: Gfloat)  {.importc:"clutter_event_set_coords", libclutter.}
proc clutter_event_set_device*(event: ptr ClutterEvent; device: ptr ClutterInputDevice)  {.importc:"clutter_event_set_device", libclutter.}
proc clutter_event_set_flags*(event: ptr ClutterEvent; flags: ClutterEventFlags)  {.importc:"clutter_event_set_flags", libclutter.}
proc clutter_event_set_key_code*(event: ptr ClutterEvent; key_code: uint16)  {.importc:"clutter_event_set_key_code", libclutter.}
proc clutter_event_set_key_symbol*(event: ptr ClutterEvent; key_sym: Guint)  {.importc:"clutter_event_set_key_symbol", libclutter.}
proc clutter_event_set_key_unicode*(event: ptr ClutterEvent; key_unicode: Gunichar)  {.importc:"clutter_event_set_key_unicode", libclutter.}
proc clutter_event_set_related*(event: ptr ClutterEvent; actor: ptr ClutterActor)  {.importc:"clutter_event_set_related", libclutter.}
proc clutter_event_set_scroll_delta*(event: ptr ClutterEvent; dx: Gdouble; dy: Gdouble)  {.importc:"clutter_event_set_scroll_delta", libclutter.}
proc clutter_event_set_scroll_direction*(event: ptr ClutterEvent; direction: ClutterScrollDirection)  {.importc:"clutter_event_set_scroll_direction", libclutter.}
proc clutter_event_set_source*(event: ptr ClutterEvent; actor: ptr ClutterActor)  {.importc:"clutter_event_set_source", libclutter.}
proc clutter_event_set_source_device*(event: ptr ClutterEvent; device: ptr ClutterInputDevice)  {.importc:"clutter_event_set_source_device", libclutter.}
proc clutter_event_set_stage*(event: ptr ClutterEvent; stage: ptr ClutterStage)  {.importc:"clutter_event_set_stage", libclutter.}
proc clutter_event_set_state*(event: ptr ClutterEvent; state: ClutterModifierType)  {.importc:"clutter_event_set_state", libclutter.}
proc clutter_event_set_time*(event: ptr ClutterEvent; time: uint32)  {.importc:"clutter_event_set_time", libclutter.}
proc clutter_event_translator_get_type*(): GType  {.importc:"clutter_event_translator_get_type", libclutter.}
proc clutter_event_translator_translate_event*(translator: ptr ClutterEventTranslator; native: Gpointer; translated: ptr ClutterEvent): ClutterTranslateReturn  {.importc:"clutter_event_translator_translate_event", libclutter.}
proc clutter_event_type*(event: ptr ClutterEvent): ClutterEventType  {.importc:"clutter_event_type", libclutter.}
proc clutter_events_pending*(): Gboolean  {.importc:"clutter_events_pending", libclutter.}
proc clutter_feature_available*(feature: ClutterFeatureFlags): Gboolean  {.importc:"clutter_feature_available", libclutter.}
proc clutter_feature_get_all*(): ClutterFeatureFlags  {.importc:"clutter_feature_get_all", libclutter.}
proc clutter_feature_init*(error: ptr ptr GError): Gboolean  {.importc:"clutter_feature_init", libclutter.}
proc clutter_fixed_layout_get_type*(): GType  {.importc:"clutter_fixed_layout_get_type", libclutter.}
proc clutter_fixed_layout_new*(): ptr ClutterLayoutManager  {.importc:"clutter_fixed_layout_new", libclutter.}
proc clutter_flatten_effect_get_type*(): GType  {.importc:"clutter_flatten_effect_get_type", libclutter.}
proc clutter_flatten_effect_new*(): ptr ClutterEffect  {.importc:"clutter_flatten_effect_new", libclutter.}
proc clutter_flow_layout_get_column_spacing*(layout: ptr ClutterFlowLayout): Gfloat  {.importc:"clutter_flow_layout_get_column_spacing", libclutter.}
proc clutter_flow_layout_get_column_width*(layout: ptr ClutterFlowLayout; min_width: ptr Gfloat; max_width: ptr Gfloat)  {.importc:"clutter_flow_layout_get_column_width", libclutter.}
proc clutter_flow_layout_get_homogeneous*(layout: ptr ClutterFlowLayout): Gboolean  {.importc:"clutter_flow_layout_get_homogeneous", libclutter.}
proc clutter_flow_layout_get_orientation*(layout: ptr ClutterFlowLayout): ClutterFlowOrientation  {.importc:"clutter_flow_layout_get_orientation", libclutter.}
proc clutter_flow_layout_get_row_height*(layout: ptr ClutterFlowLayout; min_height: ptr Gfloat; max_height: ptr Gfloat)  {.importc:"clutter_flow_layout_get_row_height", libclutter.}
proc clutter_flow_layout_get_row_spacing*(layout: ptr ClutterFlowLayout): Gfloat  {.importc:"clutter_flow_layout_get_row_spacing", libclutter.}
proc clutter_flow_layout_get_snap_to_grid*(layout: ptr ClutterFlowLayout): Gboolean  {.importc:"clutter_flow_layout_get_snap_to_grid", libclutter.}
proc clutter_flow_layout_get_type*(): GType  {.importc:"clutter_flow_layout_get_type", libclutter.}
proc clutter_flow_layout_new*(orientation: ClutterFlowOrientation): ptr ClutterLayoutManager  {.importc:"clutter_flow_layout_new", libclutter.}
proc clutter_flow_layout_set_column_spacing*(layout: ptr ClutterFlowLayout; spacing: Gfloat)  {.importc:"clutter_flow_layout_set_column_spacing", libclutter.}
proc clutter_flow_layout_set_column_width*(layout: ptr ClutterFlowLayout; min_width: Gfloat; max_width: Gfloat)  {.importc:"clutter_flow_layout_set_column_width", libclutter.}
proc clutter_flow_layout_set_homogeneous*(layout: ptr ClutterFlowLayout; homogeneous: Gboolean)  {.importc:"clutter_flow_layout_set_homogeneous", libclutter.}
proc clutter_flow_layout_set_orientation*(layout: ptr ClutterFlowLayout; orientation: ClutterFlowOrientation)  {.importc:"clutter_flow_layout_set_orientation", libclutter.}
proc clutter_flow_layout_set_row_height*(layout: ptr ClutterFlowLayout; min_height: Gfloat; max_height: Gfloat)  {.importc:"clutter_flow_layout_set_row_height", libclutter.}
proc clutter_flow_layout_set_row_spacing*(layout: ptr ClutterFlowLayout; spacing: Gfloat)  {.importc:"clutter_flow_layout_set_row_spacing", libclutter.}
proc clutter_flow_layout_set_snap_to_grid*(layout: ptr ClutterFlowLayout; snap_to_grid: Gboolean)  {.importc:"clutter_flow_layout_set_snap_to_grid", libclutter.}
proc clutter_fog_get_type*(): GType  {.importc:"clutter_fog_get_type", libclutter.}
proc clutter_geometry_get_type*(): GType  {.importc:"clutter_geometry_get_type", libclutter.}
proc clutter_geometry_intersects*(geometry0: ptr ClutterGeometry; geometry1: ptr ClutterGeometry): Gboolean  {.importc:"clutter_geometry_intersects", libclutter.}
proc clutter_geometry_union*(geometry_a: ptr ClutterGeometry; geometry_b: ptr ClutterGeometry; result: ptr ClutterGeometry)  {.importc:"clutter_geometry_union", libclutter.}
proc clutter_gesture_action_cancel*(action: ptr ClutterGestureAction)  {.importc:"clutter_gesture_action_cancel", libclutter.}
proc clutter_gesture_action_get_device*(action: ptr ClutterGestureAction; point: Guint): ptr ClutterInputDevice  {.importc:"clutter_gesture_action_get_device", libclutter.}
proc clutter_gesture_action_get_last_event*(action: ptr ClutterGestureAction; point: Guint): ptr ClutterEvent  {.importc:"clutter_gesture_action_get_last_event", libclutter.}
proc clutter_gesture_action_get_motion_coords*(action: ptr ClutterGestureAction; point: Guint; motion_x: ptr Gfloat; motion_y: ptr Gfloat)  {.importc:"clutter_gesture_action_get_motion_coords", libclutter.}
proc clutter_gesture_action_get_motion_delta*(action: ptr ClutterGestureAction; point: Guint; delta_x: ptr Gfloat; delta_y: ptr Gfloat): Gfloat  {.importc:"clutter_gesture_action_get_motion_delta", libclutter.}
proc clutter_gesture_action_get_n_current_points*(action: ptr ClutterGestureAction): Guint  {.importc:"clutter_gesture_action_get_n_current_points", libclutter.}
proc clutter_gesture_action_get_n_touch_points*(action: ptr ClutterGestureAction): Gint  {.importc:"clutter_gesture_action_get_n_touch_points", libclutter.}
proc clutter_gesture_action_get_press_coords*(action: ptr ClutterGestureAction; point: Guint; press_x: ptr Gfloat; press_y: ptr Gfloat)  {.importc:"clutter_gesture_action_get_press_coords", libclutter.}
proc clutter_gesture_action_get_release_coords*(action: ptr ClutterGestureAction; point: Guint; release_x: ptr Gfloat; release_y: ptr Gfloat)  {.importc:"clutter_gesture_action_get_release_coords", libclutter.}
proc clutter_gesture_action_get_sequence*(action: ptr ClutterGestureAction; point: Guint): ptr ClutterEventSequence  {.importc:"clutter_gesture_action_get_sequence", libclutter.}
proc clutter_gesture_action_get_threshold_trigger_distance*(action: ptr ClutterGestureAction; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_gesture_action_get_threshold_trigger_distance", libclutter.}
proc clutter_gesture_action_get_threshold_trigger_edge*(action: ptr ClutterGestureAction): ClutterGestureTriggerEdge  {.importc:"clutter_gesture_action_get_threshold_trigger_edge", libclutter.}
proc clutter_gesture_action_get_threshold_trigger_egde*(action: ptr ClutterGestureAction): ClutterGestureTriggerEdge  {.importc:"clutter_gesture_action_get_threshold_trigger_egde", libclutter.}
proc clutter_gesture_action_get_type*(): GType  {.importc:"clutter_gesture_action_get_type", libclutter.}
proc clutter_gesture_action_get_velocity*(action: ptr ClutterGestureAction; point: Guint; velocity_x: ptr Gfloat; velocity_y: ptr Gfloat): Gfloat  {.importc:"clutter_gesture_action_get_velocity", libclutter.}
proc clutter_gesture_action_new*(): ptr ClutterAction  {.importc:"clutter_gesture_action_new", libclutter.}
proc clutter_gesture_action_set_n_touch_points*(action: ptr ClutterGestureAction; nb_points: Gint)  {.importc:"clutter_gesture_action_set_n_touch_points", libclutter.}
proc clutter_gesture_action_set_threshold_trigger_distance*(action: ptr ClutterGestureAction; x: cfloat; y: cfloat)  {.importc:"clutter_gesture_action_set_threshold_trigger_distance", libclutter.}
proc clutter_gesture_action_set_threshold_trigger_edge*(action: ptr ClutterGestureAction; edge: ClutterGestureTriggerEdge)  {.importc:"clutter_gesture_action_set_threshold_trigger_edge", libclutter.}
proc clutter_get_accessibility_enabled*(): Gboolean  {.importc:"clutter_get_accessibility_enabled", libclutter.}
proc clutter_get_current_event*(): ptr ClutterEvent  {.importc:"clutter_get_current_event", libclutter.}
proc clutter_get_current_event_time*(): uint32  {.importc:"clutter_get_current_event_time", libclutter.}
proc clutter_get_default_backend*(): ptr ClutterBackend  {.importc:"clutter_get_default_backend", libclutter.}
proc clutter_get_default_frame_rate*(): Guint  {.importc:"clutter_get_default_frame_rate", libclutter.}
proc clutter_get_default_text_direction*(): ClutterTextDirection  {.importc:"clutter_get_default_text_direction", libclutter.}
proc clutter_get_easing_func_for_mode*(mode: ClutterAnimationMode): ClutterEasingFunc  {.importc:"clutter_get_easing_func_for_mode", libclutter.}
proc clutter_get_easing_name_for_mode*(mode: ClutterAnimationMode): cstring  {.importc:"clutter_get_easing_name_for_mode", libclutter.}
proc clutter_get_font_map*(): ptr pango.FontMap  {.importc:"clutter_get_font_map", libclutter.}
proc clutter_get_keyboard_grab*(): ptr ClutterActor  {.importc:"clutter_get_keyboard_grab", libclutter.}
proc clutter_get_option_group*(): ptr GOptionGroup  {.importc:"clutter_get_option_group", libclutter.}
proc clutter_get_option_group_without_init*(): ptr GOptionGroup  {.importc:"clutter_get_option_group_without_init", libclutter.}
proc clutter_get_pointer_grab*(): ptr ClutterActor  {.importc:"clutter_get_pointer_grab", libclutter.}
proc clutter_get_script_id*(gobject: ptr GObject): ptr Gchar  {.importc:"clutter_get_script_id", libclutter.}
proc clutter_get_sync_to_vblank*(): Gboolean  {.importc:"clutter_get_sync_to_vblank", libclutter.}
proc clutter_gettext*(str: ptr Gchar): ptr Gchar  {.importc:"clutter_gettext", libclutter.}
proc clutter_grab_keyboard*(actor: ptr ClutterActor)  {.importc:"clutter_grab_keyboard", libclutter.}
proc clutter_grab_pointer*(actor: ptr ClutterActor)  {.importc:"clutter_grab_pointer", libclutter.}
proc clutter_grid_layout_attach*(layout: ptr ClutterGridLayout; child: ptr ClutterActor; left: Gint; top: Gint; width: Gint; height: Gint)  {.importc:"clutter_grid_layout_attach", libclutter.}
proc clutter_grid_layout_attach_next_to*(layout: ptr ClutterGridLayout; child: ptr ClutterActor; sibling: ptr ClutterActor; side: ClutterGridPosition; width: Gint; height: Gint)  {.importc:"clutter_grid_layout_attach_next_to", libclutter.}
proc clutter_grid_layout_get_child_at*(layout: ptr ClutterGridLayout; left: Gint; top: Gint): ptr ClutterActor  {.importc:"clutter_grid_layout_get_child_at", libclutter.}
proc clutter_grid_layout_get_column_homogeneous*(layout: ptr ClutterGridLayout): Gboolean  {.importc:"clutter_grid_layout_get_column_homogeneous", libclutter.}
proc clutter_grid_layout_get_column_spacing*(layout: ptr ClutterGridLayout): Guint  {.importc:"clutter_grid_layout_get_column_spacing", libclutter.}
proc clutter_grid_layout_get_orientation*(layout: ptr ClutterGridLayout): ClutterOrientation  {.importc:"clutter_grid_layout_get_orientation", libclutter.}
proc clutter_grid_layout_get_row_homogeneous*(layout: ptr ClutterGridLayout): Gboolean  {.importc:"clutter_grid_layout_get_row_homogeneous", libclutter.}
proc clutter_grid_layout_get_row_spacing*(layout: ptr ClutterGridLayout): Guint  {.importc:"clutter_grid_layout_get_row_spacing", libclutter.}
proc clutter_grid_layout_get_type*(): GType  {.importc:"clutter_grid_layout_get_type", libclutter.}
proc clutter_grid_layout_insert_column*(layout: ptr ClutterGridLayout; position: Gint)  {.importc:"clutter_grid_layout_insert_column", libclutter.}
proc clutter_grid_layout_insert_next_to*(layout: ptr ClutterGridLayout; sibling: ptr ClutterActor; side: ClutterGridPosition)  {.importc:"clutter_grid_layout_insert_next_to", libclutter.}
proc clutter_grid_layout_insert_row*(layout: ptr ClutterGridLayout; position: Gint)  {.importc:"clutter_grid_layout_insert_row", libclutter.}
proc clutter_grid_layout_new*(): ptr ClutterLayoutManager  {.importc:"clutter_grid_layout_new", libclutter.}
proc clutter_grid_layout_set_column_homogeneous*(layout: ptr ClutterGridLayout; homogeneous: Gboolean)  {.importc:"clutter_grid_layout_set_column_homogeneous", libclutter.}
proc clutter_grid_layout_set_column_spacing*(layout: ptr ClutterGridLayout; spacing: Guint)  {.importc:"clutter_grid_layout_set_column_spacing", libclutter.}
proc clutter_grid_layout_set_orientation*(layout: ptr ClutterGridLayout; orientation: ClutterOrientation)  {.importc:"clutter_grid_layout_set_orientation", libclutter.}
proc clutter_grid_layout_set_row_homogeneous*(layout: ptr ClutterGridLayout; homogeneous: Gboolean)  {.importc:"clutter_grid_layout_set_row_homogeneous", libclutter.}
proc clutter_grid_layout_set_row_spacing*(layout: ptr ClutterGridLayout; spacing: Guint)  {.importc:"clutter_grid_layout_set_row_spacing", libclutter.}
proc clutter_group_get_type*(): GType  {.importc:"clutter_group_get_type", libclutter.}
proc clutter_has_progress_function*(gtype: GType): Gboolean  {.importc:"clutter_has_progress_function", libclutter.}
proc clutter_id_pool_add*(id_pool: ptr ClutterIDPool; `ptr`: Gpointer): uint32  {.importc:"clutter_id_pool_add", libclutter.}
proc clutter_id_pool_free*(id_pool: ptr ClutterIDPool)  {.importc:"clutter_id_pool_free", libclutter.}
proc clutter_id_pool_lookup*(id_pool: ptr ClutterIDPool; id: uint32): Gpointer  {.importc:"clutter_id_pool_lookup", libclutter.}
proc clutter_id_pool_new*(initial_size: Guint): ptr ClutterIDPool  {.importc:"clutter_id_pool_new", libclutter.}
proc clutter_id_pool_remove*(id_pool: ptr ClutterIDPool; id: uint32)  {.importc:"clutter_id_pool_remove", libclutter.}
proc clutter_id_to_color*(id: Guint; col: ptr ClutterColor)  {.importc:"clutter_id_to_color", libclutter.}
proc clutter_image_error_quark*(): GQuark  {.importc:"clutter_image_error_quark", libclutter.}
proc clutter_image_get_type*(): GType  {.importc:"clutter_image_get_type", libclutter.}
proc clutter_image_new*(): ptr ClutterContent  {.importc:"clutter_image_new", libclutter.}
proc clutter_image_set_area*(image: ptr ClutterImage; data: ptr uint8; pixel_format: CoglPixelFormat; rect: cairo.RectangleInt; row_stride: Guint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_area", libclutter.}
proc clutter_image_set_bytes*(image: ptr ClutterImage; data: ptr GBytes; pixel_format: CoglPixelFormat; width: Guint; height: Guint; row_stride: Guint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_bytes", libclutter.}
proc clutter_image_set_data*(image: ptr ClutterImage; data: ptr uint8; pixel_format: CoglPixelFormat; width: Guint; height: Guint; row_stride: Guint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_data", libclutter.}
proc clutter_init*(argc: ptr cint; argv: ptr cstringArray): ClutterInitError  {.importc:"clutter_init", libclutter.}
proc clutter_init_error_quark*(): GQuark  {.importc:"clutter_init_error_quark", libclutter.}
proc clutter_init_with_args*(argc: ptr cint; argv: ptr cstringArray; parameter_string: cstring; entries: ptr GOptionEntry; translation_domain: cstring; error: ptr ptr GError): ClutterInitError  {.importc:"clutter_init_with_args", libclutter.}
proc clutter_input_device_add_axis*(device: ptr ClutterInputDevice; axis: ClutterInputAxis; min_value: Gdouble; max_value: Gdouble; resolution: Gdouble): Guint  {.importc:"clutter_input_device_add_axis", libclutter.}
proc clutter_input_device_add_event_sequence*(device: ptr ClutterInputDevice; event: ptr ClutterEvent)  {.importc:"clutter_input_device_add_event_sequence", libclutter.}
proc clutter_input_device_add_scroll_info*(device: ptr ClutterInputDevice; index: Guint; direction: ClutterScrollDirection; increment: Gdouble)  {.importc:"clutter_input_device_add_scroll_info", libclutter.}
proc clutter_input_device_add_slave*(master: ptr ClutterInputDevice; slave: ptr ClutterInputDevice)  {.importc:"clutter_input_device_add_slave", libclutter.}
proc clutter_input_device_get_associated_device*(device: ptr ClutterInputDevice): ptr ClutterInputDevice  {.importc:"clutter_input_device_get_associated_device", libclutter.}
proc clutter_input_device_get_axis*(device: ptr ClutterInputDevice; index: Guint): ClutterInputAxis  {.importc:"clutter_input_device_get_axis", libclutter.}
proc clutter_input_device_get_axis_value*(device: ptr ClutterInputDevice; axes: ptr Gdouble; axis: ClutterInputAxis; value: ptr Gdouble): Gboolean  {.importc:"clutter_input_device_get_axis_value", libclutter.}
proc clutter_input_device_get_coords*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence; point: ptr ClutterPoint): Gboolean  {.importc:"clutter_input_device_get_coords", libclutter.}
proc clutter_input_device_get_device_id*(device: ptr ClutterInputDevice): Gint  {.importc:"clutter_input_device_get_device_id", libclutter.}
proc clutter_input_device_get_device_mode*(device: ptr ClutterInputDevice): ClutterInputMode  {.importc:"clutter_input_device_get_device_mode", libclutter.}
proc clutter_input_device_get_device_name*(device: ptr ClutterInputDevice): ptr Gchar  {.importc:"clutter_input_device_get_device_name", libclutter.}
proc clutter_input_device_get_device_type*(device: ptr ClutterInputDevice): ClutterInputDeviceType  {.importc:"clutter_input_device_get_device_type", libclutter.}
proc clutter_input_device_get_enabled*(device: ptr ClutterInputDevice): Gboolean  {.importc:"clutter_input_device_get_enabled", libclutter.}
proc clutter_input_device_get_grabbed_actor*(device: ptr ClutterInputDevice): ptr ClutterActor  {.importc:"clutter_input_device_get_grabbed_actor", libclutter.}
proc clutter_input_device_get_has_cursor*(device: ptr ClutterInputDevice): Gboolean  {.importc:"clutter_input_device_get_has_cursor", libclutter.}
proc clutter_input_device_get_key*(device: ptr ClutterInputDevice; index: Guint; keyval: ptr Guint; modifiers: ptr ClutterModifierType): Gboolean  {.importc:"clutter_input_device_get_key", libclutter.}
proc clutter_input_device_get_modifier_state*(device: ptr ClutterInputDevice): ClutterModifierType  {.importc:"clutter_input_device_get_modifier_state", libclutter.}
proc clutter_input_device_get_n_axes*(device: ptr ClutterInputDevice): Guint  {.importc:"clutter_input_device_get_n_axes", libclutter.}
proc clutter_input_device_get_n_keys*(device: ptr ClutterInputDevice): Guint  {.importc:"clutter_input_device_get_n_keys", libclutter.}
proc clutter_input_device_get_pointer_actor*(device: ptr ClutterInputDevice): ptr ClutterActor  {.importc:"clutter_input_device_get_pointer_actor", libclutter.}
proc clutter_input_device_get_pointer_stage*(device: ptr ClutterInputDevice): ptr ClutterStage  {.importc:"clutter_input_device_get_pointer_stage", libclutter.}
proc clutter_input_device_get_scroll_delta*(device: ptr ClutterInputDevice; index: Guint; value: Gdouble; direction_p: ptr ClutterScrollDirection; delta_p: ptr Gdouble): Gboolean  {.importc:"clutter_input_device_get_scroll_delta", libclutter.}
proc clutter_input_device_get_slave_devices*(device: ptr ClutterInputDevice): ptr GList  {.importc:"clutter_input_device_get_slave_devices", libclutter.}
proc clutter_input_device_get_stage*(device: ptr ClutterInputDevice): ptr ClutterStage  {.importc:"clutter_input_device_get_stage", libclutter.}
proc clutter_input_device_get_type*(): GType  {.importc:"clutter_input_device_get_type", libclutter.}
proc clutter_input_device_grab*(device: ptr ClutterInputDevice; actor: ptr ClutterActor)  {.importc:"clutter_input_device_grab", libclutter.}
proc clutter_input_device_has_sequence*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence): Gboolean  {.importc:"clutter_input_device_has_sequence", libclutter.}
proc clutter_input_device_keycode_to_evdev*(device: ptr ClutterInputDevice; hardware_keycode: Guint; evdev_keycode: ptr Guint): Gboolean  {.importc:"clutter_input_device_keycode_to_evdev", libclutter.}
proc clutter_input_device_remove_event_sequence*(device: ptr ClutterInputDevice; event: ptr ClutterEvent)  {.importc:"clutter_input_device_remove_event_sequence", libclutter.}
proc clutter_input_device_remove_slave*(master: ptr ClutterInputDevice; slave: ptr ClutterInputDevice)  {.importc:"clutter_input_device_remove_slave", libclutter.}
proc clutter_input_device_reset_axes*(device: ptr ClutterInputDevice)  {.importc:"clutter_input_device_reset_axes", libclutter.}
proc clutter_input_device_reset_scroll_info*(device: ptr ClutterInputDevice)  {.importc:"clutter_input_device_reset_scroll_info", libclutter.}
proc clutter_input_device_sequence_get_grabbed_actor*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence): ptr ClutterActor  {.importc:"clutter_input_device_sequence_get_grabbed_actor", libclutter.}
proc clutter_input_device_sequence_grab*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence; actor: ptr ClutterActor)  {.importc:"clutter_input_device_sequence_grab", libclutter.}
proc clutter_input_device_sequence_ungrab*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence)  {.importc:"clutter_input_device_sequence_ungrab", libclutter.}
proc clutter_input_device_set_actor*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence; actor: ptr ClutterActor; emit_crossing: Gboolean)  {.importc:"clutter_input_device_set_actor", libclutter.}
proc clutter_input_device_set_associated_device*(device: ptr ClutterInputDevice; associated: ptr ClutterInputDevice)  {.importc:"clutter_input_device_set_associated_device", libclutter.}
proc clutter_input_device_set_coords*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence; x: Gfloat; y: Gfloat; stage: ptr ClutterStage)  {.importc:"clutter_input_device_set_coords", libclutter.}
proc clutter_input_device_set_enabled*(device: ptr ClutterInputDevice; enabled: Gboolean)  {.importc:"clutter_input_device_set_enabled", libclutter.}
proc clutter_input_device_set_key*(device: ptr ClutterInputDevice; index: Guint; keyval: Guint; modifiers: ClutterModifierType)  {.importc:"clutter_input_device_set_key", libclutter.}
proc clutter_input_device_set_n_keys*(device: ptr ClutterInputDevice; n_keys: Guint)  {.importc:"clutter_input_device_set_n_keys", libclutter.}
proc clutter_input_device_set_stage*(device: ptr ClutterInputDevice; stage: ptr ClutterStage)  {.importc:"clutter_input_device_set_stage", libclutter.}
proc clutter_input_device_set_state*(device: ptr ClutterInputDevice; state: ClutterModifierType)  {.importc:"clutter_input_device_set_state", libclutter.}
proc clutter_input_device_set_time*(device: ptr ClutterInputDevice; time: uint32)  {.importc:"clutter_input_device_set_time", libclutter.}
proc clutter_input_device_translate_axis*(device: ptr ClutterInputDevice; index: Guint; value: Gdouble; axis_value: ptr Gdouble): Gboolean  {.importc:"clutter_input_device_translate_axis", libclutter.}
proc clutter_input_device_ungrab*(device: ptr ClutterInputDevice)  {.importc:"clutter_input_device_ungrab", libclutter.}
proc clutter_input_device_update*(device: ptr ClutterInputDevice; sequence: ptr ClutterEventSequence; emit_crossing: Gboolean): ptr ClutterActor  {.importc:"clutter_input_device_update", libclutter.}
proc clutter_input_device_update_from_event*(device: ptr ClutterInputDevice; event: ptr ClutterEvent; update_stage: Gboolean)  {.importc:"clutter_input_device_update_from_event", libclutter.}
proc clutter_interval_clone*(interval: ptr ClutterInterval): ptr ClutterInterval  {.importc:"clutter_interval_clone", libclutter.}
proc clutter_interval_compute*(interval: ptr ClutterInterval; factor: Gdouble): ptr GValue  {.importc:"clutter_interval_compute", libclutter.}
proc clutter_interval_compute_value*(interval: ptr ClutterInterval; factor: Gdouble; value: ptr GValue): Gboolean  {.importc:"clutter_interval_compute_value", libclutter.}
proc clutter_interval_get_final_value*(interval: ptr ClutterInterval; value: ptr GValue)  {.importc:"clutter_interval_get_final_value", libclutter.}
proc clutter_interval_get_initial_value*(interval: ptr ClutterInterval; value: ptr GValue)  {.importc:"clutter_interval_get_initial_value", libclutter.}
proc clutter_interval_get_interval*(interval: ptr ClutterInterval)  {.varargs, importc:"clutter_interval_get_interval", libclutter.} 
proc clutter_interval_get_type*(): GType  {.importc:"clutter_interval_get_type", libclutter.}
proc clutter_interval_get_value_type*(interval: ptr ClutterInterval): GType  {.importc:"clutter_interval_get_value_type", libclutter.}
proc clutter_interval_is_valid*(interval: ptr ClutterInterval): Gboolean  {.importc:"clutter_interval_is_valid", libclutter.}
proc clutter_interval_new*(gtype: GType): ptr ClutterInterval  {.varargs, importc:"clutter_interval_new", libclutter.} 
proc clutter_interval_new_with_values*(gtype: GType; initial: ptr GValue; final: ptr GValue): ptr ClutterInterval  {.importc:"clutter_interval_new_with_values", libclutter.}
proc clutter_interval_peek_final_value*(interval: ptr ClutterInterval): ptr GValue  {.importc:"clutter_interval_peek_final_value", libclutter.}
proc clutter_interval_peek_initial_value*(interval: ptr ClutterInterval): ptr GValue  {.importc:"clutter_interval_peek_initial_value", libclutter.}
proc clutter_interval_register_progress_func*(value_type: GType; `func`: ClutterProgressFunc)  {.importc:"clutter_interval_register_progress_func", libclutter.}
proc clutter_interval_set_final*(interval: ptr ClutterInterval)  {.varargs, importc:"clutter_interval_set_final", libclutter.} 
proc clutter_interval_set_final_value*(interval: ptr ClutterInterval; value: ptr GValue)  {.importc:"clutter_interval_set_final_value", libclutter.}
proc clutter_interval_set_initial*(interval: ptr ClutterInterval)  {.varargs, importc:"clutter_interval_set_initial", libclutter.} 
proc clutter_interval_set_initial_value*(interval: ptr ClutterInterval; value: ptr GValue)  {.importc:"clutter_interval_set_initial_value", libclutter.}
proc clutter_interval_set_interval*(interval: ptr ClutterInterval)  {.varargs, importc:"clutter_interval_set_interval", libclutter.} 
proc clutter_interval_validate*(interval: ptr ClutterInterval; pspec: ptr GParamSpec): Gboolean  {.importc:"clutter_interval_validate", libclutter.}
proc clutter_keyframe_transition_clear*(transition: ptr ClutterKeyframeTransition)  {.importc:"clutter_keyframe_transition_clear", libclutter.}
proc clutter_keyframe_transition_get_key_frame*(transition: ptr ClutterKeyframeTransition; index: Guint; key: ptr cdouble; mode: ptr ClutterAnimationMode; value: ptr GValue)  {.importc:"clutter_keyframe_transition_get_key_frame", libclutter.}
proc clutter_keyframe_transition_get_n_key_frames*(transition: ptr ClutterKeyframeTransition): Guint  {.importc:"clutter_keyframe_transition_get_n_key_frames", libclutter.}
proc clutter_keyframe_transition_get_type*(): GType  {.importc:"clutter_keyframe_transition_get_type", libclutter.}
proc clutter_keyframe_transition_new*(property_name: cstring): ptr ClutterTransition  {.importc:"clutter_keyframe_transition_new", libclutter.}
proc clutter_keyframe_transition_set*(transition: ptr ClutterKeyframeTransition; gtype: GType; n_key_frames: Guint)  {.varargs, importc:"clutter_keyframe_transition_set", libclutter.} 
proc clutter_keyframe_transition_set_key_frame*(transition: ptr ClutterKeyframeTransition; index: Guint; key: cdouble; mode: ClutterAnimationMode; value: ptr GValue)  {.importc:"clutter_keyframe_transition_set_key_frame", libclutter.}
proc clutter_keyframe_transition_set_key_frames*(transition: ptr ClutterKeyframeTransition; n_key_frames: Guint; key_frames: ptr cdouble)  {.importc:"clutter_keyframe_transition_set_key_frames", libclutter.}
proc clutter_keyframe_transition_set_modes*(transition: ptr ClutterKeyframeTransition; n_modes: Guint; modes: ptr ClutterAnimationMode)  {.importc:"clutter_keyframe_transition_set_modes", libclutter.}
proc clutter_keyframe_transition_set_values*(transition: ptr ClutterKeyframeTransition; n_values: Guint; values: ptr GValue)  {.importc:"clutter_keyframe_transition_set_values", libclutter.}
proc clutter_keysym_to_unicode*(keyval: Guint): uint32  {.importc:"clutter_keysym_to_unicode", libclutter.}
proc clutter_knot_copy*(knot: ptr ClutterKnot): ptr ClutterKnot  {.importc:"clutter_knot_copy", libclutter.}
proc clutter_knot_equal*(knot_a: ptr ClutterKnot; knot_b: ptr ClutterKnot): Gboolean  {.importc:"clutter_knot_equal", libclutter.}
proc clutter_knot_free*(knot: ptr ClutterKnot)  {.importc:"clutter_knot_free", libclutter.}
proc clutter_knot_get_type*(): GType  {.importc:"clutter_knot_get_type", libclutter.}
proc clutter_layer_node_get_type*(): GType  {.importc:"clutter_layer_node_get_type", libclutter.}
proc clutter_layer_node_new*(projection: CoglMatrix; viewport: cairo.Rectangle; width: cfloat; height: cfloat; opacity: uint8): ptr ClutterPaintNode  {.importc:"clutter_layer_node_new", libclutter.}
proc clutter_layout_manager_allocate*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; allocation: ptr ClutterActorBox; flags: ClutterAllocationFlags)  {.importc:"clutter_layout_manager_allocate", libclutter.}
proc clutter_layout_manager_begin_animation*(manager: ptr ClutterLayoutManager; duration: Guint; mode: Gulong): ptr ClutterAlpha  {.importc:"clutter_layout_manager_begin_animation", libclutter.}
proc clutter_layout_manager_child_get*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor; first_property: ptr Gchar)  {.varargs, importc:"clutter_layout_manager_child_get", libclutter.}  
proc clutter_layout_manager_child_get_property*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor; property_name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_layout_manager_child_get_property", libclutter.}
proc clutter_layout_manager_child_set*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor; first_property: ptr Gchar)  {.varargs, importc:"clutter_layout_manager_child_set", libclutter.} 
proc clutter_layout_manager_child_set_property*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor; property_name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_layout_manager_child_set_property", libclutter.}
proc clutter_layout_manager_end_animation*(manager: ptr ClutterLayoutManager)  {.importc:"clutter_layout_manager_end_animation", libclutter.}
proc clutter_layout_manager_find_child_property*(manager: ptr ClutterLayoutManager; name: ptr Gchar): ptr GParamSpec  {.importc:"clutter_layout_manager_find_child_property", libclutter.}
proc clutter_layout_manager_get_animation_progress*(manager: ptr ClutterLayoutManager): Gdouble  {.importc:"clutter_layout_manager_get_animation_progress", libclutter.}
proc clutter_layout_manager_get_child_meta*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; actor: ptr ClutterActor): ptr ClutterLayoutMeta  {.importc:"clutter_layout_manager_get_child_meta", libclutter.}
proc clutter_layout_manager_get_child_meta_type*(manager: ptr ClutterLayoutManager): GType  {.importc:"clutter_layout_manager_get_child_meta_type", libclutter.}
proc clutter_layout_manager_get_preferred_height*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; for_width: Gfloat; min_height_p: ptr Gfloat; nat_height_p: ptr Gfloat)  {.importc:"clutter_layout_manager_get_preferred_height", libclutter.}
proc clutter_layout_manager_get_preferred_width*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer; for_height: Gfloat; min_width_p: ptr Gfloat; nat_width_p: ptr Gfloat)  {.importc:"clutter_layout_manager_get_preferred_width", libclutter.}
proc clutter_layout_manager_get_type*(): GType  {.importc:"clutter_layout_manager_get_type", libclutter.}
proc clutter_layout_manager_layout_changed*(manager: ptr ClutterLayoutManager)  {.importc:"clutter_layout_manager_layout_changed", libclutter.}
proc clutter_layout_manager_list_child_properties*(manager: ptr ClutterLayoutManager; n_pspecs: ptr Guint): ptr ptr GParamSpec  {.importc:"clutter_layout_manager_list_child_properties", libclutter.}
proc clutter_layout_manager_set_container*(manager: ptr ClutterLayoutManager; container: ptr ClutterContainer)  {.importc:"clutter_layout_manager_set_container", libclutter.}
proc clutter_layout_meta_get_manager*(data: ptr ClutterLayoutMeta): ptr ClutterLayoutManager  {.importc:"clutter_layout_meta_get_manager", libclutter.}
proc clutter_layout_meta_get_type*(): GType  {.importc:"clutter_layout_meta_get_type", libclutter.}
proc clutter_linear*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_linear", libclutter.}
proc clutter_list_model_get_type*(): GType  {.importc:"clutter_list_model_get_type", libclutter.}
proc clutter_list_model_new*(n_columns: Guint): ptr ClutterModel  {.varargs, importc:"",   libclutter.}
proc clutter_list_model_newv*(n_columns: Guint; types: ptr GType; names: ptr ptr Gchar): ptr ClutterModel  {.importc:"clutter_list_model_newv", libclutter.}
proc clutter_main*()  {.importc:"clutter_main", libclutter.}
proc clutter_main_level*(): Gint  {.importc:"clutter_main_level", libclutter.}
proc clutter_main_quit*()  {.importc:"clutter_main_quit", libclutter.}
proc clutter_margin_copy*(margin: ptr ClutterMargin): ptr ClutterMargin  {.importc:"clutter_margin_copy", libclutter.}
proc clutter_margin_free*(margin: ptr ClutterMargin)  {.importc:"clutter_margin_free", libclutter.}
proc clutter_margin_get_type*(): GType  {.importc:"clutter_margin_get_type", libclutter.}
proc clutter_margin_new*(): ptr ClutterMargin  {.importc:"clutter_margin_new", libclutter.}
proc clutter_master_clock_add_timeline*(master_clock: ptr ClutterMasterClock; timeline: ptr ClutterTimeline)  {.importc:"clutter_master_clock_add_timeline", libclutter.}
proc clutter_master_clock_ensure_next_iteration*(master_clock: ptr ClutterMasterClock)  {.importc:"clutter_master_clock_ensure_next_iteration", libclutter.}
proc clutter_master_clock_get_default*(): ptr ClutterMasterClock  {.importc:"clutter_master_clock_get_default", libclutter.}
proc clutter_master_clock_get_type*(): GType  {.importc:"clutter_master_clock_get_type", libclutter.}
proc clutter_master_clock_remove_timeline*(master_clock: ptr ClutterMasterClock; timeline: ptr ClutterTimeline)  {.importc:"clutter_master_clock_remove_timeline", libclutter.}
proc clutter_master_clock_set_paused*(master_clock: ptr ClutterMasterClock; paused: Gboolean)  {.importc:"clutter_master_clock_set_paused", libclutter.}
proc clutter_master_clock_start_running*(master_clock: ptr ClutterMasterClock)  {.importc:"clutter_master_clock_start_running", libclutter.}
proc clutter_matrix_alloc*(): ptr ClutterMatrix  {.importc:"clutter_matrix_alloc", libclutter.}
proc clutter_matrix_get_type*(): GType  {.importc:"clutter_matrix_get_type", libclutter.}
proc clutter_model_iter_copy*(iter: ptr ClutterModelIter): ptr ClutterModelIter  {.importc:"clutter_model_iter_copy", libclutter.}
proc clutter_model_iter_get*(iter: ptr ClutterModelIter)  {.varargs, importc:"clutter_model_iter_get",   libclutter.}
proc clutter_model_iter_get_model*(iter: ptr ClutterModelIter): ptr ClutterModel  {.importc:"clutter_model_iter_get_model", libclutter.}
proc clutter_model_iter_get_row*(iter: ptr ClutterModelIter): Guint  {.importc:"clutter_model_iter_get_row", libclutter.}
proc clutter_model_iter_get_type*(): GType  {.importc:"clutter_model_iter_get_type", libclutter.}
proc clutter_model_iter_get_value*(iter: ptr ClutterModelIter; column: Guint; value: ptr GValue)  {.importc:"clutter_model_iter_get_value", libclutter.}
proc clutter_model_iter_is_first*(iter: ptr ClutterModelIter): Gboolean  {.importc:"clutter_model_iter_is_first", libclutter.}
proc clutter_model_iter_is_last*(iter: ptr ClutterModelIter): Gboolean  {.importc:"clutter_model_iter_is_last", libclutter.}
proc clutter_model_iter_next*(iter: ptr ClutterModelIter): ptr ClutterModelIter  {.importc:"clutter_model_iter_next", libclutter.}
proc clutter_model_iter_prev*(iter: ptr ClutterModelIter): ptr ClutterModelIter  {.importc:"clutter_model_iter_prev", libclutter.}
proc clutter_model_iter_set*(iter: ptr ClutterModelIter)  {.varargs, importc:"clutter_model_iter_set",  libclutter.}
proc clutter_model_iter_set_value*(iter: ptr ClutterModelIter; column: Guint; value: ptr GValue)  {.importc:"clutter_model_iter_set_value", libclutter.}
proc clutter_offscreen_effect_create_texture*(effect: ptr ClutterOffscreenEffect; width: Gfloat; height: Gfloat): CoglHandle  {.importc:"clutter_offscreen_effect_create_texture", libclutter.}
proc clutter_offscreen_effect_get_target*(effect: ptr ClutterOffscreenEffect): CoglMaterial  {.importc:"clutter_offscreen_effect_get_target", libclutter.}
proc clutter_offscreen_effect_get_target_rect*(effect: ptr ClutterOffscreenEffect; rect: ptr ClutterRect): Gboolean  {.importc:"clutter_offscreen_effect_get_target_rect", libclutter.}
proc clutter_offscreen_effect_get_target_size*(effect: ptr ClutterOffscreenEffect; width: ptr Gfloat; height: ptr Gfloat): Gboolean  {.importc:"clutter_offscreen_effect_get_target_size", libclutter.}
proc clutter_offscreen_effect_get_texture*(effect: ptr ClutterOffscreenEffect): CoglHandle  {.importc:"clutter_offscreen_effect_get_texture", libclutter.}
proc clutter_offscreen_effect_get_type*(): GType  {.importc:"clutter_offscreen_effect_get_type", libclutter.}
proc clutter_offscreen_effect_paint_target*(effect: ptr ClutterOffscreenEffect)  {.importc:"clutter_offscreen_effect_paint_target", libclutter.}
proc clutter_page_turn_effect_get_angle*(effect: ptr ClutterPageTurnEffect): Gdouble  {.importc:"clutter_page_turn_effect_get_angle", libclutter.}
proc clutter_page_turn_effect_get_period*(effect: ptr ClutterPageTurnEffect): Gdouble  {.importc:"clutter_page_turn_effect_get_period", libclutter.}
proc clutter_page_turn_effect_get_radius*(effect: ptr ClutterPageTurnEffect): Gfloat  {.importc:"clutter_page_turn_effect_get_radius", libclutter.}
proc clutter_page_turn_effect_get_type*(): GType  {.importc:"clutter_page_turn_effect_get_type", libclutter.}
proc clutter_page_turn_effect_new*(period: Gdouble; angle: Gdouble; radius: Gfloat): ptr ClutterEffect  {.importc:"clutter_page_turn_effect_new", libclutter.}
proc clutter_page_turn_effect_set_angle*(effect: ptr ClutterPageTurnEffect; angle: Gdouble)  {.importc:"clutter_page_turn_effect_set_angle", libclutter.}
proc clutter_page_turn_effect_set_period*(effect: ptr ClutterPageTurnEffect; period: Gdouble)  {.importc:"clutter_page_turn_effect_set_period", libclutter.}
proc clutter_page_turn_effect_set_radius*(effect: ptr ClutterPageTurnEffect; radius: Gfloat)  {.importc:"clutter_page_turn_effect_set_radius", libclutter.}
proc clutter_paint_node_add_child*(node: ptr ClutterPaintNode; child: ptr ClutterPaintNode)  {.importc:"clutter_paint_node_add_child", libclutter.}
proc clutter_paint_node_add_rectangle*(node: ptr ClutterPaintNode; rect: ptr ClutterActorBox)  {.importc:"clutter_paint_node_add_rectangle", libclutter.}
proc clutter_paint_node_add_texture_rectangle*(node: ptr ClutterPaintNode; rect: ptr ClutterActorBox; x_1: cfloat; y_1: cfloat; x_2: cfloat; y_2: cfloat)  {.importc:"clutter_paint_node_add_texture_rectangle", libclutter.}
proc clutter_paint_node_get_first_child*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_get_first_child", libclutter.}
proc clutter_paint_node_get_framebuffer*(node: ptr ClutterPaintNode): CoglFramebuffer  {.importc:"clutter_paint_node_get_framebuffer", libclutter.}
proc clutter_paint_node_get_last_child*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_get_last_child", libclutter.}
proc clutter_paint_node_get_n_children*(node: ptr ClutterPaintNode): Guint  {.importc:"clutter_paint_node_get_n_children", libclutter.}
proc clutter_paint_node_get_next_sibling*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_get_next_sibling", libclutter.}
proc clutter_paint_node_get_parent*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_get_parent", libclutter.}
proc clutter_paint_node_get_previous_sibling*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_get_previous_sibling", libclutter.}
proc clutter_paint_node_get_type*(): GType  {.importc:"clutter_paint_node_get_type", libclutter.}
proc clutter_paint_node_ref*(node: ptr ClutterPaintNode): ptr ClutterPaintNode  {.importc:"clutter_paint_node_ref", libclutter.}
proc clutter_paint_node_remove_all*(node: ptr ClutterPaintNode)  {.importc:"clutter_paint_node_remove_all", libclutter.}
proc clutter_paint_node_remove_child*(node: ptr ClutterPaintNode; child: ptr ClutterPaintNode)  {.importc:"clutter_paint_node_remove_child", libclutter.}
proc clutter_paint_node_replace_child*(node: ptr ClutterPaintNode; old_child: ptr ClutterPaintNode; new_child: ptr ClutterPaintNode)  {.importc:"clutter_paint_node_replace_child", libclutter.}
proc clutter_paint_node_set_name*(node: ptr ClutterPaintNode; name: cstring)  {.importc:"clutter_paint_node_set_name", libclutter.}
proc clutter_paint_node_unref*(node: ptr ClutterPaintNode)  {.importc:"clutter_paint_node_unref", libclutter.}
proc clutter_paint_volume_copy*(pv: ptr ClutterPaintVolume): ptr ClutterPaintVolume  {.importc:"clutter_paint_volume_copy", libclutter.}
proc clutter_paint_volume_free*(pv: ptr ClutterPaintVolume)  {.importc:"clutter_paint_volume_free", libclutter.}
proc clutter_paint_volume_get_depth*(pv: ptr ClutterPaintVolume): Gfloat  {.importc:"clutter_paint_volume_get_depth", libclutter.}
proc clutter_paint_volume_get_height*(pv: ptr ClutterPaintVolume): Gfloat  {.importc:"clutter_paint_volume_get_height", libclutter.}
proc clutter_paint_volume_get_origin*(pv: ptr ClutterPaintVolume; vertex: ptr ClutterVertex)  {.importc:"clutter_paint_volume_get_origin", libclutter.}
proc clutter_paint_volume_get_type*(): GType  {.importc:"clutter_paint_volume_get_type", libclutter.}
proc clutter_paint_volume_get_width*(pv: ptr ClutterPaintVolume): Gfloat  {.importc:"clutter_paint_volume_get_width", libclutter.}
proc clutter_paint_volume_new*(actor: ptr ClutterActor): ptr ClutterPaintVolume  {.importc:"clutter_paint_volume_new", libclutter.}
proc clutter_paint_volume_set_depth*(pv: ptr ClutterPaintVolume; depth: Gfloat)  {.importc:"clutter_paint_volume_set_depth", libclutter.}
proc clutter_paint_volume_set_from_allocation*(pv: ptr ClutterPaintVolume; actor: ptr ClutterActor): Gboolean  {.importc:"clutter_paint_volume_set_from_allocation", libclutter.}
proc clutter_paint_volume_set_height*(pv: ptr ClutterPaintVolume; height: Gfloat)  {.importc:"clutter_paint_volume_set_height", libclutter.}
proc clutter_paint_volume_set_origin*(pv: ptr ClutterPaintVolume; origin: ptr ClutterVertex)  {.importc:"clutter_paint_volume_set_origin", libclutter.}
proc clutter_paint_volume_set_width*(pv: ptr ClutterPaintVolume; width: Gfloat)  {.importc:"clutter_paint_volume_set_width", libclutter.}
proc clutter_paint_volume_union*(pv: ptr ClutterPaintVolume; another_pv: ptr ClutterPaintVolume)  {.importc:"clutter_paint_volume_union", libclutter.}
proc clutter_paint_volume_union_box*(pv: ptr ClutterPaintVolume; box: ptr ClutterActorBox)  {.importc:"clutter_paint_volume_union_box", libclutter.}
proc clutter_pan_action_get_acceleration_factor*(self: ptr ClutterPanAction): Gdouble  {.importc:"clutter_pan_action_get_acceleration_factor", libclutter.}
proc clutter_pan_action_get_deceleration*(self: ptr ClutterPanAction): Gdouble  {.importc:"clutter_pan_action_get_deceleration", libclutter.}
proc clutter_pan_action_get_interpolate*(self: ptr ClutterPanAction): Gboolean  {.importc:"clutter_pan_action_get_interpolate", libclutter.}
proc clutter_pan_action_get_interpolated_coords*(self: ptr ClutterPanAction; interpolated_x: ptr Gfloat; interpolated_y: ptr Gfloat)  {.importc:"clutter_pan_action_get_interpolated_coords", libclutter.}
proc clutter_pan_action_get_interpolated_delta*(self: ptr ClutterPanAction; delta_x: ptr Gfloat; delta_y: ptr Gfloat): Gfloat  {.importc:"clutter_pan_action_get_interpolated_delta", libclutter.}
proc clutter_pan_action_get_motion_coords*(self: ptr ClutterPanAction; point: Guint; motion_x: ptr Gfloat; motion_y: ptr Gfloat)  {.importc:"clutter_pan_action_get_motion_coords", libclutter.}
proc clutter_pan_action_get_motion_delta*(self: ptr ClutterPanAction; point: Guint; delta_x: ptr Gfloat; delta_y: ptr Gfloat): Gfloat  {.importc:"clutter_pan_action_get_motion_delta", libclutter.}
proc clutter_pan_action_get_pan_axis*(self: ptr ClutterPanAction): ClutterPanAxis  {.importc:"clutter_pan_action_get_pan_axis", libclutter.}
proc clutter_pan_action_get_type*(): GType  {.importc:"clutter_pan_action_get_type", libclutter.}
proc clutter_pan_action_new*(): ptr ClutterAction  {.importc:"clutter_pan_action_new", libclutter.}
proc clutter_pan_action_set_acceleration_factor*(self: ptr ClutterPanAction; factor: Gdouble)  {.importc:"clutter_pan_action_set_acceleration_factor", libclutter.}
proc clutter_pan_action_set_deceleration*(self: ptr ClutterPanAction; rate: Gdouble)  {.importc:"clutter_pan_action_set_deceleration", libclutter.}
proc clutter_pan_action_set_interpolate*(self: ptr ClutterPanAction; should_interpolate: Gboolean)  {.importc:"clutter_pan_action_set_interpolate", libclutter.}
proc clutter_pan_action_set_pan_axis*(self: ptr ClutterPanAction; axis: ClutterPanAxis)  {.importc:"clutter_pan_action_set_pan_axis", libclutter.}
proc clutter_param_color_get_type*(): GType  {.importc:"clutter_param_color_get_type", libclutter.}
proc clutter_param_spec_color*(name: ptr Gchar; nick: ptr Gchar; blurb: ptr Gchar; default_value: ptr ClutterColor; flags: GParamFlags): ptr GParamSpec  {.importc:"clutter_param_spec_color", libclutter.}
proc clutter_path_add_cairo_path*(path: ptr ClutterPath; cpath: cairo.Path)  {.importc:"clutter_path_add_cairo_path", libclutter.}
proc clutter_path_add_close*(path: ptr ClutterPath)  {.importc:"clutter_path_add_close", libclutter.}
proc clutter_path_add_curve_to*(path: ptr ClutterPath; x_1: Gint; y_1: Gint; x_2: Gint; y_2: Gint; x_3: Gint; y_3: Gint)  {.importc:"clutter_path_add_curve_to", libclutter.}
proc clutter_path_add_line_to*(path: ptr ClutterPath; x: Gint; y: Gint)  {.importc:"clutter_path_add_line_to", libclutter.}
proc clutter_path_add_move_to*(path: ptr ClutterPath; x: Gint; y: Gint)  {.importc:"clutter_path_add_move_to", libclutter.}
proc clutter_path_add_node*(path: ptr ClutterPath; node: ptr ClutterPathNode)  {.importc:"clutter_path_add_node", libclutter.}
proc clutter_path_add_rel_curve_to*(path: ptr ClutterPath; x_1: Gint; y_1: Gint; x_2: Gint; y_2: Gint; x_3: Gint; y_3: Gint)  {.importc:"clutter_path_add_rel_curve_to", libclutter.}
proc clutter_path_add_rel_line_to*(path: ptr ClutterPath; x: Gint; y: Gint)  {.importc:"clutter_path_add_rel_line_to", libclutter.}
proc clutter_path_add_rel_move_to*(path: ptr ClutterPath; x: Gint; y: Gint)  {.importc:"clutter_path_add_rel_move_to", libclutter.}
proc clutter_path_add_string*(path: ptr ClutterPath; str: ptr Gchar): Gboolean  {.importc:"clutter_path_add_string", libclutter.}
proc clutter_path_clear*(path: ptr ClutterPath)  {.importc:"clutter_path_clear", libclutter.}
proc clutter_path_constraint_get_offset*(constraint: ptr ClutterPathConstraint): Gfloat  {.importc:"clutter_path_constraint_get_offset", libclutter.}
proc clutter_path_constraint_get_path*(constraint: ptr ClutterPathConstraint): ptr ClutterPath  {.importc:"clutter_path_constraint_get_path", libclutter.}
proc clutter_path_constraint_get_type*(): GType  {.importc:"clutter_path_constraint_get_type", libclutter.}
proc clutter_path_constraint_new*(path: ptr ClutterPath; offset: Gfloat): ptr ClutterConstraint  {.importc:"clutter_path_constraint_new", libclutter.}
proc clutter_path_constraint_set_offset*(constraint: ptr ClutterPathConstraint; offset: Gfloat)  {.importc:"clutter_path_constraint_set_offset", libclutter.}
proc clutter_path_constraint_set_path*(constraint: ptr ClutterPathConstraint; path: ptr ClutterPath)  {.importc:"clutter_path_constraint_set_path", libclutter.}
proc clutter_path_foreach*(path: ptr ClutterPath; callback: ClutterPathCallback; user_data: Gpointer)  {.importc:"clutter_path_foreach", libclutter.}
proc clutter_path_get_description*(path: ptr ClutterPath): ptr Gchar  {.importc:"clutter_path_get_description", libclutter.}
proc clutter_path_get_length*(path: ptr ClutterPath): Guint  {.importc:"clutter_path_get_length", libclutter.}
proc clutter_path_get_n_nodes*(path: ptr ClutterPath): Guint  {.importc:"clutter_path_get_n_nodes", libclutter.}
proc clutter_path_get_node*(path: ptr ClutterPath; index: Guint; node: ptr ClutterPathNode)  {.importc:"clutter_path_get_node", libclutter.}
proc clutter_path_get_nodes*(path: ptr ClutterPath): ptr GSList  {.importc:"clutter_path_get_nodes", libclutter.}
proc clutter_path_get_position*(path: ptr ClutterPath; progress: Gdouble; position: ptr ClutterKnot): Guint  {.importc:"clutter_path_get_position", libclutter.}
proc clutter_path_get_type*(): GType  {.importc:"clutter_path_get_type", libclutter.}
proc clutter_path_insert_node*(path: ptr ClutterPath; index: Gint; node: ptr ClutterPathNode)  {.importc:"clutter_path_insert_node", libclutter.}
proc clutter_path_new*(): ptr ClutterPath  {.importc:"clutter_path_new", libclutter.}
proc clutter_path_new_with_description*(desc: ptr Gchar): ptr ClutterPath  {.importc:"clutter_path_new_with_description", libclutter.}
proc clutter_path_node_copy*(node: ptr ClutterPathNode): ptr ClutterPathNode  {.importc:"clutter_path_node_copy", libclutter.}
proc clutter_path_node_equal*(node_a: ptr ClutterPathNode; node_b: ptr ClutterPathNode): Gboolean  {.importc:"clutter_path_node_equal", libclutter.}
proc clutter_path_node_free*(node: ptr ClutterPathNode)  {.importc:"clutter_path_node_free", libclutter.}
proc clutter_path_node_get_type*(): GType  {.importc:"clutter_path_node_get_type", libclutter.}
proc clutter_path_remove_node*(path: ptr ClutterPath; index: Guint)  {.importc:"clutter_path_remove_node", libclutter.}
proc clutter_path_replace_node*(path: ptr ClutterPath; index: Guint; node: ptr ClutterPathNode)  {.importc:"clutter_path_replace_node", libclutter.}
proc clutter_path_set_description*(path: ptr ClutterPath; str: ptr Gchar): Gboolean  {.importc:"clutter_path_set_description", libclutter.}
proc clutter_path_to_cairo_path*(path: ptr ClutterPath; cr: cairo.Context)  {.importc:"clutter_path_to_cairo_path", libclutter.}
proc clutter_perspective_get_type*(): GType  {.importc:"clutter_perspective_get_type", libclutter.}
proc clutter_pipeline_node_get_type*(): GType  {.importc:"clutter_pipeline_node_get_type", libclutter.}
proc clutter_pixel_to_id*(pixel: array[4, Guchar]): Guint  {.importc:"clutter_pixel_to_id", libclutter.}
proc clutter_point_alloc*(): ptr ClutterPoint  {.importc:"clutter_point_alloc", libclutter.}
proc clutter_point_copy*(point: ptr ClutterPoint): ptr ClutterPoint  {.importc:"clutter_point_copy", libclutter.}
proc clutter_point_distance*(a: ptr ClutterPoint; b: ptr ClutterPoint; x_distance: ptr cfloat; y_distance: ptr cfloat): cfloat  {.importc:"clutter_point_distance", libclutter.}
proc clutter_point_equals*(a: ptr ClutterPoint; b: ptr ClutterPoint): Gboolean  {.importc:"clutter_point_equals", libclutter.}
proc clutter_point_free*(point: ptr ClutterPoint)  {.importc:"clutter_point_free", libclutter.}
proc clutter_point_get_type*(): GType  {.importc:"clutter_point_get_type", libclutter.}
proc clutter_point_init*(point: ptr ClutterPoint; x: cfloat; y: cfloat): ptr ClutterPoint  {.importc:"clutter_point_init", libclutter.}
proc clutter_point_zero*(): ptr ClutterPoint  {.importc:"clutter_point_zero", libclutter.}
proc clutter_property_transition_get_property_name*(transition: ptr ClutterPropertyTransition): cstring  {.importc:"clutter_property_transition_get_property_name", libclutter.}
proc clutter_property_transition_get_type*(): GType  {.importc:"clutter_property_transition_get_type", libclutter.}
proc clutter_property_transition_new*(property_name: cstring): ptr ClutterTransition  {.importc:"clutter_property_transition_new", libclutter.}
proc clutter_property_transition_set_property_name*(transition: ptr ClutterPropertyTransition; property_name: cstring)  {.importc:"clutter_property_transition_set_property_name", libclutter.}
proc clutter_rect_alloc*(): ptr ClutterRect  {.importc:"clutter_rect_alloc", libclutter.}
proc clutter_rect_clamp_to_pixel*(rect: ptr ClutterRect)  {.importc:"clutter_rect_clamp_to_pixel", libclutter.}
proc clutter_rect_contains_point*(rect: ptr ClutterRect; point: ptr ClutterPoint): Gboolean  {.importc:"clutter_rect_contains_point", libclutter.}
proc clutter_rect_contains_rect*(a: ptr ClutterRect; b: ptr ClutterRect): Gboolean  {.importc:"clutter_rect_contains_rect", libclutter.}
proc clutter_rect_copy*(rect: ptr ClutterRect): ptr ClutterRect  {.importc:"clutter_rect_copy", libclutter.}
proc clutter_rect_equals*(a: ptr ClutterRect; b: ptr ClutterRect): Gboolean  {.importc:"clutter_rect_equals", libclutter.}
proc clutter_rect_free*(rect: ptr ClutterRect)  {.importc:"clutter_rect_free", libclutter.}
proc clutter_rect_get_center*(rect: ptr ClutterRect; center: ptr ClutterPoint)  {.importc:"clutter_rect_get_center", libclutter.}
proc clutter_rect_get_height*(rect: ptr ClutterRect): cfloat  {.importc:"clutter_rect_get_height", libclutter.}
proc clutter_rect_get_type*(): GType  {.importc:"clutter_rect_get_type", libclutter.}
proc clutter_rect_get_width*(rect: ptr ClutterRect): cfloat  {.importc:"clutter_rect_get_width", libclutter.}
proc clutter_rect_get_x*(rect: ptr ClutterRect): cfloat  {.importc:"clutter_rect_get_x", libclutter.}
proc clutter_rect_get_y*(rect: ptr ClutterRect): cfloat  {.importc:"clutter_rect_get_y", libclutter.}
proc clutter_rect_init*(rect: ptr ClutterRect; x: cfloat; y: cfloat; width: cfloat; height: cfloat): ptr ClutterRect  {.importc:"clutter_rect_init", libclutter.}
proc clutter_rect_inset*(rect: ptr ClutterRect; d_x: cfloat; d_y: cfloat)  {.importc:"clutter_rect_inset", libclutter.}
proc clutter_rect_intersection*(a: ptr ClutterRect; b: ptr ClutterRect; res: ptr ClutterRect): Gboolean  {.importc:"clutter_rect_intersection", libclutter.}
proc clutter_rect_normalize*(rect: ptr ClutterRect): ptr ClutterRect  {.importc:"clutter_rect_normalize", libclutter.}
proc clutter_rect_offset*(rect: ptr ClutterRect; d_x: cfloat; d_y: cfloat)  {.importc:"clutter_rect_offset", libclutter.}
proc clutter_rect_union*(a: ptr ClutterRect; b: ptr ClutterRect; res: ptr ClutterRect)  {.importc:"clutter_rect_union", libclutter.}
proc clutter_rect_zero*(): ptr ClutterRect  {.importc:"clutter_rect_zero", libclutter.}
proc clutter_rotate_action_get_type*(): GType  {.importc:"clutter_rotate_action_get_type", libclutter.}
proc clutter_rotate_action_new*(): ptr ClutterAction  {.importc:"clutter_rotate_action_new", libclutter.}
proc clutter_run_progress_function*(gtype: GType; initial: ptr GValue; final: ptr GValue; progress: Gdouble; retval: ptr GValue): Gboolean  {.importc:"clutter_run_progress_function", libclutter.}
proc clutter_run_repaint_functions*(flags: ClutterRepaintFlags)  {.importc:"clutter_run_repaint_functions", libclutter.}
proc clutter_script_add_search_paths*(script: ptr ClutterScript; paths: ptr ptr Gchar; n_paths: Gsize)  {.importc:"clutter_script_add_search_paths", libclutter.}
proc clutter_script_add_states*(script: ptr ClutterScript; name: ptr Gchar; state: ptr ClutterState)  {.importc:"clutter_script_add_states", libclutter.}
proc clutter_script_connect_signals*(script: ptr ClutterScript; user_data: Gpointer)  {.importc:"clutter_script_connect_signals", libclutter.}
proc clutter_script_connect_signals_full*(script: ptr ClutterScript; `func`: ClutterScriptConnectFunc; user_data: Gpointer)  {.importc:"clutter_script_connect_signals_full", libclutter.}
proc clutter_script_ensure_objects*(script: ptr ClutterScript)  {.importc:"clutter_script_ensure_objects", libclutter.}
proc clutter_script_error_quark*(): GQuark  {.importc:"clutter_script_error_quark", libclutter.}
proc clutter_script_get_object*(script: ptr ClutterScript; name: ptr Gchar): ptr GObject  {.importc:"clutter_script_get_object", libclutter.}
proc clutter_script_get_objects*(script: ptr ClutterScript; first_name: ptr Gchar): Gint  {.varargs, importc:"", libclutter.}  
proc clutter_script_get_states*(script: ptr ClutterScript; name: ptr Gchar): ptr ClutterState  {.importc:"clutter_script_get_states", libclutter.}
proc clutter_script_get_translation_domain*(script: ptr ClutterScript): ptr Gchar  {.importc:"clutter_script_get_translation_domain", libclutter.}
proc clutter_script_get_type*(): GType  {.importc:"clutter_script_get_type", libclutter.}
proc clutter_script_get_type_from_name*(script: ptr ClutterScript; type_name: ptr Gchar): GType  {.importc:"clutter_script_get_type_from_name", libclutter.}
proc clutter_script_list_objects*(script: ptr ClutterScript): ptr GList  {.importc:"clutter_script_list_objects", libclutter.}
proc clutter_script_load_from_data*(script: ptr ClutterScript; data: ptr Gchar; length: Gssize; error: ptr ptr GError): Guint  {.importc:"clutter_script_load_from_data", libclutter.}
proc clutter_script_load_from_file*(script: ptr ClutterScript; filename: ptr Gchar; error: ptr ptr GError): Guint  {.importc:"clutter_script_load_from_file", libclutter.}
proc clutter_script_load_from_resource*(script: ptr ClutterScript; resource_path: ptr Gchar; error: ptr ptr GError): Guint  {.importc:"clutter_script_load_from_resource", libclutter.}
proc clutter_script_lookup_filename*(script: ptr ClutterScript; filename: ptr Gchar): ptr Gchar  {.importc:"clutter_script_lookup_filename", libclutter.}
proc clutter_script_new*(): ptr ClutterScript  {.importc:"clutter_script_new", libclutter.}
proc clutter_script_set_translation_domain*(script: ptr ClutterScript; domain: ptr Gchar)  {.importc:"clutter_script_set_translation_domain", libclutter.}
proc clutter_script_unmerge_objects*(script: ptr ClutterScript; merge_id: Guint)  {.importc:"clutter_script_unmerge_objects", libclutter.}
proc clutter_scriptable_get_id*(scriptable: ptr ClutterScriptable): ptr Gchar  {.importc:"clutter_scriptable_get_id", libclutter.}
proc clutter_scriptable_get_type*(): GType  {.importc:"clutter_scriptable_get_type", libclutter.}
proc clutter_scriptable_parse_custom_node*(scriptable: ptr ClutterScriptable; script: ptr ClutterScript; value: ptr GValue; name: ptr Gchar; node: JsonNode): Gboolean  {.importc:"clutter_scriptable_parse_custom_node", libclutter.}
proc clutter_scriptable_set_custom_property*(scriptable: ptr ClutterScriptable; script: ptr ClutterScript; name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_scriptable_set_custom_property", libclutter.}
proc clutter_scriptable_set_id*(scriptable: ptr ClutterScriptable; id: ptr Gchar)  {.importc:"clutter_scriptable_set_id", libclutter.}
proc clutter_scroll_actor_get_scroll_mode*(actor: ptr ClutterScrollActor): ClutterScrollMode  {.importc:"clutter_scroll_actor_get_scroll_mode", libclutter.}
proc clutter_scroll_actor_get_type*(): GType  {.importc:"clutter_scroll_actor_get_type", libclutter.}
proc clutter_scroll_actor_new*(): ptr ClutterActor  {.importc:"clutter_scroll_actor_new", libclutter.}
proc clutter_scroll_actor_scroll_to_point*(actor: ptr ClutterScrollActor; point: ptr ClutterPoint)  {.importc:"clutter_scroll_actor_scroll_to_point", libclutter.}
proc clutter_scroll_actor_scroll_to_rect*(actor: ptr ClutterScrollActor; rect: ptr ClutterRect)  {.importc:"clutter_scroll_actor_scroll_to_rect", libclutter.}
proc clutter_scroll_actor_set_scroll_mode*(actor: ptr ClutterScrollActor; mode: ClutterScrollMode)  {.importc:"clutter_scroll_actor_set_scroll_mode", libclutter.}
proc clutter_set_sync_to_vblank*(sync_to_vblank: Gboolean)  {.importc:"clutter_set_sync_to_vblank", libclutter.}
proc clutter_set_windowing_backend*(backend_type: cstring)  {.importc:"clutter_set_windowing_backend", libclutter.}
proc clutter_settings_get_default*(): ptr ClutterSettings  {.importc:"clutter_settings_get_default", libclutter.}
proc clutter_settings_get_type*(): GType  {.importc:"clutter_settings_get_type", libclutter.}
proc clutter_settings_set_property_internal*(settings: ptr ClutterSettings; property: cstring; value: ptr GValue)  {.importc:"clutter_settings_set_property_internal", libclutter.}
proc clutter_shader_effect_get_program*(effect: ptr ClutterShaderEffect): CoglHandle  {.importc:"clutter_shader_effect_get_program", libclutter.}
proc clutter_shader_effect_get_shader*(effect: ptr ClutterShaderEffect): CoglHandle  {.importc:"clutter_shader_effect_get_shader", libclutter.}
proc clutter_shader_effect_get_type*(): GType  {.importc:"clutter_shader_effect_get_type", libclutter.}
proc clutter_shader_effect_new*(shader_type: ClutterShaderType): ptr ClutterEffect  {.importc:"clutter_shader_effect_new", libclutter.}
proc clutter_shader_effect_set_shader_source*(effect: ptr ClutterShaderEffect; source: ptr Gchar): Gboolean  {.importc:"clutter_shader_effect_set_shader_source", libclutter.}
proc clutter_shader_effect_set_uniform*(effect: ptr ClutterShaderEffect; name: ptr Gchar; gtype: GType; n_values: Gsize)  {.varargs, importc:"", libclutter.}  
proc clutter_shader_effect_set_uniform_value*(effect: ptr ClutterShaderEffect; name: ptr Gchar; value: ptr GValue)  {.importc:"clutter_shader_effect_set_uniform_value", libclutter.}
proc clutter_shader_float_get_type*(): GType  {.importc:"clutter_shader_float_get_type", libclutter.}
proc clutter_shader_int_get_type*(): GType  {.importc:"clutter_shader_int_get_type", libclutter.}
proc clutter_shader_matrix_get_type*(): GType  {.importc:"clutter_shader_matrix_get_type", libclutter.}
proc clutter_size_alloc*(): ptr ClutterSize  {.importc:"clutter_size_alloc", libclutter.}
proc clutter_size_copy*(size: ptr ClutterSize): ptr ClutterSize  {.importc:"clutter_size_copy", libclutter.}
proc clutter_size_equals*(a: ptr ClutterSize; b: ptr ClutterSize): Gboolean  {.importc:"clutter_size_equals", libclutter.}
proc clutter_size_free*(size: ptr ClutterSize)  {.importc:"clutter_size_free", libclutter.}
proc clutter_size_get_type*(): GType  {.importc:"clutter_size_get_type", libclutter.}
proc clutter_size_init*(size: ptr ClutterSize; width: cfloat; height: cfloat): ptr ClutterSize  {.importc:"clutter_size_init", libclutter.}
proc clutter_snap_constraint_get_edges*(constraint: ptr ClutterSnapConstraint; from_edge: ptr ClutterSnapEdge; to_edge: ptr ClutterSnapEdge)  {.importc:"clutter_snap_constraint_get_edges", libclutter.}
proc clutter_snap_constraint_get_offset*(constraint: ptr ClutterSnapConstraint): Gfloat  {.importc:"clutter_snap_constraint_get_offset", libclutter.}
proc clutter_snap_constraint_get_source*(constraint: ptr ClutterSnapConstraint): ptr ClutterActor  {.importc:"clutter_snap_constraint_get_source", libclutter.}
proc clutter_snap_constraint_get_type*(): GType  {.importc:"clutter_snap_constraint_get_type", libclutter.}
proc clutter_snap_constraint_new*(source: ptr ClutterActor; from_edge: ClutterSnapEdge; to_edge: ClutterSnapEdge; offset: Gfloat): ptr ClutterConstraint  {.importc:"clutter_snap_constraint_new", libclutter.}
proc clutter_snap_constraint_set_edges*(constraint: ptr ClutterSnapConstraint; from_edge: ClutterSnapEdge; to_edge: ClutterSnapEdge)  {.importc:"clutter_snap_constraint_set_edges", libclutter.}
proc clutter_snap_constraint_set_offset*(constraint: ptr ClutterSnapConstraint; offset: Gfloat)  {.importc:"clutter_snap_constraint_set_offset", libclutter.}
proc clutter_snap_constraint_set_source*(constraint: ptr ClutterSnapConstraint; source: ptr ClutterActor)  {.importc:"clutter_snap_constraint_set_source", libclutter.}
proc clutter_stage_ensure_current*(stage: ptr ClutterStage)  {.importc:"clutter_stage_ensure_current", libclutter.}
proc clutter_stage_ensure_redraw*(stage: ptr ClutterStage)  {.importc:"clutter_stage_ensure_redraw", libclutter.}
proc clutter_stage_ensure_viewport*(stage: ptr ClutterStage)  {.importc:"clutter_stage_ensure_viewport", libclutter.}
proc clutter_stage_event*(stage: ptr ClutterStage; event: ptr ClutterEvent): Gboolean  {.importc:"clutter_stage_event", libclutter.}
proc clutter_stage_get_accept_focus*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_accept_focus", libclutter.}
proc clutter_stage_get_actor_at_pos*(stage: ptr ClutterStage; pick_mode: ClutterPickMode; x: Gint; y: Gint): ptr ClutterActor  {.importc:"clutter_stage_get_actor_at_pos", libclutter.}
proc clutter_stage_get_fullscreen*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_fullscreen", libclutter.}
proc clutter_stage_get_key_focus*(stage: ptr ClutterStage): ptr ClutterActor  {.importc:"clutter_stage_get_key_focus", libclutter.}
proc clutter_stage_get_minimum_size*(stage: ptr ClutterStage; width: ptr Guint; height: ptr Guint)  {.importc:"clutter_stage_get_minimum_size", libclutter.}
proc clutter_stage_get_motion_events_enabled*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_motion_events_enabled", libclutter.}
proc clutter_stage_get_no_clear_hint*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_no_clear_hint", libclutter.}
proc clutter_stage_get_perspective*(stage: ptr ClutterStage; perspective: ptr ClutterPerspective)  {.importc:"clutter_stage_get_perspective", libclutter.}
proc clutter_stage_get_redraw_clip_bounds*(stage: ptr ClutterStage; clip: cairo.RectangleInt)  {.importc:"clutter_stage_get_redraw_clip_bounds", libclutter.}
proc clutter_stage_get_throttle_motion_events*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_throttle_motion_events", libclutter.}
proc clutter_stage_get_title*(stage: ptr ClutterStage): ptr Gchar  {.importc:"clutter_stage_get_title", libclutter.}
proc clutter_stage_get_type*(): GType  {.importc:"clutter_stage_get_type", libclutter.}
proc clutter_stage_get_use_alpha*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_use_alpha", libclutter.}
proc clutter_stage_get_user_resizable*(stage: ptr ClutterStage): Gboolean  {.importc:"clutter_stage_get_user_resizable", libclutter.}
proc clutter_stage_hide_cursor*(stage: ptr ClutterStage)  {.importc:"clutter_stage_hide_cursor", libclutter.}
proc clutter_stage_manager_get_default*(): ptr ClutterStageManager  {.importc:"clutter_stage_manager_get_default", libclutter.}
proc clutter_stage_manager_get_default_stage*(stage_manager: ptr ClutterStageManager): ptr ClutterStage  {.importc:"clutter_stage_manager_get_default_stage", libclutter.}
proc clutter_stage_manager_get_type*(): GType  {.importc:"clutter_stage_manager_get_type", libclutter.}
proc clutter_stage_manager_list_stages*(stage_manager: ptr ClutterStageManager): ptr GSList  {.importc:"clutter_stage_manager_list_stages", libclutter.}
proc clutter_stage_manager_peek_stages*(stage_manager: ptr ClutterStageManager): ptr GSList  {.importc:"clutter_stage_manager_peek_stages", libclutter.}
proc clutter_stage_new*(): ptr ClutterActor  {.importc:"clutter_stage_new", libclutter.}
proc clutter_stage_read_pixels*(stage: ptr ClutterStage; x: Gint; y: Gint; width: Gint; height: Gint): ptr Guchar  {.importc:"clutter_stage_read_pixels", libclutter.}
proc clutter_stage_set_accept_focus*(stage: ptr ClutterStage; accept_focus: Gboolean)  {.importc:"clutter_stage_set_accept_focus", libclutter.}
proc clutter_stage_set_fullscreen*(stage: ptr ClutterStage; fullscreen: Gboolean)  {.importc:"clutter_stage_set_fullscreen", libclutter.}
proc clutter_stage_set_key_focus*(stage: ptr ClutterStage; actor: ptr ClutterActor)  {.importc:"clutter_stage_set_key_focus", libclutter.}
proc clutter_stage_set_minimum_size*(stage: ptr ClutterStage; width: Guint; height: Guint)  {.importc:"clutter_stage_set_minimum_size", libclutter.}
proc clutter_stage_set_motion_events_enabled*(stage: ptr ClutterStage; enabled: Gboolean)  {.importc:"clutter_stage_set_motion_events_enabled", libclutter.}
proc clutter_stage_set_no_clear_hint*(stage: ptr ClutterStage; no_clear: Gboolean)  {.importc:"clutter_stage_set_no_clear_hint", libclutter.}
proc clutter_stage_set_perspective*(stage: ptr ClutterStage; perspective: ptr ClutterPerspective)  {.importc:"clutter_stage_set_perspective", libclutter.}
proc clutter_stage_set_throttle_motion_events*(stage: ptr ClutterStage; throttle: Gboolean)  {.importc:"clutter_stage_set_throttle_motion_events", libclutter.}
proc clutter_stage_set_title*(stage: ptr ClutterStage; title: ptr Gchar)  {.importc:"clutter_stage_set_title", libclutter.}
proc clutter_stage_set_use_alpha*(stage: ptr ClutterStage; use_alpha: Gboolean)  {.importc:"clutter_stage_set_use_alpha", libclutter.}
proc clutter_stage_set_user_resizable*(stage: ptr ClutterStage; resizable: Gboolean)  {.importc:"clutter_stage_set_user_resizable", libclutter.}
proc clutter_stage_show_cursor*(stage: ptr ClutterStage)  {.importc:"clutter_stage_show_cursor", libclutter.}
proc clutter_stage_window_add_redraw_clip*(window: ptr ClutterStageWindow; stage_clip: cairo.RectangleInt)  {.importc:"clutter_stage_window_add_redraw_clip", libclutter.}
proc clutter_stage_window_can_clip_redraws*(window: ptr ClutterStageWindow): Gboolean  {.importc:"clutter_stage_window_can_clip_redraws", libclutter.}
proc clutter_stage_window_clear_update_time*(window: ptr ClutterStageWindow)  {.importc:"clutter_stage_window_clear_update_time", libclutter.}
proc clutter_stage_window_dirty_back_buffer*(window: ptr ClutterStageWindow)  {.importc:"clutter_stage_window_dirty_back_buffer", libclutter.}
proc clutter_stage_window_get_active_framebuffer*(window: ptr ClutterStageWindow): CoglFramebuffer  {.importc:"clutter_stage_window_get_active_framebuffer", libclutter.}
proc clutter_stage_window_get_dirty_pixel*(window: ptr ClutterStageWindow; x: ptr cint; y: ptr cint)  {.importc:"clutter_stage_window_get_dirty_pixel", libclutter.}
proc clutter_stage_window_get_geometry*(window: ptr ClutterStageWindow; geometry: cairo.RectangleInt)  {.importc:"clutter_stage_window_get_geometry", libclutter.}
proc clutter_stage_window_get_redraw_clip_bounds*(window: ptr ClutterStageWindow; clip: cairo.RectangleInt): Gboolean  {.importc:"clutter_stage_window_get_redraw_clip_bounds", libclutter.}
proc clutter_stage_window_get_scale_factor*(window: ptr ClutterStageWindow): cint  {.importc:"clutter_stage_window_get_scale_factor", libclutter.}
proc clutter_stage_window_get_type*(): GType  {.importc:"clutter_stage_window_get_type", libclutter.}
proc clutter_stage_window_get_update_time*(window: ptr ClutterStageWindow): int64  {.importc:"clutter_stage_window_get_update_time", libclutter.}
proc clutter_stage_window_get_wrapper*(window: ptr ClutterStageWindow): ptr ClutterActor  {.importc:"clutter_stage_window_get_wrapper", libclutter.}
proc clutter_stage_window_has_redraw_clips*(window: ptr ClutterStageWindow): Gboolean  {.importc:"clutter_stage_window_has_redraw_clips", libclutter.}
proc clutter_stage_window_hide*(window: ptr ClutterStageWindow)  {.importc:"clutter_stage_window_hide", libclutter.}
proc clutter_stage_window_ignoring_redraw_clips*(window: ptr ClutterStageWindow): Gboolean  {.importc:"clutter_stage_window_ignoring_redraw_clips", libclutter.}
proc clutter_stage_window_realize*(window: ptr ClutterStageWindow): Gboolean  {.importc:"clutter_stage_window_realize", libclutter.}
proc clutter_stage_window_redraw*(window: ptr ClutterStageWindow)  {.importc:"clutter_stage_window_redraw", libclutter.}
proc clutter_stage_window_resize*(window: ptr ClutterStageWindow; width: Gint; height: Gint)  {.importc:"clutter_stage_window_resize", libclutter.}
proc clutter_stage_window_schedule_update*(window: ptr ClutterStageWindow; sync_delay: cint)  {.importc:"clutter_stage_window_schedule_update", libclutter.}
proc clutter_stage_window_set_accept_focus*(window: ptr ClutterStageWindow; accept_focus: Gboolean)  {.importc:"clutter_stage_window_set_accept_focus", libclutter.}
proc clutter_stage_window_set_cursor_visible*(window: ptr ClutterStageWindow; is_visible: Gboolean)  {.importc:"clutter_stage_window_set_cursor_visible", libclutter.}
proc clutter_stage_window_set_fullscreen*(window: ptr ClutterStageWindow; is_fullscreen: Gboolean)  {.importc:"clutter_stage_window_set_fullscreen", libclutter.}
proc clutter_stage_window_set_scale_factor*(window: ptr ClutterStageWindow; factor: cint)  {.importc:"clutter_stage_window_set_scale_factor", libclutter.}
proc clutter_stage_window_set_title*(window: ptr ClutterStageWindow; title: ptr Gchar)  {.importc:"clutter_stage_window_set_title", libclutter.}
proc clutter_stage_window_set_user_resizable*(window: ptr ClutterStageWindow; is_resizable: Gboolean)  {.importc:"clutter_stage_window_set_user_resizable", libclutter.}
proc clutter_stage_window_show*(window: ptr ClutterStageWindow; do_raise: Gboolean)  {.importc:"clutter_stage_window_show", libclutter.}
proc clutter_stage_window_unrealize*(window: ptr ClutterStageWindow)  {.importc:"clutter_stage_window_unrealize", libclutter.}
proc clutter_swipe_action_get_type*(): GType  {.importc:"clutter_swipe_action_get_type", libclutter.}
proc clutter_swipe_action_new*(): ptr ClutterAction  {.importc:"clutter_swipe_action_new", libclutter.}
proc clutter_tap_action_get_type*(): GType  {.importc:"clutter_tap_action_get_type", libclutter.}
proc clutter_tap_action_new*(): ptr ClutterAction  {.importc:"clutter_tap_action_new", libclutter.}
proc clutter_test_add*(test_path: cstring; test_func: GTestFunc)  {.importc:"clutter_test_add", libclutter.}
proc clutter_test_add_data*(test_path: cstring; test_func: GTestDataFunc; test_data: Gpointer)  {.importc:"clutter_test_add_data", libclutter.}
proc clutter_test_add_data_full*(test_path: cstring; test_func: GTestDataFunc; test_data: Gpointer; test_notify: GDestroyNotify)  {.importc:"clutter_test_add_data_full", libclutter.}
proc clutter_test_check_actor_at_point*(stage: ptr ClutterActor; point: ptr ClutterPoint; actor: ptr ClutterActor; result: ptr ptr ClutterActor): Gboolean  {.importc:"clutter_test_check_actor_at_point", libclutter.}
proc clutter_test_check_color_at_point*(stage: ptr ClutterActor; point: ptr ClutterPoint; color: ptr ClutterColor; result: ptr ClutterColor): Gboolean  {.importc:"clutter_test_check_color_at_point", libclutter.}
proc clutter_test_get_stage*(): ptr ClutterActor  {.importc:"clutter_test_get_stage", libclutter.}
proc clutter_test_init*(argc: ptr cint; argv: ptr cstringArray)  {.importc:"clutter_test_init", libclutter.}
proc clutter_test_run*(): cint  {.importc:"clutter_test_run", libclutter.}
proc clutter_text_activate*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_activate", libclutter.}
proc clutter_text_buffer_delete_text*(buffer: ptr ClutterTextBuffer; position: Guint; n_chars: Gint): Guint  {.importc:"clutter_text_buffer_delete_text", libclutter.}
proc clutter_text_buffer_emit_deleted_text*(buffer: ptr ClutterTextBuffer; position: Guint; n_chars: Guint)  {.importc:"clutter_text_buffer_emit_deleted_text", libclutter.}
proc clutter_text_buffer_emit_inserted_text*(buffer: ptr ClutterTextBuffer; position: Guint; chars: ptr Gchar; n_chars: Guint)  {.importc:"clutter_text_buffer_emit_inserted_text", libclutter.}
proc clutter_text_buffer_get_bytes*(buffer: ptr ClutterTextBuffer): Gsize  {.importc:"clutter_text_buffer_get_bytes", libclutter.}
proc clutter_text_buffer_get_length*(buffer: ptr ClutterTextBuffer): Guint  {.importc:"clutter_text_buffer_get_length", libclutter.}
proc clutter_text_buffer_get_max_length*(buffer: ptr ClutterTextBuffer): Gint  {.importc:"clutter_text_buffer_get_max_length", libclutter.}
proc clutter_text_buffer_get_text*(buffer: ptr ClutterTextBuffer): ptr Gchar  {.importc:"clutter_text_buffer_get_text", libclutter.}
proc clutter_text_buffer_get_type*(): GType  {.importc:"clutter_text_buffer_get_type", libclutter.}
proc clutter_text_buffer_insert_text*(buffer: ptr ClutterTextBuffer; position: Guint; chars: ptr Gchar; n_chars: Gint): Guint  {.importc:"clutter_text_buffer_insert_text", libclutter.}
proc clutter_text_buffer_new*(): ptr ClutterTextBuffer  {.importc:"clutter_text_buffer_new", libclutter.}
proc clutter_text_buffer_new_with_text*(text: ptr Gchar; text_len: Gssize): ptr ClutterTextBuffer  {.importc:"clutter_text_buffer_new_with_text", libclutter.}
proc clutter_text_buffer_set_max_length*(buffer: ptr ClutterTextBuffer; max_length: Gint)  {.importc:"clutter_text_buffer_set_max_length", libclutter.}
proc clutter_text_buffer_set_text*(buffer: ptr ClutterTextBuffer; chars: ptr Gchar; n_chars: Gint)  {.importc:"clutter_text_buffer_set_text", libclutter.}
proc clutter_text_coords_to_position*(self: ptr ClutterText; x: Gfloat; y: Gfloat): Gint  {.importc:"clutter_text_coords_to_position", libclutter.}
proc clutter_text_delete_chars*(self: ptr ClutterText; n_chars: Guint)  {.importc:"clutter_text_delete_chars", libclutter.}
proc clutter_text_delete_selection*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_delete_selection", libclutter.}
proc clutter_text_delete_text*(self: ptr ClutterText; start_pos: Gssize; end_pos: Gssize)  {.importc:"clutter_text_delete_text", libclutter.}
proc clutter_text_get_activatable*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_activatable", libclutter.}
proc clutter_text_get_attributes*(self: ptr ClutterText): pango.AttrList  {.importc:"clutter_text_get_attributes", libclutter.}
proc clutter_text_get_buffer*(self: ptr ClutterText): ptr ClutterTextBuffer  {.importc:"clutter_text_get_buffer", libclutter.}
proc clutter_text_get_chars*(self: ptr ClutterText; start_pos: Gssize; end_pos: Gssize): ptr Gchar  {.importc:"clutter_text_get_chars", libclutter.}
proc clutter_text_get_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_get_color", libclutter.}
proc clutter_text_get_cursor_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_get_cursor_color", libclutter.}
proc clutter_text_get_cursor_position*(self: ptr ClutterText): Gint  {.importc:"clutter_text_get_cursor_position", libclutter.}
proc clutter_text_get_cursor_rect*(self: ptr ClutterText; rect: ptr ClutterRect)  {.importc:"clutter_text_get_cursor_rect", libclutter.}
proc clutter_text_get_cursor_size*(self: ptr ClutterText): Guint  {.importc:"clutter_text_get_cursor_size", libclutter.}
proc clutter_text_get_cursor_visible*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_cursor_visible", libclutter.}
proc clutter_text_get_editable*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_editable", libclutter.}
proc clutter_text_get_ellipsize*(self: ptr ClutterText): pango.EllipsizeMode  {.importc:"clutter_text_get_ellipsize", libclutter.}
proc clutter_text_get_font_description*(self: ptr ClutterText): pango.FontDescription  {.importc:"clutter_text_get_font_description", libclutter.}
proc clutter_text_get_font_name*(self: ptr ClutterText): ptr Gchar  {.importc:"clutter_text_get_font_name", libclutter.}
proc clutter_text_get_justify*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_justify", libclutter.}
proc clutter_text_get_layout*(self: ptr ClutterText): pango.Layout  {.importc:"clutter_text_get_layout", libclutter.}
proc clutter_text_get_layout_offsets*(self: ptr ClutterText; x: ptr Gint; y: ptr Gint)  {.importc:"clutter_text_get_layout_offsets", libclutter.}
proc clutter_text_get_line_alignment*(self: ptr ClutterText): pango.Alignment  {.importc:"clutter_text_get_line_alignment", libclutter.}
proc clutter_text_get_line_wrap*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_line_wrap", libclutter.}
proc clutter_text_get_line_wrap_mode*(self: ptr ClutterText): pango.WrapMode  {.importc:"clutter_text_get_line_wrap_mode", libclutter.}
proc clutter_text_get_max_length*(self: ptr ClutterText): Gint  {.importc:"clutter_text_get_max_length", libclutter.}
proc clutter_text_get_password_char*(self: ptr ClutterText): Gunichar  {.importc:"clutter_text_get_password_char", libclutter.}
proc clutter_text_get_selectable*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_selectable", libclutter.}
proc clutter_text_get_selected_text_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_get_selected_text_color", libclutter.}
proc clutter_text_get_selection*(self: ptr ClutterText): ptr Gchar  {.importc:"clutter_text_get_selection", libclutter.}
proc clutter_text_get_selection_bound*(self: ptr ClutterText): Gint  {.importc:"clutter_text_get_selection_bound", libclutter.}
proc clutter_text_get_selection_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_get_selection_color", libclutter.}
proc clutter_text_get_single_line_mode*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_single_line_mode", libclutter.}
proc clutter_text_get_text*(self: ptr ClutterText): ptr Gchar  {.importc:"clutter_text_get_text", libclutter.}
proc clutter_text_get_type*(): GType  {.importc:"clutter_text_get_type", libclutter.}
proc clutter_text_get_use_markup*(self: ptr ClutterText): Gboolean  {.importc:"clutter_text_get_use_markup", libclutter.}
proc clutter_text_insert_text*(self: ptr ClutterText; text: ptr Gchar; position: Gssize)  {.importc:"clutter_text_insert_text", libclutter.}
proc clutter_text_insert_unichar*(self: ptr ClutterText; wc: Gunichar)  {.importc:"clutter_text_insert_unichar", libclutter.}
proc clutter_text_new*(): ptr ClutterActor  {.importc:"clutter_text_new", libclutter.}
proc clutter_text_new_full*(font_name: ptr Gchar; text: ptr Gchar; color: ptr ClutterColor): ptr ClutterActor  {.importc:"clutter_text_new_full", libclutter.}
proc clutter_text_new_with_buffer*(buffer: ptr ClutterTextBuffer): ptr ClutterActor  {.importc:"clutter_text_new_with_buffer", libclutter.}
proc clutter_text_new_with_text*(font_name: ptr Gchar; text: ptr Gchar): ptr ClutterActor  {.importc:"clutter_text_new_with_text", libclutter.}
proc clutter_text_node_get_type*(): GType  {.importc:"clutter_text_node_get_type", libclutter.}
proc clutter_text_node_new*(layout: pango.Layout; color: ptr ClutterColor): ptr ClutterPaintNode  {.importc:"clutter_text_node_new", libclutter.}
proc clutter_text_position_to_coords*(self: ptr ClutterText; position: Gint; x: ptr Gfloat; y: ptr Gfloat; line_height: ptr Gfloat): Gboolean  {.importc:"clutter_text_position_to_coords", libclutter.}
proc clutter_text_set_activatable*(self: ptr ClutterText; activatable: Gboolean)  {.importc:"clutter_text_set_activatable", libclutter.}
proc clutter_text_set_attributes*(self: ptr ClutterText; attrs: pango.AttrList)  {.importc:"clutter_text_set_attributes", libclutter.}
proc clutter_text_set_buffer*(self: ptr ClutterText; buffer: ptr ClutterTextBuffer)  {.importc:"clutter_text_set_buffer", libclutter.}
proc clutter_text_set_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_set_color", libclutter.}
proc clutter_text_set_cursor_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_set_cursor_color", libclutter.}
proc clutter_text_set_cursor_position*(self: ptr ClutterText; position: Gint)  {.importc:"clutter_text_set_cursor_position", libclutter.}
proc clutter_text_set_cursor_size*(self: ptr ClutterText; size: Gint)  {.importc:"clutter_text_set_cursor_size", libclutter.}
proc clutter_text_set_cursor_visible*(self: ptr ClutterText; cursor_visible: Gboolean)  {.importc:"clutter_text_set_cursor_visible", libclutter.}
proc clutter_text_set_editable*(self: ptr ClutterText; editable: Gboolean)  {.importc:"clutter_text_set_editable", libclutter.}
proc clutter_text_set_ellipsize*(self: ptr ClutterText; mode: pango.EllipsizeMode)  {.importc:"clutter_text_set_ellipsize", libclutter.}
proc clutter_text_set_font_description*(self: ptr ClutterText; font_desc: pango.FontDescription)  {.importc:"clutter_text_set_font_description", libclutter.}
proc clutter_text_set_font_name*(self: ptr ClutterText; font_name: ptr Gchar)  {.importc:"clutter_text_set_font_name", libclutter.}
proc clutter_text_set_justify*(self: ptr ClutterText; justify: Gboolean)  {.importc:"clutter_text_set_justify", libclutter.}
proc clutter_text_set_line_alignment*(self: ptr ClutterText; alignment: pango.Alignment)  {.importc:"clutter_text_set_line_alignment", libclutter.}
proc clutter_text_set_line_wrap*(self: ptr ClutterText; line_wrap: Gboolean)  {.importc:"clutter_text_set_line_wrap", libclutter.}
proc clutter_text_set_line_wrap_mode*(self: ptr ClutterText; wrap_mode: pango.WrapMode)  {.importc:"clutter_text_set_line_wrap_mode", libclutter.}
proc clutter_text_set_markup*(self: ptr ClutterText; markup: ptr Gchar)  {.importc:"clutter_text_set_markup", libclutter.}
proc clutter_text_set_max_length*(self: ptr ClutterText; max: Gint)  {.importc:"clutter_text_set_max_length", libclutter.}
proc clutter_text_set_password_char*(self: ptr ClutterText; wc: Gunichar)  {.importc:"clutter_text_set_password_char", libclutter.}
proc clutter_text_set_preedit_string*(self: ptr ClutterText; preedit_str: ptr Gchar; preedit_attrs: pango.AttrList; cursor_pos: Guint)  {.importc:"clutter_text_set_preedit_string", libclutter.}
proc clutter_text_set_selectable*(self: ptr ClutterText; selectable: Gboolean)  {.importc:"clutter_text_set_selectable", libclutter.}
proc clutter_text_set_selected_text_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_set_selected_text_color", libclutter.}
proc clutter_text_set_selection*(self: ptr ClutterText; start_pos: Gssize; end_pos: Gssize)  {.importc:"clutter_text_set_selection", libclutter.}
proc clutter_text_set_selection_bound*(self: ptr ClutterText; selection_bound: Gint)  {.importc:"clutter_text_set_selection_bound", libclutter.}
proc clutter_text_set_selection_color*(self: ptr ClutterText; color: ptr ClutterColor)  {.importc:"clutter_text_set_selection_color", libclutter.}
proc clutter_text_set_single_line_mode*(self: ptr ClutterText; single_line: Gboolean)  {.importc:"clutter_text_set_single_line_mode", libclutter.}
proc clutter_text_set_text*(self: ptr ClutterText; text: ptr Gchar)  {.importc:"clutter_text_set_text", libclutter.}
proc clutter_text_set_use_markup*(self: ptr ClutterText; setting: Gboolean)  {.importc:"clutter_text_set_use_markup", libclutter.}
proc clutter_texture_error_quark*(): GQuark  {.importc:"clutter_texture_error_quark", libclutter.}
proc clutter_texture_get_type*(): GType  {.importc:"clutter_texture_get_type", libclutter.}
proc clutter_texture_node_get_type*(): GType  {.importc:"clutter_texture_node_get_type", libclutter.}
proc clutter_texture_node_new*(texture: CoglTexture; color: ptr ClutterColor; min_filter: ClutterScalingFilter; mag_filter: ClutterScalingFilter): ptr ClutterPaintNode  {.importc:"clutter_texture_node_new", libclutter.}
proc clutter_threads_acquire_lock*()  {.importc:"clutter_threads_acquire_lock", libclutter.}
proc clutter_threads_add_idle*(`func`: GSourceFunc; data: Gpointer): Guint  {.importc:"clutter_threads_add_idle", libclutter.}
proc clutter_threads_add_idle_full*(priority: Gint; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): Guint  {.importc:"clutter_threads_add_idle_full", libclutter.}
proc clutter_threads_add_repaint_func*(`func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): Guint  {.importc:"clutter_threads_add_repaint_func", libclutter.}
proc clutter_threads_add_repaint_func_full*(flags: ClutterRepaintFlags; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): Guint  {.importc:"clutter_threads_add_repaint_func_full", libclutter.}
proc clutter_threads_add_timeout*(interval: Guint; `func`: GSourceFunc; data: Gpointer): Guint  {.importc:"clutter_threads_add_timeout", libclutter.}
proc clutter_threads_add_timeout_full*(priority: Gint; interval: Guint; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): Guint  {.importc:"clutter_threads_add_timeout_full", libclutter.}
proc clutter_threads_dispatch*(data: Gpointer): Gboolean  {.importc:"clutter_threads_dispatch", libclutter.}
proc clutter_threads_dispatch_free*(data: Gpointer)  {.importc:"clutter_threads_dispatch_free", libclutter.}
proc clutter_threads_release_lock*()  {.importc:"clutter_threads_release_lock", libclutter.}
proc clutter_threads_remove_repaint_func*(handle_id: Guint)  {.importc:"clutter_threads_remove_repaint_func", libclutter.}
proc clutter_threads_set_lock_functions*(enter_fn: GCallback; leave_fn: GCallback)  {.importc:"clutter_threads_set_lock_functions", libclutter.}
proc clutter_timeline_add_marker*(timeline: ptr ClutterTimeline; marker_name: ptr Gchar; progress: Gdouble)  {.importc:"clutter_timeline_add_marker", libclutter.}
proc clutter_timeline_add_marker_at_time*(timeline: ptr ClutterTimeline; marker_name: ptr Gchar; msecs: Guint)  {.importc:"clutter_timeline_add_marker_at_time", libclutter.}
proc clutter_timeline_advance*(timeline: ptr ClutterTimeline; tick_time: int64)  {.importc:"clutter_timeline_advance", libclutter.}
proc clutter_timeline_advance*(timeline: ptr ClutterTimeline; msecs: Guint)  {.importc:"clutter_timeline_advance", libclutter.}
proc clutter_timeline_advance_to_marker*(timeline: ptr ClutterTimeline; marker_name: ptr Gchar)  {.importc:"clutter_timeline_advance_to_marker", libclutter.}
proc clutter_timeline_do_tick*(timeline: ptr ClutterTimeline; tick_time: int64)  {.importc:"clutter_timeline_do_tick", libclutter.}
proc clutter_timeline_get_auto_reverse*(timeline: ptr ClutterTimeline): Gboolean  {.importc:"clutter_timeline_get_auto_reverse", libclutter.}
proc clutter_timeline_get_cubic_bezier_progress*(timeline: ptr ClutterTimeline; c_1: ptr ClutterPoint; c_2: ptr ClutterPoint): Gboolean  {.importc:"clutter_timeline_get_cubic_bezier_progress", libclutter.}
proc clutter_timeline_get_current_repeat*(timeline: ptr ClutterTimeline): Gint  {.importc:"clutter_timeline_get_current_repeat", libclutter.}
proc clutter_timeline_get_delay*(timeline: ptr ClutterTimeline): Guint  {.importc:"clutter_timeline_get_delay", libclutter.}
proc clutter_timeline_get_delta*(timeline: ptr ClutterTimeline): int64  {.importc:"clutter_timeline_get_delta", libclutter.}
proc clutter_timeline_get_delta*(timeline: ptr ClutterTimeline): Guint  {.importc:"clutter_timeline_get_delta", libclutter.}
proc clutter_timeline_get_direction*(timeline: ptr ClutterTimeline): ClutterTimelineDirection  {.importc:"clutter_timeline_get_direction", libclutter.}
proc clutter_timeline_get_duration*(timeline: ptr ClutterTimeline): Guint  {.importc:"clutter_timeline_get_duration", libclutter.}
proc clutter_timeline_get_duration_hint*(timeline: ptr ClutterTimeline): int64  {.importc:"clutter_timeline_get_duration_hint", libclutter.}
proc clutter_timeline_get_elapsed_time*(timeline: ptr ClutterTimeline): Guint  {.importc:"clutter_timeline_get_elapsed_time", libclutter.}
proc clutter_timeline_get_progress*(timeline: ptr ClutterTimeline): Gdouble  {.importc:"clutter_timeline_get_progress", libclutter.}
proc clutter_timeline_get_progress_mode*(timeline: ptr ClutterTimeline): ClutterAnimationMode  {.importc:"clutter_timeline_get_progress_mode", libclutter.}
proc clutter_timeline_get_repeat_count*(timeline: ptr ClutterTimeline): Gint  {.importc:"clutter_timeline_get_repeat_count", libclutter.}
proc clutter_timeline_get_step_progress*(timeline: ptr ClutterTimeline; n_steps: ptr Gint; step_mode: ptr ClutterStepMode): Gboolean  {.importc:"clutter_timeline_get_step_progress", libclutter.}
proc clutter_timeline_get_type*(): GType  {.importc:"clutter_timeline_get_type", libclutter.}
proc clutter_timeline_has_marker*(timeline: ptr ClutterTimeline; marker_name: ptr Gchar): Gboolean  {.importc:"clutter_timeline_has_marker", libclutter.}
proc clutter_timeline_is_playing*(timeline: ptr ClutterTimeline): Gboolean  {.importc:"clutter_timeline_is_playing", libclutter.}
proc clutter_timeline_list_markers*(timeline: ptr ClutterTimeline; msecs: Gint; n_markers: ptr Gsize): ptr ptr Gchar  {.importc:"clutter_timeline_list_markers", libclutter.}
proc clutter_timeline_new*(msecs: Guint): ptr ClutterTimeline  {.importc:"clutter_timeline_new", libclutter.}
proc clutter_timeline_pause*(timeline: ptr ClutterTimeline)  {.importc:"clutter_timeline_pause", libclutter.}
proc clutter_timeline_remove_marker*(timeline: ptr ClutterTimeline; marker_name: ptr Gchar)  {.importc:"clutter_timeline_remove_marker", libclutter.}
proc clutter_timeline_rewind*(timeline: ptr ClutterTimeline)  {.importc:"clutter_timeline_rewind", libclutter.}
proc clutter_timeline_set_auto_reverse*(timeline: ptr ClutterTimeline; reverse: Gboolean)  {.importc:"clutter_timeline_set_auto_reverse", libclutter.}
proc clutter_timeline_set_cubic_bezier_progress*(timeline: ptr ClutterTimeline; c_1: ptr ClutterPoint; c_2: ptr ClutterPoint)  {.importc:"clutter_timeline_set_cubic_bezier_progress", libclutter.}
proc clutter_timeline_set_delay*(timeline: ptr ClutterTimeline; msecs: Guint)  {.importc:"clutter_timeline_set_delay", libclutter.}
proc clutter_timeline_set_direction*(timeline: ptr ClutterTimeline; direction: ClutterTimelineDirection)  {.importc:"clutter_timeline_set_direction", libclutter.}
proc clutter_timeline_set_duration*(timeline: ptr ClutterTimeline; msecs: Guint)  {.importc:"clutter_timeline_set_duration", libclutter.}
proc clutter_timeline_set_progress_func*(timeline: ptr ClutterTimeline; `func`: ClutterTimelineProgressFunc; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_timeline_set_progress_func", libclutter.}
proc clutter_timeline_set_progress_mode*(timeline: ptr ClutterTimeline; mode: ClutterAnimationMode)  {.importc:"clutter_timeline_set_progress_mode", libclutter.}
proc clutter_timeline_set_repeat_count*(timeline: ptr ClutterTimeline; count: Gint)  {.importc:"clutter_timeline_set_repeat_count", libclutter.}
proc clutter_timeline_set_step_progress*(timeline: ptr ClutterTimeline; n_steps: Gint; step_mode: ClutterStepMode)  {.importc:"clutter_timeline_set_step_progress", libclutter.}
proc clutter_timeline_skip*(timeline: ptr ClutterTimeline; msecs: Guint)  {.importc:"clutter_timeline_skip", libclutter.}
proc clutter_timeline_start*(timeline: ptr ClutterTimeline)  {.importc:"clutter_timeline_start", libclutter.}
proc clutter_timeline_stop*(timeline: ptr ClutterTimeline)  {.importc:"clutter_timeline_stop", libclutter.}
proc clutter_transition_get_animatable*(transition: ptr ClutterTransition): ptr ClutterAnimatable  {.importc:"clutter_transition_get_animatable", libclutter.}
proc clutter_transition_get_interval*(transition: ptr ClutterTransition): ptr ClutterInterval  {.importc:"clutter_transition_get_interval", libclutter.}
proc clutter_transition_get_remove_on_complete*(transition: ptr ClutterTransition): Gboolean  {.importc:"clutter_transition_get_remove_on_complete", libclutter.}
proc clutter_transition_get_type*(): GType  {.importc:"clutter_transition_get_type", libclutter.}
proc clutter_transition_group_add_transition*(group: ptr ClutterTransitionGroup; transition: ptr ClutterTransition)  {.importc:"clutter_transition_group_add_transition", libclutter.}
proc clutter_transition_group_get_type*(): GType  {.importc:"clutter_transition_group_get_type", libclutter.}
proc clutter_transition_group_new*(): ptr ClutterTransition  {.importc:"clutter_transition_group_new", libclutter.}
proc clutter_transition_group_remove_all*(group: ptr ClutterTransitionGroup)  {.importc:"clutter_transition_group_remove_all", libclutter.}
proc clutter_transition_group_remove_transition*(group: ptr ClutterTransitionGroup; transition: ptr ClutterTransition)  {.importc:"clutter_transition_group_remove_transition", libclutter.}
proc clutter_transition_set_animatable*(transition: ptr ClutterTransition; animatable: ptr ClutterAnimatable)  {.importc:"clutter_transition_set_animatable", libclutter.}
proc clutter_transition_set_from*(transition: ptr ClutterTransition; value_type: GType)  {.varargs, importc:"", libclutter.}  
proc clutter_transition_set_from_value*(transition: ptr ClutterTransition; value: ptr GValue)  {.importc:"clutter_transition_set_from_value", libclutter.}
proc clutter_transition_set_interval*(transition: ptr ClutterTransition; interval: ptr ClutterInterval)  {.importc:"clutter_transition_set_interval", libclutter.}
proc clutter_transition_set_remove_on_complete*(transition: ptr ClutterTransition; remove_complete: Gboolean)  {.importc:"clutter_transition_set_remove_on_complete", libclutter.}
proc clutter_transition_set_to*(transition: ptr ClutterTransition; value_type: GType)  {.varargs, importc:"", libclutter.}  
proc clutter_transition_set_to_value*(transition: ptr ClutterTransition; value: ptr GValue)  {.importc:"clutter_transition_set_to_value", libclutter.}
proc clutter_ungrab_keyboard*()  {.importc:"clutter_ungrab_keyboard", libclutter.}
proc clutter_ungrab_pointer*()  {.importc:"clutter_ungrab_pointer", libclutter.}
proc clutter_unicode_to_keysym*(wc: uint32): Guint  {.importc:"clutter_unicode_to_keysym", libclutter.}
proc clutter_util_fully_transform_vertices*(modelview: CoglMatrix; projection: CoglMatrix; viewport: ptr cfloat; vertices_in: ptr ClutterVertex; vertices_out: ptr ClutterVertex; n_vertices: cint)  {.importc:"clutter_util_fully_transform_vertices", libclutter.}
proc clutter_util_matrix_decompose*(src: ptr ClutterMatrix; scale_p: ptr ClutterVertex; shear_p: array[3, cfloat]; rotate_p: ptr ClutterVertex; translate_p: ptr ClutterVertex; perspective_p: ptr ClutterVertex4): Gboolean  {.importc:"clutter_util_matrix_decompose", libclutter.}
proc clutter_util_matrix_determinant*(matrix: ptr ClutterMatrix): cfloat  {.importc:"clutter_util_matrix_determinant", libclutter.}
proc clutter_util_matrix_skew_xy*(matrix: ptr ClutterMatrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_xy", libclutter.}
proc clutter_util_matrix_skew_xz*(matrix: ptr ClutterMatrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_xz", libclutter.}
proc clutter_util_matrix_skew_yz*(matrix: ptr ClutterMatrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_yz", libclutter.}
proc clutter_util_rectangle_union*(src1: cairo.RectangleInt; src2: cairo.RectangleInt; dest: cairo.RectangleInt)  {.importc:"clutter_util_rectangle_union", libclutter.}
proc clutter_util_vertex4_interpolate*(a: ptr ClutterVertex4; b: ptr ClutterVertex4; progress: cdouble; res: ptr ClutterVertex4)  {.importc:"clutter_util_vertex4_interpolate", libclutter.}
proc clutter_value_dup_paint_node*(value: ptr GValue): Gpointer  {.importc:"clutter_value_dup_paint_node", libclutter.}
proc clutter_value_get_color*(value: ptr GValue): ptr ClutterColor  {.importc:"clutter_value_get_color", libclutter.}
proc clutter_value_get_paint_node*(value: ptr GValue): Gpointer  {.importc:"clutter_value_get_paint_node", libclutter.}
proc clutter_value_get_shader_float*(value: ptr GValue; length: ptr Gsize): ptr Gfloat  {.importc:"clutter_value_get_shader_float", libclutter.}
proc clutter_value_get_shader_int*(value: ptr GValue; length: ptr Gsize): ptr Gint  {.importc:"clutter_value_get_shader_int", libclutter.}
proc clutter_value_get_shader_matrix*(value: ptr GValue; length: ptr Gsize): ptr Gfloat  {.importc:"clutter_value_get_shader_matrix", libclutter.}
proc clutter_value_set_color*(value: ptr GValue; color: ptr ClutterColor)  {.importc:"clutter_value_set_color", libclutter.}
proc clutter_value_set_paint_node*(value: ptr GValue; node: Gpointer)  {.importc:"clutter_value_set_paint_node", libclutter.}
proc clutter_value_set_shader_float*(value: ptr GValue; size: Gint; floats: ptr Gfloat)  {.importc:"clutter_value_set_shader_float", libclutter.}
proc clutter_value_set_shader_int*(value: ptr GValue; size: Gint; ints: ptr Gint)  {.importc:"clutter_value_set_shader_int", libclutter.}
proc clutter_value_set_shader_matrix*(value: ptr GValue; size: Gint; matrix: ptr Gfloat)  {.importc:"clutter_value_set_shader_matrix", libclutter.}
proc clutter_value_take_paint_node*(value: ptr GValue; node: Gpointer)  {.importc:"clutter_value_take_paint_node", libclutter.}
proc clutter_vertex_alloc*(): ptr ClutterVertex  {.importc:"clutter_vertex_alloc", libclutter.}
proc clutter_vertex_copy*(vertex: ptr ClutterVertex): ptr ClutterVertex  {.importc:"clutter_vertex_copy", libclutter.}
proc clutter_vertex_equal*(vertex_a: ptr ClutterVertex; vertex_b: ptr ClutterVertex): Gboolean  {.importc:"clutter_vertex_equal", libclutter.}
proc clutter_vertex_free*(vertex: ptr ClutterVertex)  {.importc:"clutter_vertex_free", libclutter.}
proc clutter_vertex_get_type*(): GType  {.importc:"clutter_vertex_get_type", libclutter.}
proc clutter_vertex_init*(vertex: ptr ClutterVertex; x: Gfloat; y: Gfloat; z: Gfloat): ptr ClutterVertex  {.importc:"clutter_vertex_init", libclutter.}
proc clutter_vertex_new*(x: Gfloat; y: Gfloat; z: Gfloat): ptr ClutterVertex  {.importc:"clutter_vertex_new", libclutter.}
proc object_info_free*(data: Gpointer)  {.importc:"object_info_free", libclutter.}
proc property_info_free*(data: Gpointer)  {.importc:"property_info_free", libclutter.}