{.deadCodeElim: on.}

when defined(windows):
  const LIB_CLUTTER = "libclutter-1.0.0.dll"
elif defined(macosx):
  const LIB_CLUTTER = "libclutter-1.0.0.dylib"
else:
  const LIB_CLUTTER = "libclutter-1.0.0.so(|.0)"

{.pragma: libclutter, cdecl, dynlib: LIB_CLUTTER.}

import oldgtk3/[gobject, glib, pango, cairo, atk]
import os

const
  CLUTTER_PATH_RELATIVE*:cint = 32
  CLUTTER_PRIORITY_EVENTS* = G_PRIORITY_DEFAULT
  CLUTTER_CURRENT_TIME* = 0
  CLUTTER_EVENT_PROPAGATE* = false
  CLUTTER_EVENT_STOP* = true
  CLUTTER_BUTTON_PRIMARY* = 1
  CLUTTER_BUTTON_MIDDLE* = 2
  CLUTTER_BUTTON_SECONDARY* = 3

const
  CLUTTER_KEY_VoidSymbol* = 0x00FFFFFF
  CLUTTER_KEY_BackSpace* = 0x0000FF08
  CLUTTER_KEY_Tab* = 0x0000FF09
  CLUTTER_KEY_Linefeed* = 0x0000FF0A
  CLUTTER_KEY_Clear* = 0x0000FF0B
  CLUTTER_KEY_Return* = 0x0000FF0D
  CLUTTER_KEY_Pause* = 0x0000FF13
  CLUTTER_KEY_Scroll_Lock* = 0x0000FF14
  CLUTTER_KEY_Sys_Req* = 0x0000FF15
  CLUTTER_KEY_Escape* = 0x0000FF1B
  CLUTTER_KEY_Delete* = 0x0000FFFF
  CLUTTER_KEY_Multi_key* = 0x0000FF20
  CLUTTER_KEY_Codeinput* = 0x0000FF37
  CLUTTER_KEY_SingleCandidate* = 0x0000FF3C
  CLUTTER_KEY_MultipleCandidate* = 0x0000FF3D
  CLUTTER_KEY_PreviousCandidate* = 0x0000FF3E
  CLUTTER_KEY_Kanji* = 0x0000FF21
  CLUTTER_KEY_Muhenkan* = 0x0000FF22
  CLUTTER_KEY_Henkan_Mode* = 0x0000FF23
  CLUTTER_KEY_Henkan* = 0x0000FF23
  CLUTTER_KEY_Romaji* = 0x0000FF24
  CLUTTER_KEY_Hiragana* = 0x0000FF25
  CLUTTER_KEY_Katakana* = 0x0000FF26
  CLUTTER_KEY_Hiragana_Katakana* = 0x0000FF27
  CLUTTER_KEY_Zenkaku* = 0x0000FF28
  CLUTTER_KEY_Hankaku* = 0x0000FF29
  CLUTTER_KEY_Zenkaku_Hankaku* = 0x0000FF2A
  CLUTTER_KEY_Touroku* = 0x0000FF2B
  CLUTTER_KEY_Massyo* = 0x0000FF2C
  CLUTTER_KEY_Kana_Lock* = 0x0000FF2D
  CLUTTER_KEY_Kana_Shift* = 0x0000FF2E
  CLUTTER_KEY_Eisu_Shift* = 0x0000FF2F
  CLUTTER_KEY_Eisu_toggle* = 0x0000FF30
  CLUTTER_KEY_Kanji_Bangou* = 0x0000FF37
  CLUTTER_KEY_Zen_Koho* = 0x0000FF3D
  CLUTTER_KEY_Mae_Koho* = 0x0000FF3E
  CLUTTER_KEY_Home* = 0x0000FF50
  CLUTTER_KEY_Left* = 0x0000FF51
  CLUTTER_KEY_Up* = 0x0000FF52
  CLUTTER_KEY_Right* = 0x0000FF53
  CLUTTER_KEY_Down* = 0x0000FF54
  CLUTTER_KEY_Prior* = 0x0000FF55
  CLUTTER_KEY_Page_Up* = 0x0000FF55
  CLUTTER_KEY_Next* = 0x0000FF56
  CLUTTER_KEY_Page_Down* = 0x0000FF56
  CLUTTER_KEY_End* = 0x0000FF57
  CLUTTER_KEY_Begin* = 0x0000FF58
  CLUTTER_KEY_Select* = 0x0000FF60
  CLUTTER_KEY_Print* = 0x0000FF61
  CLUTTER_KEY_Execute* = 0x0000FF62
  CLUTTER_KEY_Insert* = 0x0000FF63
  CLUTTER_KEY_Undo* = 0x0000FF65
  CLUTTER_KEY_Redo* = 0x0000FF66
  CLUTTER_KEY_Menu* = 0x0000FF67
  CLUTTER_KEY_Find* = 0x0000FF68
  CLUTTER_KEY_Cancel* = 0x0000FF69
  CLUTTER_KEY_Help* = 0x0000FF6A
  CLUTTER_KEY_Break* = 0x0000FF6B
  CLUTTER_KEY_Mode_switch* = 0x0000FF7E
  CLUTTER_KEY_script_switch* = 0x0000FF7E
  CLUTTER_KEY_Num_Lock* = 0x0000FF7F
  CLUTTER_KEY_KP_Space* = 0x0000FF80
  CLUTTER_KEY_KP_Tab* = 0x0000FF89
  CLUTTER_KEY_KP_Enter* = 0x0000FF8D
  CLUTTER_KEY_KP_F1* = 0x0000FF91
  CLUTTER_KEY_KP_F2* = 0x0000FF92
  CLUTTER_KEY_KP_F3* = 0x0000FF93
  CLUTTER_KEY_KP_F4* = 0x0000FF94
  CLUTTER_KEY_KP_Home* = 0x0000FF95
  CLUTTER_KEY_KP_Left* = 0x0000FF96
  CLUTTER_KEY_KP_Up* = 0x0000FF97
  CLUTTER_KEY_KP_Right* = 0x0000FF98
  CLUTTER_KEY_KP_Down* = 0x0000FF99
  CLUTTER_KEY_KP_Prior* = 0x0000FF9A
  CLUTTER_KEY_KP_Page_Up* = 0x0000FF9A
  CLUTTER_KEY_KP_Next* = 0x0000FF9B
  CLUTTER_KEY_KP_Page_Down* = 0x0000FF9B
  CLUTTER_KEY_KP_End* = 0x0000FF9C
  CLUTTER_KEY_KP_Begin* = 0x0000FF9D
  CLUTTER_KEY_KP_Insert* = 0x0000FF9E
  CLUTTER_KEY_KP_Delete* = 0x0000FF9F
  CLUTTER_KEY_KP_Equal* = 0x0000FFBD
  CLUTTER_KEY_KP_Multiply* = 0x0000FFAA
  CLUTTER_KEY_KP_Add* = 0x0000FFAB
  CLUTTER_KEY_KP_Separator* = 0x0000FFAC
  CLUTTER_KEY_KP_Subtract* = 0x0000FFAD
  CLUTTER_KEY_KP_Decimal* = 0x0000FFAE
  CLUTTER_KEY_KP_Divide* = 0x0000FFAF
  CLUTTER_KEY_KP_0* = 0x0000FFB0
  CLUTTER_KEY_KP_1* = 0x0000FFB1
  CLUTTER_KEY_KP_2* = 0x0000FFB2
  CLUTTER_KEY_KP_3* = 0x0000FFB3
  CLUTTER_KEY_KP_4* = 0x0000FFB4
  CLUTTER_KEY_KP_5* = 0x0000FFB5
  CLUTTER_KEY_KP_6* = 0x0000FFB6
  CLUTTER_KEY_KP_7* = 0x0000FFB7
  CLUTTER_KEY_KP_8* = 0x0000FFB8
  CLUTTER_KEY_KP_9* = 0x0000FFB9
  CLUTTER_KEY_F1* = 0x0000FFBE
  CLUTTER_KEY_F2* = 0x0000FFBF
  CLUTTER_KEY_F3* = 0x0000FFC0
  CLUTTER_KEY_F4* = 0x0000FFC1
  CLUTTER_KEY_F5* = 0x0000FFC2
  CLUTTER_KEY_F6* = 0x0000FFC3
  CLUTTER_KEY_F7* = 0x0000FFC4
  CLUTTER_KEY_F8* = 0x0000FFC5
  CLUTTER_KEY_F9* = 0x0000FFC6
  CLUTTER_KEY_F10* = 0x0000FFC7
  CLUTTER_KEY_F11* = 0x0000FFC8
  CLUTTER_KEY_L1* = 0x0000FFC8
  CLUTTER_KEY_F12* = 0x0000FFC9
  CLUTTER_KEY_L2* = 0x0000FFC9
  CLUTTER_KEY_F13* = 0x0000FFCA
  CLUTTER_KEY_L3* = 0x0000FFCA
  CLUTTER_KEY_F14* = 0x0000FFCB
  CLUTTER_KEY_L4* = 0x0000FFCB
  CLUTTER_KEY_F15* = 0x0000FFCC
  CLUTTER_KEY_L5* = 0x0000FFCC
  CLUTTER_KEY_F16* = 0x0000FFCD
  CLUTTER_KEY_L6* = 0x0000FFCD
  CLUTTER_KEY_F17* = 0x0000FFCE
  CLUTTER_KEY_L7* = 0x0000FFCE
  CLUTTER_KEY_F18* = 0x0000FFCF
  CLUTTER_KEY_L8* = 0x0000FFCF
  CLUTTER_KEY_F19* = 0x0000FFD0
  CLUTTER_KEY_L9* = 0x0000FFD0
  CLUTTER_KEY_F20* = 0x0000FFD1
  CLUTTER_KEY_L10* = 0x0000FFD1
  CLUTTER_KEY_F21* = 0x0000FFD2
  CLUTTER_KEY_R1* = 0x0000FFD2
  CLUTTER_KEY_F22* = 0x0000FFD3
  CLUTTER_KEY_R2* = 0x0000FFD3
  CLUTTER_KEY_F23* = 0x0000FFD4
  CLUTTER_KEY_R3* = 0x0000FFD4
  CLUTTER_KEY_F24* = 0x0000FFD5
  CLUTTER_KEY_R4* = 0x0000FFD5
  CLUTTER_KEY_F25* = 0x0000FFD6
  CLUTTER_KEY_R5* = 0x0000FFD6
  CLUTTER_KEY_F26* = 0x0000FFD7
  CLUTTER_KEY_R6* = 0x0000FFD7
  CLUTTER_KEY_F27* = 0x0000FFD8
  CLUTTER_KEY_R7* = 0x0000FFD8
  CLUTTER_KEY_F28* = 0x0000FFD9
  CLUTTER_KEY_R8* = 0x0000FFD9
  CLUTTER_KEY_F29* = 0x0000FFDA
  CLUTTER_KEY_R9* = 0x0000FFDA
  CLUTTER_KEY_F30* = 0x0000FFDB
  CLUTTER_KEY_R10* = 0x0000FFDB
  CLUTTER_KEY_F31* = 0x0000FFDC
  CLUTTER_KEY_R11* = 0x0000FFDC
  CLUTTER_KEY_F32* = 0x0000FFDD
  CLUTTER_KEY_R12* = 0x0000FFDD
  CLUTTER_KEY_F33* = 0x0000FFDE
  CLUTTER_KEY_R13* = 0x0000FFDE
  CLUTTER_KEY_F34* = 0x0000FFDF
  CLUTTER_KEY_R14* = 0x0000FFDF
  CLUTTER_KEY_F35* = 0x0000FFE0
  CLUTTER_KEY_R15* = 0x0000FFE0
  CLUTTER_KEY_Shift_L* = 0x0000FFE1
  CLUTTER_KEY_Shift_R* = 0x0000FFE2
  CLUTTER_KEY_Control_L* = 0x0000FFE3
  CLUTTER_KEY_Control_R* = 0x0000FFE4
  CLUTTER_KEY_Caps_Lock* = 0x0000FFE5
  CLUTTER_KEY_Shift_Lock* = 0x0000FFE6
  CLUTTER_KEY_Meta_L* = 0x0000FFE7
  CLUTTER_KEY_Meta_R* = 0x0000FFE8
  CLUTTER_KEY_Alt_L* = 0x0000FFE9
  CLUTTER_KEY_Alt_R* = 0x0000FFEA
  CLUTTER_KEY_Super_L* = 0x0000FFEB
  CLUTTER_KEY_Super_R* = 0x0000FFEC
  CLUTTER_KEY_Hyper_L* = 0x0000FFED
  CLUTTER_KEY_Hyper_R* = 0x0000FFEE
  CLUTTER_KEY_ISO_Lock* = 0x0000FE01
  CLUTTER_KEY_ISO_Level2_Latch* = 0x0000FE02
  CLUTTER_KEY_ISO_Level3_Shift* = 0x0000FE03
  CLUTTER_KEY_ISO_Level3_Latch* = 0x0000FE04
  CLUTTER_KEY_ISO_Level3_Lock* = 0x0000FE05
  CLUTTER_KEY_ISO_Level5_Shift* = 0x0000FE11
  CLUTTER_KEY_ISO_Level5_Latch* = 0x0000FE12
  CLUTTER_KEY_ISO_Level5_Lock* = 0x0000FE13
  CLUTTER_KEY_ISO_Group_Shift* = 0x0000FF7E
  CLUTTER_KEY_ISO_Group_Latch* = 0x0000FE06
  CLUTTER_KEY_ISO_Group_Lock* = 0x0000FE07
  CLUTTER_KEY_ISO_Next_Group* = 0x0000FE08
  CLUTTER_KEY_ISO_Next_Group_Lock* = 0x0000FE09
  CLUTTER_KEY_ISO_Prev_Group* = 0x0000FE0A
  CLUTTER_KEY_ISO_Prev_Group_Lock* = 0x0000FE0B
  CLUTTER_KEY_ISO_First_Group* = 0x0000FE0C
  CLUTTER_KEY_ISO_First_Group_Lock* = 0x0000FE0D
  CLUTTER_KEY_ISO_Last_Group* = 0x0000FE0E
  CLUTTER_KEY_ISO_Last_Group_Lock* = 0x0000FE0F
  CLUTTER_KEY_ISO_Left_Tab* = 0x0000FE20
  CLUTTER_KEY_ISO_Move_Line_Up* = 0x0000FE21
  CLUTTER_KEY_ISO_Move_Line_Down* = 0x0000FE22
  CLUTTER_KEY_ISO_Partial_Line_Up* = 0x0000FE23
  CLUTTER_KEY_ISO_Partial_Line_Down* = 0x0000FE24
  CLUTTER_KEY_ISO_Partial_Space_Left* = 0x0000FE25
  CLUTTER_KEY_ISO_Partial_Space_Right* = 0x0000FE26
  CLUTTER_KEY_ISO_Set_Margin_Left* = 0x0000FE27
  CLUTTER_KEY_ISO_Set_Margin_Right* = 0x0000FE28
  CLUTTER_KEY_ISO_Release_Margin_Left* = 0x0000FE29
  CLUTTER_KEY_ISO_Release_Margin_Right* = 0x0000FE2A
  CLUTTER_KEY_ISO_Release_Both_Margins* = 0x0000FE2B
  CLUTTER_KEY_ISO_Fast_Cursor_Left* = 0x0000FE2C
  CLUTTER_KEY_ISO_Fast_Cursor_Right* = 0x0000FE2D
  CLUTTER_KEY_ISO_Fast_Cursor_Up* = 0x0000FE2E
  CLUTTER_KEY_ISO_Fast_Cursor_Down* = 0x0000FE2F
  CLUTTER_KEY_ISO_Continuous_Underline* = 0x0000FE30
  CLUTTER_KEY_ISO_Discontinuous_Underline* = 0x0000FE31
  CLUTTER_KEY_ISO_Emphasize* = 0x0000FE32
  CLUTTER_KEY_ISO_Center_Object* = 0x0000FE33
  CLUTTER_KEY_ISO_Enter* = 0x0000FE34
  CLUTTER_KEY_dead_grave* = 0x0000FE50
  CLUTTER_KEY_dead_acute* = 0x0000FE51
  CLUTTER_KEY_dead_circumflex* = 0x0000FE52
  CLUTTER_KEY_dead_tilde* = 0x0000FE53
  CLUTTER_KEY_dead_perispomeni* = 0x0000FE53
  CLUTTER_KEY_dead_macron* = 0x0000FE54
  CLUTTER_KEY_dead_breve* = 0x0000FE55
  CLUTTER_KEY_dead_abovedot* = 0x0000FE56
  CLUTTER_KEY_dead_diaeresis* = 0x0000FE57
  CLUTTER_KEY_dead_abovering* = 0x0000FE58
  CLUTTER_KEY_dead_doubleacute* = 0x0000FE59
  CLUTTER_KEY_dead_caron* = 0x0000FE5A
  CLUTTER_KEY_dead_cedilla* = 0x0000FE5B
  CLUTTER_KEY_dead_ogonek* = 0x0000FE5C
  CLUTTER_KEY_dead_iota* = 0x0000FE5D
  CLUTTER_KEY_dead_voiced_sound* = 0x0000FE5E
  CLUTTER_KEY_dead_semivoiced_sound* = 0x0000FE5F
  CLUTTER_KEY_dead_belowdot* = 0x0000FE60
  CLUTTER_KEY_dead_hook* = 0x0000FE61
  CLUTTER_KEY_dead_horn* = 0x0000FE62
  CLUTTER_KEY_dead_stroke* = 0x0000FE63
  CLUTTER_KEY_dead_abovecomma* = 0x0000FE64
  CLUTTER_KEY_dead_psili* = 0x0000FE64
  CLUTTER_KEY_dead_abovereversedcomma* = 0x0000FE65
  CLUTTER_KEY_dead_dasia* = 0x0000FE65
  CLUTTER_KEY_dead_doublegrave* = 0x0000FE66
  CLUTTER_KEY_dead_belowring* = 0x0000FE67
  CLUTTER_KEY_dead_belowmacron* = 0x0000FE68
  CLUTTER_KEY_dead_belowcircumflex* = 0x0000FE69
  CLUTTER_KEY_dead_belowtilde* = 0x0000FE6A
  CLUTTER_KEY_dead_belowbreve* = 0x0000FE6B
  CLUTTER_KEY_dead_belowdiaeresis* = 0x0000FE6C
  CLUTTER_KEY_dead_invertedbreve* = 0x0000FE6D
  CLUTTER_KEY_dead_belowcomma* = 0x0000FE6E
  CLUTTER_KEY_dead_currency* = 0x0000FE6F
  CLUTTER_KEY_dead_lowline* = 0x0000FE90
  CLUTTER_KEY_dead_aboveverticalline* = 0x0000FE91
  CLUTTER_KEY_dead_belowverticalline* = 0x0000FE92
  CLUTTER_KEY_dead_longsolidusoverlay* = 0x0000FE93
  CLUTTER_KEY_dead_a* = 0x0000FE80
  CLUTTER_KEY_dead_A_upper* = 0x0000FE81
  CLUTTER_KEY_dead_e* = 0x0000FE82
  CLUTTER_KEY_dead_E_upper* = 0x0000FE83
  CLUTTER_KEY_dead_i* = 0x0000FE84
  CLUTTER_KEY_dead_I_upper* = 0x0000FE85
  CLUTTER_KEY_dead_o* = 0x0000FE86
  CLUTTER_KEY_dead_O_upper* = 0x0000FE87
  CLUTTER_KEY_dead_u* = 0x0000FE88
  CLUTTER_KEY_dead_U_upper* = 0x0000FE89
  CLUTTER_KEY_dead_small_schwa* = 0x0000FE8A
  CLUTTER_KEY_dead_capital_schwa* = 0x0000FE8B
  CLUTTER_KEY_dead_greek* = 0x0000FE8C
  CLUTTER_KEY_First_Virtual_Screen* = 0x0000FED0
  CLUTTER_KEY_Prev_Virtual_Screen* = 0x0000FED1
  CLUTTER_KEY_Next_Virtual_Screen* = 0x0000FED2
  CLUTTER_KEY_Last_Virtual_Screen* = 0x0000FED4
  CLUTTER_KEY_Terminate_Server* = 0x0000FED5
  CLUTTER_KEY_AccessX_Enable* = 0x0000FE70
  CLUTTER_KEY_AccessX_Feedback_Enable* = 0x0000FE71
  CLUTTER_KEY_RepeatKeys_Enable* = 0x0000FE72
  CLUTTER_KEY_SlowKeys_Enable* = 0x0000FE73
  CLUTTER_KEY_BounceKeys_Enable* = 0x0000FE74
  CLUTTER_KEY_StickyKeys_Enable* = 0x0000FE75
  CLUTTER_KEY_MouseKeys_Enable* = 0x0000FE76
  CLUTTER_KEY_MouseKeys_Accel_Enable* = 0x0000FE77
  CLUTTER_KEY_Overlay1_Enable* = 0x0000FE78
  CLUTTER_KEY_Overlay2_Enable* = 0x0000FE79
  CLUTTER_KEY_AudibleBell_Enable* = 0x0000FE7A
  CLUTTER_KEY_Pointer_Left* = 0x0000FEE0
  CLUTTER_KEY_Pointer_Right* = 0x0000FEE1
  CLUTTER_KEY_Pointer_Up* = 0x0000FEE2
  CLUTTER_KEY_Pointer_Down* = 0x0000FEE3
  CLUTTER_KEY_Pointer_UpLeft* = 0x0000FEE4
  CLUTTER_KEY_Pointer_UpRight* = 0x0000FEE5
  CLUTTER_KEY_Pointer_DownLeft* = 0x0000FEE6
  CLUTTER_KEY_Pointer_DownRight* = 0x0000FEE7
  CLUTTER_KEY_Pointer_Button_Dflt* = 0x0000FEE8
  CLUTTER_KEY_Pointer_Button1* = 0x0000FEE9
  CLUTTER_KEY_Pointer_Button2* = 0x0000FEEA
  CLUTTER_KEY_Pointer_Button3* = 0x0000FEEB
  CLUTTER_KEY_Pointer_Button4* = 0x0000FEEC
  CLUTTER_KEY_Pointer_Button5* = 0x0000FEED
  CLUTTER_KEY_Pointer_DblClick_Dflt* = 0x0000FEEE
  CLUTTER_KEY_Pointer_DblClick1* = 0x0000FEEF
  CLUTTER_KEY_Pointer_DblClick2* = 0x0000FEF0
  CLUTTER_KEY_Pointer_DblClick3* = 0x0000FEF1
  CLUTTER_KEY_Pointer_DblClick4* = 0x0000FEF2
  CLUTTER_KEY_Pointer_DblClick5* = 0x0000FEF3
  CLUTTER_KEY_Pointer_Drag_Dflt* = 0x0000FEF4
  CLUTTER_KEY_Pointer_Drag1* = 0x0000FEF5
  CLUTTER_KEY_Pointer_Drag2* = 0x0000FEF6
  CLUTTER_KEY_Pointer_Drag3* = 0x0000FEF7
  CLUTTER_KEY_Pointer_Drag4* = 0x0000FEF8
  CLUTTER_KEY_Pointer_Drag5* = 0x0000FEFD
  CLUTTER_KEY_Pointer_EnableKeys* = 0x0000FEF9
  CLUTTER_KEY_Pointer_Accelerate* = 0x0000FEFA
  CLUTTER_KEY_Pointer_DfltBtnNext* = 0x0000FEFB
  CLUTTER_KEY_Pointer_DfltBtnPrev* = 0x0000FEFC
  CLUTTER_KEY_jeem_medial* = 0x0000FEA0
  CLUTTER_KEY_hah_isolated* = 0x0000FEA1
  CLUTTER_KEY_hah_final* = 0x0000FEA2
  CLUTTER_KEY_hah_initial* = 0x0000FEA3
  CLUTTER_KEY_hah_medial* = 0x0000FEA4
  CLUTTER_KEY_khah_isolated* = 0x0000FEA5
  CLUTTER_KEY_3270_Duplicate* = 0x0000FD01
  CLUTTER_KEY_3270_FieldMark* = 0x0000FD02
  CLUTTER_KEY_3270_Right2* = 0x0000FD03
  CLUTTER_KEY_3270_Left2* = 0x0000FD04
  CLUTTER_KEY_3270_BackTab* = 0x0000FD05
  CLUTTER_KEY_3270_EraseEOF* = 0x0000FD06
  CLUTTER_KEY_3270_EraseInput* = 0x0000FD07
  CLUTTER_KEY_3270_Reset* = 0x0000FD08
  CLUTTER_KEY_3270_Quit* = 0x0000FD09
  CLUTTER_KEY_3270_PA1* = 0x0000FD0A
  CLUTTER_KEY_3270_PA2* = 0x0000FD0B
  CLUTTER_KEY_3270_PA3* = 0x0000FD0C
  CLUTTER_KEY_3270_Test* = 0x0000FD0D
  CLUTTER_KEY_3270_Attn* = 0x0000FD0E
  CLUTTER_KEY_3270_CursorBlink* = 0x0000FD0F
  CLUTTER_KEY_3270_AltCursor* = 0x0000FD10
  CLUTTER_KEY_3270_KeyClick* = 0x0000FD11
  CLUTTER_KEY_3270_Jump* = 0x0000FD12
  CLUTTER_KEY_3270_Ident* = 0x0000FD13
  CLUTTER_KEY_3270_Rule* = 0x0000FD14
  CLUTTER_KEY_3270_Copy* = 0x0000FD15
  CLUTTER_KEY_3270_Play* = 0x0000FD16
  CLUTTER_KEY_3270_Setup* = 0x0000FD17
  CLUTTER_KEY_3270_Record* = 0x0000FD18
  CLUTTER_KEY_3270_ChangeScreen* = 0x0000FD19
  CLUTTER_KEY_3270_DeleteWord* = 0x0000FD1A
  CLUTTER_KEY_3270_ExSelect* = 0x0000FD1B
  CLUTTER_KEY_3270_CursorSelect* = 0x0000FD1C
  CLUTTER_KEY_3270_PrintScreen* = 0x0000FD1D
  CLUTTER_KEY_3270_Enter* = 0x0000FD1E
  CLUTTER_KEY_space* = 0x00000020
  CLUTTER_KEY_exclam* = 0x00000021
  CLUTTER_KEY_quotedbl* = 0x00000022
  CLUTTER_KEY_numbersign* = 0x00000023
  CLUTTER_KEY_dollar* = 0x00000024
  CLUTTER_KEY_percent* = 0x00000025
  CLUTTER_KEY_ampersand* = 0x00000026
  CLUTTER_KEY_apostrophe* = 0x00000027
  CLUTTER_KEY_quoteright* = 0x00000027
  CLUTTER_KEY_parenleft* = 0x00000028
  CLUTTER_KEY_parenright* = 0x00000029
  CLUTTER_KEY_asterisk* = 0x0000002A
  CLUTTER_KEY_plus* = 0x0000002B
  CLUTTER_KEY_comma* = 0x0000002C
  CLUTTER_KEY_minus* = 0x0000002D
  CLUTTER_KEY_period* = 0x0000002E
  CLUTTER_KEY_slash* = 0x0000002F
  CLUTTER_KEY_0* = 0x00000030
  CLUTTER_KEY_1* = 0x00000031
  CLUTTER_KEY_2* = 0x00000032
  CLUTTER_KEY_3* = 0x00000033
  CLUTTER_KEY_4* = 0x00000034
  CLUTTER_KEY_5* = 0x00000035
  CLUTTER_KEY_6* = 0x00000036
  CLUTTER_KEY_7* = 0x00000037
  CLUTTER_KEY_8* = 0x00000038
  CLUTTER_KEY_9* = 0x00000039
  CLUTTER_KEY_colon* = 0x0000003A
  CLUTTER_KEY_semicolon* = 0x0000003B
  CLUTTER_KEY_less* = 0x0000003C
  CLUTTER_KEY_equal* = 0x0000003D
  CLUTTER_KEY_greater* = 0x0000003E
  CLUTTER_KEY_question* = 0x0000003F
  CLUTTER_KEY_at* = 0x00000040
  CLUTTER_KEY_A_upper* = 0x00000041
  CLUTTER_KEY_B_upper* = 0x00000042
  CLUTTER_KEY_C_upper* = 0x00000043
  CLUTTER_KEY_D_upper* = 0x00000044
  CLUTTER_KEY_E_upper* = 0x00000045
  CLUTTER_KEY_F_upper* = 0x00000046
  CLUTTER_KEY_G_upper* = 0x00000047
  CLUTTER_KEY_H_upper* = 0x00000048
  CLUTTER_KEY_I_upper* = 0x00000049
  CLUTTER_KEY_J_upper* = 0x0000004A
  CLUTTER_KEY_K_upper* = 0x0000004B
  CLUTTER_KEY_L_upper* = 0x0000004C
  CLUTTER_KEY_M_upper* = 0x0000004D
  CLUTTER_KEY_N_upper* = 0x0000004E
  CLUTTER_KEY_O_upper* = 0x0000004F
  CLUTTER_KEY_P_upper* = 0x00000050
  CLUTTER_KEY_Q_upper* = 0x00000051
  CLUTTER_KEY_R_upper* = 0x00000052
  CLUTTER_KEY_S_upper* = 0x00000053
  CLUTTER_KEY_T_upper* = 0x00000054
  CLUTTER_KEY_U_upper* = 0x00000055
  CLUTTER_KEY_V_upper* = 0x00000056
  CLUTTER_KEY_W_upper* = 0x00000057
  CLUTTER_KEY_X_upper* = 0x00000058
  CLUTTER_KEY_Y_upper* = 0x00000059
  CLUTTER_KEY_Z_upper* = 0x0000005A
  CLUTTER_KEY_bracketleft* = 0x0000005B
  CLUTTER_KEY_backslash* = 0x0000005C
  CLUTTER_KEY_bracketright* = 0x0000005D
  CLUTTER_KEY_asciicircum* = 0x0000005E
  CLUTTER_KEY_underscore* = 0x0000005F
  CLUTTER_KEY_grave* = 0x00000060
  CLUTTER_KEY_quoteleft* = 0x00000060
  CLUTTER_KEY_a* = 0x00000061
  CLUTTER_KEY_b* = 0x00000062
  CLUTTER_KEY_c* = 0x00000063
  CLUTTER_KEY_d* = 0x00000064
  CLUTTER_KEY_e* = 0x00000065
  CLUTTER_KEY_f* = 0x00000066
  CLUTTER_KEY_g* = 0x00000067
  CLUTTER_KEY_h* = 0x00000068
  CLUTTER_KEY_i* = 0x00000069
  CLUTTER_KEY_j* = 0x0000006A
  CLUTTER_KEY_k* = 0x0000006B
  CLUTTER_KEY_l* = 0x0000006C
  CLUTTER_KEY_m* = 0x0000006D
  CLUTTER_KEY_n* = 0x0000006E
  CLUTTER_KEY_o* = 0x0000006F
  CLUTTER_KEY_p* = 0x00000070
  CLUTTER_KEY_q* = 0x00000071
  CLUTTER_KEY_r* = 0x00000072
  CLUTTER_KEY_s* = 0x00000073
  CLUTTER_KEY_t* = 0x00000074
  CLUTTER_KEY_u* = 0x00000075
  CLUTTER_KEY_v* = 0x00000076
  CLUTTER_KEY_w* = 0x00000077
  CLUTTER_KEY_x* = 0x00000078
  CLUTTER_KEY_y* = 0x00000079
  CLUTTER_KEY_z* = 0x0000007A
  CLUTTER_KEY_braceleft* = 0x0000007B
  CLUTTER_KEY_bar* = 0x0000007C
  CLUTTER_KEY_braceright* = 0x0000007D
  CLUTTER_KEY_asciitilde* = 0x0000007E
  CLUTTER_KEY_nobreakspace* = 0x000000A0
  CLUTTER_KEY_exclamdown* = 0x000000A1
  CLUTTER_KEY_cent* = 0x000000A2
  CLUTTER_KEY_sterling* = 0x000000A3
  CLUTTER_KEY_currency* = 0x000000A4
  CLUTTER_KEY_yen* = 0x000000A5
  CLUTTER_KEY_brokenbar* = 0x000000A6
  CLUTTER_KEY_section* = 0x000000A7
  CLUTTER_KEY_diaeresis* = 0x000000A8
  CLUTTER_KEY_copyright* = 0x000000A9
  CLUTTER_KEY_ordfeminine* = 0x000000AA
  CLUTTER_KEY_guillemotleft* = 0x000000AB
  CLUTTER_KEY_notsign* = 0x000000AC
  CLUTTER_KEY_hyphen* = 0x000000AD
  CLUTTER_KEY_registered* = 0x000000AE
  CLUTTER_KEY_macron* = 0x000000AF
  CLUTTER_KEY_degree* = 0x000000B0
  CLUTTER_KEY_plusminus* = 0x000000B1
  CLUTTER_KEY_twosuperior* = 0x000000B2
  CLUTTER_KEY_threesuperior* = 0x000000B3
  CLUTTER_KEY_acute* = 0x000000B4
  CLUTTER_KEY_mu* = 0x000000B5
  CLUTTER_KEY_paragraph* = 0x000000B6
  CLUTTER_KEY_periodcentered* = 0x000000B7
  CLUTTER_KEY_cedilla* = 0x000000B8
  CLUTTER_KEY_onesuperior* = 0x000000B9
  CLUTTER_KEY_masculine* = 0x000000BA
  CLUTTER_KEY_guillemotright* = 0x000000BB
  CLUTTER_KEY_onequarter* = 0x000000BC
  CLUTTER_KEY_onehalf* = 0x000000BD
  CLUTTER_KEY_threequarters* = 0x000000BE
  CLUTTER_KEY_questiondown* = 0x000000BF
  CLUTTER_KEY_Agrave_upper* = 0x000000C0
  CLUTTER_KEY_Aacute_upper* = 0x000000C1
  CLUTTER_KEY_Acircumflex_upper* = 0x000000C2
  CLUTTER_KEY_Atilde_upper* = 0x000000C3
  CLUTTER_KEY_Adiaeresis_upper* = 0x000000C4
  CLUTTER_KEY_Aring_upper* = 0x000000C5
  CLUTTER_KEY_AE_upper* = 0x000000C6
  CLUTTER_KEY_Ccedilla_upper* = 0x000000C7
  CLUTTER_KEY_Egrave_upper* = 0x000000C8
  CLUTTER_KEY_Eacute_upper* = 0x000000C9
  CLUTTER_KEY_Ecircumflex_upper* = 0x000000CA
  CLUTTER_KEY_Ediaeresis_upper* = 0x000000CB
  CLUTTER_KEY_Igrave_upper* = 0x000000CC
  CLUTTER_KEY_Iacute_upper* = 0x000000CD
  CLUTTER_KEY_Icircumflex_upper* = 0x000000CE
  CLUTTER_KEY_Idiaeresis_upper* = 0x000000CF
  CLUTTER_KEY_ETH_upper* = 0x000000D0
  CLUTTER_KEY_Ntilde_upper* = 0x000000D1
  CLUTTER_KEY_Ograve_upper* = 0x000000D2
  CLUTTER_KEY_Oacute_upper* = 0x000000D3
  CLUTTER_KEY_Ocircumflex_upper* = 0x000000D4
  CLUTTER_KEY_Otilde_upper* = 0x000000D5
  CLUTTER_KEY_Odiaeresis_upper* = 0x000000D6
  CLUTTER_KEY_multiply* = 0x000000D7
  CLUTTER_KEY_Oslash_upper* = 0x000000D8
  CLUTTER_KEY_Ooblique_upper* = 0x000000D8
  CLUTTER_KEY_Ugrave_upper* = 0x000000D9
  CLUTTER_KEY_Uacute_upper* = 0x000000DA
  CLUTTER_KEY_Ucircumflex_upper* = 0x000000DB
  CLUTTER_KEY_Udiaeresis_upper* = 0x000000DC
  CLUTTER_KEY_Yacute_upper* = 0x000000DD
  CLUTTER_KEY_THORN_upper* = 0x000000DE
  CLUTTER_KEY_ssharp* = 0x000000DF
  CLUTTER_KEY_agrave* = 0x000000E0
  CLUTTER_KEY_aacute* = 0x000000E1
  CLUTTER_KEY_acircumflex* = 0x000000E2
  CLUTTER_KEY_atilde* = 0x000000E3
  CLUTTER_KEY_adiaeresis* = 0x000000E4
  CLUTTER_KEY_aring* = 0x000000E5
  CLUTTER_KEY_ae* = 0x000000E6
  CLUTTER_KEY_ccedilla* = 0x000000E7
  CLUTTER_KEY_egrave* = 0x000000E8
  CLUTTER_KEY_eacute* = 0x000000E9
  CLUTTER_KEY_ecircumflex* = 0x000000EA
  CLUTTER_KEY_ediaeresis* = 0x000000EB
  CLUTTER_KEY_igrave* = 0x000000EC
  CLUTTER_KEY_iacute* = 0x000000ED
  CLUTTER_KEY_icircumflex* = 0x000000EE
  CLUTTER_KEY_idiaeresis* = 0x000000EF
  CLUTTER_KEY_eth* = 0x000000F0
  CLUTTER_KEY_ntilde* = 0x000000F1
  CLUTTER_KEY_ograve* = 0x000000F2
  CLUTTER_KEY_oacute* = 0x000000F3
  CLUTTER_KEY_ocircumflex* = 0x000000F4
  CLUTTER_KEY_otilde* = 0x000000F5
  CLUTTER_KEY_odiaeresis* = 0x000000F6
  CLUTTER_KEY_division* = 0x000000F7
  CLUTTER_KEY_oslash* = 0x000000F8
  CLUTTER_KEY_ooblique* = 0x000000F8
  CLUTTER_KEY_ugrave* = 0x000000F9
  CLUTTER_KEY_uacute* = 0x000000FA
  CLUTTER_KEY_ucircumflex* = 0x000000FB
  CLUTTER_KEY_udiaeresis* = 0x000000FC
  CLUTTER_KEY_yacute* = 0x000000FD
  CLUTTER_KEY_thorn* = 0x000000FE
  CLUTTER_KEY_ydiaeresis* = 0x000000FF
  CLUTTER_KEY_Aogonek_upper* = 0x000001A1
  CLUTTER_KEY_breve* = 0x000001A2
  CLUTTER_KEY_Lstroke_upper* = 0x000001A3
  CLUTTER_KEY_Lcaron_upper* = 0x000001A5
  CLUTTER_KEY_Sacute_upper* = 0x000001A6
  CLUTTER_KEY_Scaron_upper* = 0x000001A9
  CLUTTER_KEY_Scedilla_upper* = 0x000001AA
  CLUTTER_KEY_Tcaron_upper* = 0x000001AB
  CLUTTER_KEY_Zacute_upper* = 0x000001AC
  CLUTTER_KEY_Zcaron_upper* = 0x000001AE
  CLUTTER_KEY_Zabovedot_upper* = 0x000001AF
  CLUTTER_KEY_aogonek* = 0x000001B1
  CLUTTER_KEY_ogonek* = 0x000001B2
  CLUTTER_KEY_lstroke* = 0x000001B3
  CLUTTER_KEY_lcaron* = 0x000001B5
  CLUTTER_KEY_sacute* = 0x000001B6
  CLUTTER_KEY_caron* = 0x000001B7
  CLUTTER_KEY_scaron* = 0x000001B9
  CLUTTER_KEY_scedilla* = 0x000001BA
  CLUTTER_KEY_tcaron* = 0x000001BB
  CLUTTER_KEY_zacute* = 0x000001BC
  CLUTTER_KEY_doubleacute* = 0x000001BD
  CLUTTER_KEY_zcaron* = 0x000001BE
  CLUTTER_KEY_zabovedot* = 0x000001BF
  CLUTTER_KEY_Racute_upper* = 0x000001C0
  CLUTTER_KEY_Abreve_upper* = 0x000001C3
  CLUTTER_KEY_Lacute_upper* = 0x000001C5
  CLUTTER_KEY_Cacute_upper* = 0x000001C6
  CLUTTER_KEY_Ccaron_upper* = 0x000001C8
  CLUTTER_KEY_Eogonek_upper* = 0x000001CA
  CLUTTER_KEY_Ecaron_upper* = 0x000001CC
  CLUTTER_KEY_Dcaron_upper* = 0x000001CF
  CLUTTER_KEY_Dstroke_upper* = 0x000001D0
  CLUTTER_KEY_Nacute_upper* = 0x000001D1
  CLUTTER_KEY_Ncaron_upper* = 0x000001D2
  CLUTTER_KEY_Odoubleacute_upper* = 0x000001D5
  CLUTTER_KEY_Rcaron_upper* = 0x000001D8
  CLUTTER_KEY_Uring_upper* = 0x000001D9
  CLUTTER_KEY_Udoubleacute_upper* = 0x000001DB
  CLUTTER_KEY_Tcedilla_upper* = 0x000001DE
  CLUTTER_KEY_racute* = 0x000001E0
  CLUTTER_KEY_abreve* = 0x000001E3
  CLUTTER_KEY_lacute* = 0x000001E5
  CLUTTER_KEY_cacute* = 0x000001E6
  CLUTTER_KEY_ccaron* = 0x000001E8
  CLUTTER_KEY_eogonek* = 0x000001EA
  CLUTTER_KEY_ecaron* = 0x000001EC
  CLUTTER_KEY_dcaron* = 0x000001EF
  CLUTTER_KEY_dstroke* = 0x000001F0
  CLUTTER_KEY_nacute* = 0x000001F1
  CLUTTER_KEY_ncaron* = 0x000001F2
  CLUTTER_KEY_odoubleacute* = 0x000001F5
  CLUTTER_KEY_rcaron* = 0x000001F8
  CLUTTER_KEY_uring* = 0x000001F9
  CLUTTER_KEY_udoubleacute* = 0x000001FB
  CLUTTER_KEY_tcedilla* = 0x000001FE
  CLUTTER_KEY_abovedot* = 0x000001FF
  CLUTTER_KEY_Hstroke_upper* = 0x000002A1
  CLUTTER_KEY_Hcircumflex_upper* = 0x000002A6
  CLUTTER_KEY_Iabovedot_upper* = 0x000002A9
  CLUTTER_KEY_Gbreve_upper* = 0x000002AB
  CLUTTER_KEY_Jcircumflex_upper* = 0x000002AC
  CLUTTER_KEY_hstroke* = 0x000002B1
  CLUTTER_KEY_hcircumflex* = 0x000002B6
  CLUTTER_KEY_idotless* = 0x000002B9
  CLUTTER_KEY_gbreve* = 0x000002BB
  CLUTTER_KEY_jcircumflex* = 0x000002BC
  CLUTTER_KEY_Cabovedot_upper* = 0x000002C5
  CLUTTER_KEY_Ccircumflex_upper* = 0x000002C6
  CLUTTER_KEY_Gabovedot_upper* = 0x000002D5
  CLUTTER_KEY_Gcircumflex_upper* = 0x000002D8
  CLUTTER_KEY_Ubreve_upper* = 0x000002DD
  CLUTTER_KEY_Scircumflex_upper* = 0x000002DE
  CLUTTER_KEY_cabovedot* = 0x000002E5
  CLUTTER_KEY_ccircumflex* = 0x000002E6
  CLUTTER_KEY_gabovedot* = 0x000002F5
  CLUTTER_KEY_gcircumflex* = 0x000002F8
  CLUTTER_KEY_ubreve* = 0x000002FD
  CLUTTER_KEY_scircumflex* = 0x000002FE
  CLUTTER_KEY_kra* = 0x000003A2
  CLUTTER_KEY_kappa* = 0x000003A2
  CLUTTER_KEY_Rcedilla_upper* = 0x000003A3
  CLUTTER_KEY_Itilde_upper* = 0x000003A5
  CLUTTER_KEY_Lcedilla_upper* = 0x000003A6
  CLUTTER_KEY_Emacron_upper* = 0x000003AA
  CLUTTER_KEY_Gcedilla_upper* = 0x000003AB
  CLUTTER_KEY_Tslash_upper* = 0x000003AC
  CLUTTER_KEY_rcedilla* = 0x000003B3
  CLUTTER_KEY_itilde* = 0x000003B5
  CLUTTER_KEY_lcedilla* = 0x000003B6
  CLUTTER_KEY_emacron* = 0x000003BA
  CLUTTER_KEY_gcedilla* = 0x000003BB
  CLUTTER_KEY_tslash* = 0x000003BC
  CLUTTER_KEY_ENG_upper* = 0x000003BD
  CLUTTER_KEY_eng* = 0x000003BF
  CLUTTER_KEY_Amacron_upper* = 0x000003C0
  CLUTTER_KEY_Iogonek_upper* = 0x000003C7
  CLUTTER_KEY_Eabovedot_upper* = 0x000003CC
  CLUTTER_KEY_Imacron_upper* = 0x000003CF
  CLUTTER_KEY_Ncedilla_upper* = 0x000003D1
  CLUTTER_KEY_Omacron_upper* = 0x000003D2
  CLUTTER_KEY_Kcedilla_upper* = 0x000003D3
  CLUTTER_KEY_Uogonek_upper* = 0x000003D9
  CLUTTER_KEY_Utilde_upper* = 0x000003DD
  CLUTTER_KEY_Umacron_upper* = 0x000003DE
  CLUTTER_KEY_amacron* = 0x000003E0
  CLUTTER_KEY_iogonek* = 0x000003E7
  CLUTTER_KEY_eabovedot* = 0x000003EC
  CLUTTER_KEY_imacron* = 0x000003EF
  CLUTTER_KEY_ncedilla* = 0x000003F1
  CLUTTER_KEY_omacron* = 0x000003F2
  CLUTTER_KEY_kcedilla* = 0x000003F3
  CLUTTER_KEY_uogonek* = 0x000003F9
  CLUTTER_KEY_utilde* = 0x000003FD
  CLUTTER_KEY_umacron* = 0x000003FE
  CLUTTER_KEY_Wcircumflex_upper* = 0x01000174
  CLUTTER_KEY_wcircumflex* = 0x01000175
  CLUTTER_KEY_Ycircumflex_upper* = 0x01000176
  CLUTTER_KEY_ycircumflex* = 0x01000177
  CLUTTER_KEY_Babovedot_upper* = 0x01001E02
  CLUTTER_KEY_babovedot* = 0x01001E03
  CLUTTER_KEY_Dabovedot_upper* = 0x01001E0A
  CLUTTER_KEY_dabovedot* = 0x01001E0B
  CLUTTER_KEY_Fabovedot_upper* = 0x01001E1E
  CLUTTER_KEY_fabovedot* = 0x01001E1F
  CLUTTER_KEY_Mabovedot_upper* = 0x01001E40
  CLUTTER_KEY_mabovedot* = 0x01001E41
  CLUTTER_KEY_Pabovedot_upper* = 0x01001E56
  CLUTTER_KEY_pabovedot* = 0x01001E57
  CLUTTER_KEY_Sabovedot_upper* = 0x01001E60
  CLUTTER_KEY_sabovedot* = 0x01001E61
  CLUTTER_KEY_Tabovedot_upper* = 0x01001E6A
  CLUTTER_KEY_tabovedot* = 0x01001E6B
  CLUTTER_KEY_Wgrave_upper* = 0x01001E80
  CLUTTER_KEY_wgrave* = 0x01001E81
  CLUTTER_KEY_Wacute_upper* = 0x01001E82
  CLUTTER_KEY_wacute* = 0x01001E83
  CLUTTER_KEY_Wdiaeresis_upper* = 0x01001E84
  CLUTTER_KEY_wdiaeresis* = 0x01001E85
  CLUTTER_KEY_Ygrave_upper* = 0x01001EF2
  CLUTTER_KEY_ygrave* = 0x01001EF3
  CLUTTER_KEY_OE_upper* = 0x000013BC
  CLUTTER_KEY_oe* = 0x000013BD
  CLUTTER_KEY_Ydiaeresis_upper* = 0x000013BE
  CLUTTER_KEY_overline* = 0x0000047E
  CLUTTER_KEY_kana_fullstop* = 0x000004A1
  CLUTTER_KEY_kana_openingbracket* = 0x000004A2
  CLUTTER_KEY_kana_closingbracket* = 0x000004A3
  CLUTTER_KEY_kana_comma* = 0x000004A4
  CLUTTER_KEY_kana_conjunctive* = 0x000004A5
  CLUTTER_KEY_kana_middledot* = 0x000004A5
  CLUTTER_KEY_kana_WO* = 0x000004A6
  CLUTTER_KEY_kana_a* = 0x000004A7
  CLUTTER_KEY_kana_i* = 0x000004A8
  CLUTTER_KEY_kana_u* = 0x000004A9
  CLUTTER_KEY_kana_e* = 0x000004AA
  CLUTTER_KEY_kana_o* = 0x000004AB
  CLUTTER_KEY_kana_ya* = 0x000004AC
  CLUTTER_KEY_kana_yu* = 0x000004AD
  CLUTTER_KEY_kana_yo* = 0x000004AE
  CLUTTER_KEY_kana_tsu* = 0x000004AF
  CLUTTER_KEY_kana_tu* = 0x000004AF
  CLUTTER_KEY_prolongedsound* = 0x000004B0
  CLUTTER_KEY_kana_A_upper* = 0x000004B1
  CLUTTER_KEY_kana_I_upper* = 0x000004B2
  CLUTTER_KEY_kana_U_upper* = 0x000004B3
  CLUTTER_KEY_kana_E_upper* = 0x000004B4
  CLUTTER_KEY_kana_O_upper* = 0x000004B5
  CLUTTER_KEY_kana_KA* = 0x000004B6
  CLUTTER_KEY_kana_KI* = 0x000004B7
  CLUTTER_KEY_kana_KU* = 0x000004B8
  CLUTTER_KEY_kana_KE* = 0x000004B9
  CLUTTER_KEY_kana_KO* = 0x000004BA
  CLUTTER_KEY_kana_SA* = 0x000004BB
  CLUTTER_KEY_kana_SHI* = 0x000004BC
  CLUTTER_KEY_kana_SU* = 0x000004BD
  CLUTTER_KEY_kana_SE* = 0x000004BE
  CLUTTER_KEY_kana_SO* = 0x000004BF
  CLUTTER_KEY_kana_TA* = 0x000004C0
  CLUTTER_KEY_kana_CHI* = 0x000004C1
  CLUTTER_KEY_kana_TI* = 0x000004C1
  CLUTTER_KEY_kana_TSU_upper* = 0x000004C2
  CLUTTER_KEY_kana_TU_upper* = 0x000004C2
  CLUTTER_KEY_kana_TE* = 0x000004C3
  CLUTTER_KEY_kana_TO* = 0x000004C4
  CLUTTER_KEY_kana_NA* = 0x000004C5
  CLUTTER_KEY_kana_NI* = 0x000004C6
  CLUTTER_KEY_kana_NU* = 0x000004C7
  CLUTTER_KEY_kana_NE* = 0x000004C8
  CLUTTER_KEY_kana_NO* = 0x000004C9
  CLUTTER_KEY_kana_HA* = 0x000004CA
  CLUTTER_KEY_kana_HI* = 0x000004CB
  CLUTTER_KEY_kana_FU* = 0x000004CC
  CLUTTER_KEY_kana_HU* = 0x000004CC
  CLUTTER_KEY_kana_HE* = 0x000004CD
  CLUTTER_KEY_kana_HO* = 0x000004CE
  CLUTTER_KEY_kana_MA* = 0x000004CF
  CLUTTER_KEY_kana_MI* = 0x000004D0
  CLUTTER_KEY_kana_MU* = 0x000004D1
  CLUTTER_KEY_kana_ME* = 0x000004D2
  CLUTTER_KEY_kana_MO* = 0x000004D3
  CLUTTER_KEY_kana_YA_upper* = 0x000004D4
  CLUTTER_KEY_kana_YU_upper* = 0x000004D5
  CLUTTER_KEY_kana_YO_upper* = 0x000004D6
  CLUTTER_KEY_kana_RA* = 0x000004D7
  CLUTTER_KEY_kana_RI* = 0x000004D8
  CLUTTER_KEY_kana_RU* = 0x000004D9
  CLUTTER_KEY_kana_RE* = 0x000004DA
  CLUTTER_KEY_kana_RO* = 0x000004DB
  CLUTTER_KEY_kana_WA* = 0x000004DC
  CLUTTER_KEY_kana_N* = 0x000004DD
  CLUTTER_KEY_voicedsound* = 0x000004DE
  CLUTTER_KEY_semivoicedsound* = 0x000004DF
  CLUTTER_KEY_kana_switch* = 0x0000FF7E
  CLUTTER_KEY_Farsi_0* = 0x010006F0
  CLUTTER_KEY_Farsi_1* = 0x010006F1
  CLUTTER_KEY_Farsi_2* = 0x010006F2
  CLUTTER_KEY_Farsi_3* = 0x010006F3
  CLUTTER_KEY_Farsi_4* = 0x010006F4
  CLUTTER_KEY_Farsi_5* = 0x010006F5
  CLUTTER_KEY_Farsi_6* = 0x010006F6
  CLUTTER_KEY_Farsi_7* = 0x010006F7
  CLUTTER_KEY_Farsi_8* = 0x010006F8
  CLUTTER_KEY_Farsi_9* = 0x010006F9
  CLUTTER_KEY_Arabic_percent* = 0x0100066A
  CLUTTER_KEY_Arabic_superscript_alef* = 0x01000670
  CLUTTER_KEY_Arabic_tteh* = 0x01000679
  CLUTTER_KEY_Arabic_peh* = 0x0100067E
  CLUTTER_KEY_Arabic_tcheh* = 0x01000686
  CLUTTER_KEY_Arabic_ddal* = 0x01000688
  CLUTTER_KEY_Arabic_rreh* = 0x01000691
  CLUTTER_KEY_Arabic_comma* = 0x000005AC
  CLUTTER_KEY_Arabic_fullstop* = 0x010006D4
  CLUTTER_KEY_Arabic_0* = 0x01000660
  CLUTTER_KEY_Arabic_1* = 0x01000661
  CLUTTER_KEY_Arabic_2* = 0x01000662
  CLUTTER_KEY_Arabic_3* = 0x01000663
  CLUTTER_KEY_Arabic_4* = 0x01000664
  CLUTTER_KEY_Arabic_5* = 0x01000665
  CLUTTER_KEY_Arabic_6* = 0x01000666
  CLUTTER_KEY_Arabic_7* = 0x01000667
  CLUTTER_KEY_Arabic_8* = 0x01000668
  CLUTTER_KEY_Arabic_9* = 0x01000669
  CLUTTER_KEY_Arabic_semicolon* = 0x000005BB
  CLUTTER_KEY_Arabic_question_mark* = 0x000005BF
  CLUTTER_KEY_Arabic_hamza* = 0x000005C1
  CLUTTER_KEY_Arabic_maddaonalef* = 0x000005C2
  CLUTTER_KEY_Arabic_hamzaonalef* = 0x000005C3
  CLUTTER_KEY_Arabic_hamzaonwaw* = 0x000005C4
  CLUTTER_KEY_Arabic_hamzaunderalef* = 0x000005C5
  CLUTTER_KEY_Arabic_hamzaonyeh* = 0x000005C6
  CLUTTER_KEY_Arabic_alef* = 0x000005C7
  CLUTTER_KEY_Arabic_beh* = 0x000005C8
  CLUTTER_KEY_Arabic_tehmarbuta* = 0x000005C9
  CLUTTER_KEY_Arabic_teh* = 0x000005CA
  CLUTTER_KEY_Arabic_theh* = 0x000005CB
  CLUTTER_KEY_Arabic_jeem* = 0x000005CC
  CLUTTER_KEY_Arabic_hah* = 0x000005CD
  CLUTTER_KEY_Arabic_khah* = 0x000005CE
  CLUTTER_KEY_Arabic_dal* = 0x000005CF
  CLUTTER_KEY_Arabic_thal* = 0x000005D0
  CLUTTER_KEY_Arabic_ra* = 0x000005D1
  CLUTTER_KEY_Arabic_zain* = 0x000005D2
  CLUTTER_KEY_Arabic_seen* = 0x000005D3
  CLUTTER_KEY_Arabic_sheen* = 0x000005D4
  CLUTTER_KEY_Arabic_sad* = 0x000005D5
  CLUTTER_KEY_Arabic_dad* = 0x000005D6
  CLUTTER_KEY_Arabic_tah* = 0x000005D7
  CLUTTER_KEY_Arabic_zah* = 0x000005D8
  CLUTTER_KEY_Arabic_ain* = 0x000005D9
  CLUTTER_KEY_Arabic_ghain* = 0x000005DA
  CLUTTER_KEY_Arabic_tatweel* = 0x000005E0
  CLUTTER_KEY_Arabic_feh* = 0x000005E1
  CLUTTER_KEY_Arabic_qaf* = 0x000005E2
  CLUTTER_KEY_Arabic_kaf* = 0x000005E3
  CLUTTER_KEY_Arabic_lam* = 0x000005E4
  CLUTTER_KEY_Arabic_meem* = 0x000005E5
  CLUTTER_KEY_Arabic_noon* = 0x000005E6
  CLUTTER_KEY_Arabic_ha* = 0x000005E7
  CLUTTER_KEY_Arabic_heh* = 0x000005E7
  CLUTTER_KEY_Arabic_waw* = 0x000005E8
  CLUTTER_KEY_Arabic_alefmaksura* = 0x000005E9
  CLUTTER_KEY_Arabic_yeh* = 0x000005EA
  CLUTTER_KEY_Arabic_fathatan* = 0x000005EB
  CLUTTER_KEY_Arabic_dammatan* = 0x000005EC
  CLUTTER_KEY_Arabic_kasratan* = 0x000005ED
  CLUTTER_KEY_Arabic_fatha* = 0x000005EE
  CLUTTER_KEY_Arabic_damma* = 0x000005EF
  CLUTTER_KEY_Arabic_kasra* = 0x000005F0
  CLUTTER_KEY_Arabic_shadda* = 0x000005F1
  CLUTTER_KEY_Arabic_sukun* = 0x000005F2
  CLUTTER_KEY_Arabic_madda_above* = 0x01000653
  CLUTTER_KEY_Arabic_hamza_above* = 0x01000654
  CLUTTER_KEY_Arabic_hamza_below* = 0x01000655
  CLUTTER_KEY_Arabic_jeh* = 0x01000698
  CLUTTER_KEY_Arabic_veh* = 0x010006A4
  CLUTTER_KEY_Arabic_keheh* = 0x010006A9
  CLUTTER_KEY_Arabic_gaf* = 0x010006AF
  CLUTTER_KEY_Arabic_noon_ghunna* = 0x010006BA
  CLUTTER_KEY_Arabic_heh_doachashmee* = 0x010006BE
  CLUTTER_KEY_Farsi_yeh* = 0x010006CC
  CLUTTER_KEY_Arabic_farsi_yeh* = 0x010006CC
  CLUTTER_KEY_Arabic_yeh_baree* = 0x010006D2
  CLUTTER_KEY_Arabic_heh_goal* = 0x010006C1
  CLUTTER_KEY_Arabic_switch* = 0x0000FF7E
  CLUTTER_KEY_Cyrillic_GHE_bar_upper* = 0x01000492
  CLUTTER_KEY_Cyrillic_ghe_bar* = 0x01000493
  CLUTTER_KEY_Cyrillic_ZHE_descender_upper* = 0x01000496
  CLUTTER_KEY_Cyrillic_zhe_descender* = 0x01000497
  CLUTTER_KEY_Cyrillic_KA_descender_upper* = 0x0100049A
  CLUTTER_KEY_Cyrillic_ka_descender* = 0x0100049B
  CLUTTER_KEY_Cyrillic_KA_vertstroke_upper* = 0x0100049C
  CLUTTER_KEY_Cyrillic_ka_vertstroke* = 0x0100049D
  CLUTTER_KEY_Cyrillic_EN_descender_upper* = 0x010004A2
  CLUTTER_KEY_Cyrillic_en_descender* = 0x010004A3
  CLUTTER_KEY_Cyrillic_U_straight_upper* = 0x010004AE
  CLUTTER_KEY_Cyrillic_u_straight* = 0x010004AF
  CLUTTER_KEY_Cyrillic_U_straight_bar_upper* = 0x010004B0
  CLUTTER_KEY_Cyrillic_u_straight_bar* = 0x010004B1
  CLUTTER_KEY_Cyrillic_HA_descender_upper* = 0x010004B2
  CLUTTER_KEY_Cyrillic_ha_descender* = 0x010004B3
  CLUTTER_KEY_Cyrillic_CHE_descender_upper* = 0x010004B6
  CLUTTER_KEY_Cyrillic_che_descender* = 0x010004B7
  CLUTTER_KEY_Cyrillic_CHE_vertstroke_upper* = 0x010004B8
  CLUTTER_KEY_Cyrillic_che_vertstroke* = 0x010004B9
  CLUTTER_KEY_Cyrillic_SHHA_upper* = 0x010004BA
  CLUTTER_KEY_Cyrillic_shha* = 0x010004BB
  CLUTTER_KEY_Cyrillic_SCHWA_upper* = 0x010004D8
  CLUTTER_KEY_Cyrillic_schwa* = 0x010004D9
  CLUTTER_KEY_Cyrillic_I_macron_upper* = 0x010004E2
  CLUTTER_KEY_Cyrillic_i_macron* = 0x010004E3
  CLUTTER_KEY_Cyrillic_O_bar_upper* = 0x010004E8
  CLUTTER_KEY_Cyrillic_o_bar* = 0x010004E9
  CLUTTER_KEY_Cyrillic_U_macron_upper* = 0x010004EE
  CLUTTER_KEY_Cyrillic_u_macron* = 0x010004EF
  CLUTTER_KEY_Serbian_dje* = 0x000006A1
  CLUTTER_KEY_Macedonia_gje* = 0x000006A2
  CLUTTER_KEY_Cyrillic_io* = 0x000006A3
  CLUTTER_KEY_Ukrainian_ie* = 0x000006A4
  CLUTTER_KEY_Ukranian_je* = 0x000006A4
  CLUTTER_KEY_Macedonia_dse* = 0x000006A5
  CLUTTER_KEY_Ukrainian_i* = 0x000006A6
  CLUTTER_KEY_Ukranian_i* = 0x000006A6
  CLUTTER_KEY_Ukrainian_yi* = 0x000006A7
  CLUTTER_KEY_Ukranian_yi* = 0x000006A7
  CLUTTER_KEY_Cyrillic_je* = 0x000006A8
  CLUTTER_KEY_Serbian_je* = 0x000006A8
  CLUTTER_KEY_Cyrillic_lje* = 0x000006A9
  CLUTTER_KEY_Serbian_lje* = 0x000006A9
  CLUTTER_KEY_Cyrillic_nje* = 0x000006AA
  CLUTTER_KEY_Serbian_nje* = 0x000006AA
  CLUTTER_KEY_Serbian_tshe* = 0x000006AB
  CLUTTER_KEY_Macedonia_kje* = 0x000006AC
  CLUTTER_KEY_Ukrainian_ghe_with_upturn* = 0x000006AD
  CLUTTER_KEY_Byelorussian_shortu* = 0x000006AE
  CLUTTER_KEY_Cyrillic_dzhe* = 0x000006AF
  CLUTTER_KEY_Serbian_dze* = 0x000006AF
  CLUTTER_KEY_numerosign* = 0x000006B0
  CLUTTER_KEY_Serbian_DJE_upper* = 0x000006B1
  CLUTTER_KEY_Macedonia_GJE_upper* = 0x000006B2
  CLUTTER_KEY_Cyrillic_IO_upper* = 0x000006B3
  CLUTTER_KEY_Ukrainian_IE_upper* = 0x000006B4
  CLUTTER_KEY_Ukranian_JE_upper* = 0x000006B4
  CLUTTER_KEY_Macedonia_DSE_upper* = 0x000006B5
  CLUTTER_KEY_Ukrainian_I_upper* = 0x000006B6
  CLUTTER_KEY_Ukranian_I_upper* = 0x000006B6
  CLUTTER_KEY_Ukrainian_YI_upper* = 0x000006B7
  CLUTTER_KEY_Ukranian_YI_upper* = 0x000006B7
  CLUTTER_KEY_Cyrillic_JE_upper* = 0x000006B8
  CLUTTER_KEY_Serbian_JE_upper* = 0x000006B8
  CLUTTER_KEY_Cyrillic_LJE_upper* = 0x000006B9
  CLUTTER_KEY_Serbian_LJE_upper* = 0x000006B9
  CLUTTER_KEY_Cyrillic_NJE_upper* = 0x000006BA
  CLUTTER_KEY_Serbian_NJE_upper* = 0x000006BA
  CLUTTER_KEY_Serbian_TSHE_upper* = 0x000006BB
  CLUTTER_KEY_Macedonia_KJE_upper* = 0x000006BC
  CLUTTER_KEY_Ukrainian_GHE_WITH_UPTURN_upper* = 0x000006BD
  CLUTTER_KEY_Byelorussian_SHORTU_upper* = 0x000006BE
  CLUTTER_KEY_Cyrillic_DZHE_upper* = 0x000006BF
  CLUTTER_KEY_Serbian_DZE_upper* = 0x000006BF
  CLUTTER_KEY_Cyrillic_yu* = 0x000006C0
  CLUTTER_KEY_Cyrillic_a* = 0x000006C1
  CLUTTER_KEY_Cyrillic_be* = 0x000006C2
  CLUTTER_KEY_Cyrillic_tse* = 0x000006C3
  CLUTTER_KEY_Cyrillic_de* = 0x000006C4
  CLUTTER_KEY_Cyrillic_ie* = 0x000006C5
  CLUTTER_KEY_Cyrillic_ef* = 0x000006C6
  CLUTTER_KEY_Cyrillic_ghe* = 0x000006C7
  CLUTTER_KEY_Cyrillic_ha* = 0x000006C8
  CLUTTER_KEY_Cyrillic_i* = 0x000006C9
  CLUTTER_KEY_Cyrillic_shorti* = 0x000006CA
  CLUTTER_KEY_Cyrillic_ka* = 0x000006CB
  CLUTTER_KEY_Cyrillic_el* = 0x000006CC
  CLUTTER_KEY_Cyrillic_em* = 0x000006CD
  CLUTTER_KEY_Cyrillic_en* = 0x000006CE
  CLUTTER_KEY_Cyrillic_o* = 0x000006CF
  CLUTTER_KEY_Cyrillic_pe* = 0x000006D0
  CLUTTER_KEY_Cyrillic_ya* = 0x000006D1
  CLUTTER_KEY_Cyrillic_er* = 0x000006D2
  CLUTTER_KEY_Cyrillic_es* = 0x000006D3
  CLUTTER_KEY_Cyrillic_te* = 0x000006D4
  CLUTTER_KEY_Cyrillic_u* = 0x000006D5
  CLUTTER_KEY_Cyrillic_zhe* = 0x000006D6
  CLUTTER_KEY_Cyrillic_ve* = 0x000006D7
  CLUTTER_KEY_Cyrillic_softsign* = 0x000006D8
  CLUTTER_KEY_Cyrillic_yeru* = 0x000006D9
  CLUTTER_KEY_Cyrillic_ze* = 0x000006DA
  CLUTTER_KEY_Cyrillic_sha* = 0x000006DB
  CLUTTER_KEY_Cyrillic_e* = 0x000006DC
  CLUTTER_KEY_Cyrillic_shcha* = 0x000006DD
  CLUTTER_KEY_Cyrillic_che* = 0x000006DE
  CLUTTER_KEY_Cyrillic_hardsign* = 0x000006DF
  CLUTTER_KEY_Cyrillic_YU_upper* = 0x000006E0
  CLUTTER_KEY_Cyrillic_A_upper* = 0x000006E1
  CLUTTER_KEY_Cyrillic_BE_upper* = 0x000006E2
  CLUTTER_KEY_Cyrillic_TSE_upper* = 0x000006E3
  CLUTTER_KEY_Cyrillic_DE_upper* = 0x000006E4
  CLUTTER_KEY_Cyrillic_IE_upper* = 0x000006E5
  CLUTTER_KEY_Cyrillic_EF_upper* = 0x000006E6
  CLUTTER_KEY_Cyrillic_GHE_upper* = 0x000006E7
  CLUTTER_KEY_Cyrillic_HA_upper* = 0x000006E8
  CLUTTER_KEY_Cyrillic_I_upper* = 0x000006E9
  CLUTTER_KEY_Cyrillic_SHORTI_upper* = 0x000006EA
  CLUTTER_KEY_Cyrillic_KA_upper* = 0x000006EB
  CLUTTER_KEY_Cyrillic_EL_upper* = 0x000006EC
  CLUTTER_KEY_Cyrillic_EM_upper* = 0x000006ED
  CLUTTER_KEY_Cyrillic_EN_upper* = 0x000006EE
  CLUTTER_KEY_Cyrillic_O_upper* = 0x000006EF
  CLUTTER_KEY_Cyrillic_PE_upper* = 0x000006F0
  CLUTTER_KEY_Cyrillic_YA_upper* = 0x000006F1
  CLUTTER_KEY_Cyrillic_ER_upper* = 0x000006F2
  CLUTTER_KEY_Cyrillic_ES_upper* = 0x000006F3
  CLUTTER_KEY_Cyrillic_TE_upper* = 0x000006F4
  CLUTTER_KEY_Cyrillic_U_upper* = 0x000006F5
  CLUTTER_KEY_Cyrillic_ZHE_upper* = 0x000006F6
  CLUTTER_KEY_Cyrillic_VE_upper* = 0x000006F7
  CLUTTER_KEY_Cyrillic_SOFTSIGN_upper* = 0x000006F8
  CLUTTER_KEY_Cyrillic_YERU_upper* = 0x000006F9
  CLUTTER_KEY_Cyrillic_ZE_upper* = 0x000006FA
  CLUTTER_KEY_Cyrillic_SHA_upper* = 0x000006FB
  CLUTTER_KEY_Cyrillic_E_upper* = 0x000006FC
  CLUTTER_KEY_Cyrillic_SHCHA_upper* = 0x000006FD
  CLUTTER_KEY_Cyrillic_CHE_upper* = 0x000006FE
  CLUTTER_KEY_Cyrillic_HARDSIGN_upper* = 0x000006FF
  CLUTTER_KEY_Greek_ALPHAaccent_upper* = 0x000007A1
  CLUTTER_KEY_Greek_EPSILONaccent_upper* = 0x000007A2
  CLUTTER_KEY_Greek_ETAaccent_upper* = 0x000007A3
  CLUTTER_KEY_Greek_IOTAaccent_upper* = 0x000007A4
  CLUTTER_KEY_Greek_IOTAdieresis_upper* = 0x000007A5
  CLUTTER_KEY_Greek_IOTAdiaeresis_upper* = 0x000007A5
  CLUTTER_KEY_Greek_OMICRONaccent_upper* = 0x000007A7
  CLUTTER_KEY_Greek_UPSILONaccent_upper* = 0x000007A8
  CLUTTER_KEY_Greek_UPSILONdieresis_upper* = 0x000007A9
  CLUTTER_KEY_Greek_OMEGAaccent_upper* = 0x000007AB
  CLUTTER_KEY_Greek_accentdieresis* = 0x000007AE
  CLUTTER_KEY_Greek_horizbar* = 0x000007AF
  CLUTTER_KEY_Greek_alphaaccent* = 0x000007B1
  CLUTTER_KEY_Greek_epsilonaccent* = 0x000007B2
  CLUTTER_KEY_Greek_etaaccent* = 0x000007B3
  CLUTTER_KEY_Greek_iotaaccent* = 0x000007B4
  CLUTTER_KEY_Greek_iotadieresis* = 0x000007B5
  CLUTTER_KEY_Greek_iotaaccentdieresis* = 0x000007B6
  CLUTTER_KEY_Greek_omicronaccent* = 0x000007B7
  CLUTTER_KEY_Greek_upsilonaccent* = 0x000007B8
  CLUTTER_KEY_Greek_upsilondieresis* = 0x000007B9
  CLUTTER_KEY_Greek_upsilonaccentdieresis* = 0x000007BA
  CLUTTER_KEY_Greek_omegaaccent* = 0x000007BB
  CLUTTER_KEY_Greek_ALPHA_upper* = 0x000007C1
  CLUTTER_KEY_Greek_BETA_upper* = 0x000007C2
  CLUTTER_KEY_Greek_GAMMA_upper* = 0x000007C3
  CLUTTER_KEY_Greek_DELTA_upper* = 0x000007C4
  CLUTTER_KEY_Greek_EPSILON_upper* = 0x000007C5
  CLUTTER_KEY_Greek_ZETA_upper* = 0x000007C6
  CLUTTER_KEY_Greek_ETA_upper* = 0x000007C7
  CLUTTER_KEY_Greek_THETA_upper* = 0x000007C8
  CLUTTER_KEY_Greek_IOTA_upper* = 0x000007C9
  CLUTTER_KEY_Greek_KAPPA_upper* = 0x000007CA
  CLUTTER_KEY_Greek_LAMDA_upper* = 0x000007CB
  CLUTTER_KEY_Greek_LAMBDA_upper* = 0x000007CB
  CLUTTER_KEY_Greek_MU_upper* = 0x000007CC
  CLUTTER_KEY_Greek_NU_upper* = 0x000007CD
  CLUTTER_KEY_Greek_XI_upper* = 0x000007CE
  CLUTTER_KEY_Greek_OMICRON_upper* = 0x000007CF
  CLUTTER_KEY_Greek_PI_upper* = 0x000007D0
  CLUTTER_KEY_Greek_RHO_upper* = 0x000007D1
  CLUTTER_KEY_Greek_SIGMA_upper* = 0x000007D2
  CLUTTER_KEY_Greek_TAU_upper* = 0x000007D4
  CLUTTER_KEY_Greek_UPSILON_upper* = 0x000007D5
  CLUTTER_KEY_Greek_PHI_upper* = 0x000007D6
  CLUTTER_KEY_Greek_CHI_upper* = 0x000007D7
  CLUTTER_KEY_Greek_PSI_upper* = 0x000007D8
  CLUTTER_KEY_Greek_OMEGA_upper* = 0x000007D9
  CLUTTER_KEY_Greek_alpha* = 0x000007E1
  CLUTTER_KEY_Greek_beta* = 0x000007E2
  CLUTTER_KEY_Greek_gamma* = 0x000007E3
  CLUTTER_KEY_Greek_delta* = 0x000007E4
  CLUTTER_KEY_Greek_epsilon* = 0x000007E5
  CLUTTER_KEY_Greek_zeta* = 0x000007E6
  CLUTTER_KEY_Greek_eta* = 0x000007E7
  CLUTTER_KEY_Greek_theta* = 0x000007E8
  CLUTTER_KEY_Greek_iota* = 0x000007E9
  CLUTTER_KEY_Greek_kappa* = 0x000007EA
  CLUTTER_KEY_Greek_lamda* = 0x000007EB
  CLUTTER_KEY_Greek_lambda* = 0x000007EB
  CLUTTER_KEY_Greek_mu* = 0x000007EC
  CLUTTER_KEY_Greek_nu* = 0x000007ED
  CLUTTER_KEY_Greek_xi* = 0x000007EE
  CLUTTER_KEY_Greek_omicron* = 0x000007EF
  CLUTTER_KEY_Greek_pi* = 0x000007F0
  CLUTTER_KEY_Greek_rho* = 0x000007F1
  CLUTTER_KEY_Greek_sigma* = 0x000007F2
  CLUTTER_KEY_Greek_finalsmallsigma* = 0x000007F3
  CLUTTER_KEY_Greek_tau* = 0x000007F4
  CLUTTER_KEY_Greek_upsilon* = 0x000007F5
  CLUTTER_KEY_Greek_phi* = 0x000007F6
  CLUTTER_KEY_Greek_chi* = 0x000007F7
  CLUTTER_KEY_Greek_psi* = 0x000007F8
  CLUTTER_KEY_Greek_omega* = 0x000007F9
  CLUTTER_KEY_Greek_switch* = 0x0000FF7E
  CLUTTER_KEY_leftradical* = 0x000008A1
  CLUTTER_KEY_topleftradical* = 0x000008A2
  CLUTTER_KEY_horizconnector* = 0x000008A3
  CLUTTER_KEY_topintegral* = 0x000008A4
  CLUTTER_KEY_botintegral* = 0x000008A5
  CLUTTER_KEY_vertconnector* = 0x000008A6
  CLUTTER_KEY_topleftsqbracket* = 0x000008A7
  CLUTTER_KEY_botleftsqbracket* = 0x000008A8
  CLUTTER_KEY_toprightsqbracket* = 0x000008A9
  CLUTTER_KEY_botrightsqbracket* = 0x000008AA
  CLUTTER_KEY_topleftparens* = 0x000008AB
  CLUTTER_KEY_botleftparens* = 0x000008AC
  CLUTTER_KEY_toprightparens* = 0x000008AD
  CLUTTER_KEY_botrightparens* = 0x000008AE
  CLUTTER_KEY_leftmiddlecurlybrace* = 0x000008AF
  CLUTTER_KEY_rightmiddlecurlybrace* = 0x000008B0
  CLUTTER_KEY_topleftsummation* = 0x000008B1
  CLUTTER_KEY_botleftsummation* = 0x000008B2
  CLUTTER_KEY_topvertsummationconnector* = 0x000008B3
  CLUTTER_KEY_botvertsummationconnector* = 0x000008B4
  CLUTTER_KEY_toprightsummation* = 0x000008B5
  CLUTTER_KEY_botrightsummation* = 0x000008B6
  CLUTTER_KEY_rightmiddlesummation* = 0x000008B7
  CLUTTER_KEY_lessthanequal* = 0x000008BC
  CLUTTER_KEY_notequal* = 0x000008BD
  CLUTTER_KEY_greaterthanequal* = 0x000008BE
  CLUTTER_KEY_integral* = 0x000008BF
  CLUTTER_KEY_therefore* = 0x000008C0
  CLUTTER_KEY_variation* = 0x000008C1
  CLUTTER_KEY_infinity* = 0x000008C2
  CLUTTER_KEY_nabla* = 0x000008C5
  CLUTTER_KEY_approximate* = 0x000008C8
  CLUTTER_KEY_similarequal* = 0x000008C9
  CLUTTER_KEY_ifonlyif* = 0x000008CD
  CLUTTER_KEY_implies* = 0x000008CE
  CLUTTER_KEY_identical* = 0x000008CF
  CLUTTER_KEY_radical* = 0x000008D6
  CLUTTER_KEY_includedin* = 0x000008DA
  CLUTTER_KEY_includes* = 0x000008DB
  CLUTTER_KEY_intersection* = 0x000008DC
  CLUTTER_KEY_union* = 0x000008DD
  CLUTTER_KEY_logicaland* = 0x000008DE
  CLUTTER_KEY_logicalor* = 0x000008DF
  CLUTTER_KEY_partialderivative* = 0x000008EF
  CLUTTER_KEY_function* = 0x000008F6
  CLUTTER_KEY_leftarrow* = 0x000008FB
  CLUTTER_KEY_uparrow* = 0x000008FC
  CLUTTER_KEY_rightarrow* = 0x000008FD
  CLUTTER_KEY_downarrow* = 0x000008FE
  CLUTTER_KEY_blank* = 0x000009DF
  CLUTTER_KEY_soliddiamond* = 0x000009E0
  CLUTTER_KEY_checkerboard* = 0x000009E1
  CLUTTER_KEY_ht* = 0x000009E2
  CLUTTER_KEY_ff* = 0x000009E3
  CLUTTER_KEY_cr* = 0x000009E4
  CLUTTER_KEY_lf* = 0x000009E5
  CLUTTER_KEY_nl* = 0x000009E8
  CLUTTER_KEY_vt* = 0x000009E9
  CLUTTER_KEY_lowrightcorner* = 0x000009EA
  CLUTTER_KEY_uprightcorner* = 0x000009EB
  CLUTTER_KEY_upleftcorner* = 0x000009EC
  CLUTTER_KEY_lowleftcorner* = 0x000009ED
  CLUTTER_KEY_crossinglines* = 0x000009EE
  CLUTTER_KEY_horizlinescan1* = 0x000009EF
  CLUTTER_KEY_horizlinescan3* = 0x000009F0
  CLUTTER_KEY_horizlinescan5* = 0x000009F1
  CLUTTER_KEY_horizlinescan7* = 0x000009F2
  CLUTTER_KEY_horizlinescan9* = 0x000009F3
  CLUTTER_KEY_leftt* = 0x000009F4
  CLUTTER_KEY_rightt* = 0x000009F5
  CLUTTER_KEY_bott* = 0x000009F6
  CLUTTER_KEY_topt* = 0x000009F7
  CLUTTER_KEY_vertbar* = 0x000009F8
  CLUTTER_KEY_emspace* = 0x00000AA1
  CLUTTER_KEY_enspace* = 0x00000AA2
  CLUTTER_KEY_em3space* = 0x00000AA3
  CLUTTER_KEY_em4space* = 0x00000AA4
  CLUTTER_KEY_digitspace* = 0x00000AA5
  CLUTTER_KEY_punctspace* = 0x00000AA6
  CLUTTER_KEY_thinspace* = 0x00000AA7
  CLUTTER_KEY_hairspace* = 0x00000AA8
  CLUTTER_KEY_emdash* = 0x00000AA9
  CLUTTER_KEY_endash* = 0x00000AAA
  CLUTTER_KEY_signifblank* = 0x00000AAC
  CLUTTER_KEY_ellipsis* = 0x00000AAE
  CLUTTER_KEY_doubbaselinedot* = 0x00000AAF
  CLUTTER_KEY_onethird* = 0x00000AB0
  CLUTTER_KEY_twothirds* = 0x00000AB1
  CLUTTER_KEY_onefifth* = 0x00000AB2
  CLUTTER_KEY_twofifths* = 0x00000AB3
  CLUTTER_KEY_threefifths* = 0x00000AB4
  CLUTTER_KEY_fourfifths* = 0x00000AB5
  CLUTTER_KEY_onesixth* = 0x00000AB6
  CLUTTER_KEY_fivesixths* = 0x00000AB7
  CLUTTER_KEY_careof* = 0x00000AB8
  CLUTTER_KEY_figdash* = 0x00000ABB
  CLUTTER_KEY_leftanglebracket* = 0x00000ABC
  CLUTTER_KEY_decimalpoint* = 0x00000ABD
  CLUTTER_KEY_rightanglebracket* = 0x00000ABE
  CLUTTER_KEY_marker* = 0x00000ABF
  CLUTTER_KEY_oneeighth* = 0x00000AC3
  CLUTTER_KEY_threeeighths* = 0x00000AC4
  CLUTTER_KEY_fiveeighths* = 0x00000AC5
  CLUTTER_KEY_seveneighths* = 0x00000AC6
  CLUTTER_KEY_trademark* = 0x00000AC9
  CLUTTER_KEY_signaturemark* = 0x00000ACA
  CLUTTER_KEY_trademarkincircle* = 0x00000ACB
  CLUTTER_KEY_leftopentriangle* = 0x00000ACC
  CLUTTER_KEY_rightopentriangle* = 0x00000ACD
  CLUTTER_KEY_emopencircle* = 0x00000ACE
  CLUTTER_KEY_emopenrectangle* = 0x00000ACF
  CLUTTER_KEY_leftsinglequotemark* = 0x00000AD0
  CLUTTER_KEY_rightsinglequotemark* = 0x00000AD1
  CLUTTER_KEY_leftdoublequotemark* = 0x00000AD2
  CLUTTER_KEY_rightdoublequotemark* = 0x00000AD3
  CLUTTER_KEY_prescription* = 0x00000AD4
  CLUTTER_KEY_permille* = 0x00000AD5
  CLUTTER_KEY_minutes* = 0x00000AD6
  CLUTTER_KEY_seconds* = 0x00000AD7
  CLUTTER_KEY_latincross* = 0x00000AD9
  CLUTTER_KEY_hexagram* = 0x00000ADA
  CLUTTER_KEY_filledrectbullet* = 0x00000ADB
  CLUTTER_KEY_filledlefttribullet* = 0x00000ADC
  CLUTTER_KEY_filledrighttribullet* = 0x00000ADD
  CLUTTER_KEY_emfilledcircle* = 0x00000ADE
  CLUTTER_KEY_emfilledrect* = 0x00000ADF
  CLUTTER_KEY_enopencircbullet* = 0x00000AE0
  CLUTTER_KEY_enopensquarebullet* = 0x00000AE1
  CLUTTER_KEY_openrectbullet* = 0x00000AE2
  CLUTTER_KEY_opentribulletup* = 0x00000AE3
  CLUTTER_KEY_opentribulletdown* = 0x00000AE4
  CLUTTER_KEY_openstar* = 0x00000AE5
  CLUTTER_KEY_enfilledcircbullet* = 0x00000AE6
  CLUTTER_KEY_enfilledsqbullet* = 0x00000AE7
  CLUTTER_KEY_filledtribulletup* = 0x00000AE8
  CLUTTER_KEY_filledtribulletdown* = 0x00000AE9
  CLUTTER_KEY_leftpointer* = 0x00000AEA
  CLUTTER_KEY_rightpointer* = 0x00000AEB
  CLUTTER_KEY_club* = 0x00000AEC
  CLUTTER_KEY_diamond* = 0x00000AED
  CLUTTER_KEY_heart* = 0x00000AEE
  CLUTTER_KEY_maltesecross* = 0x00000AF0
  CLUTTER_KEY_dagger* = 0x00000AF1
  CLUTTER_KEY_doubledagger* = 0x00000AF2
  CLUTTER_KEY_checkmark* = 0x00000AF3
  CLUTTER_KEY_ballotcross* = 0x00000AF4
  CLUTTER_KEY_musicalsharp* = 0x00000AF5
  CLUTTER_KEY_musicalflat* = 0x00000AF6
  CLUTTER_KEY_malesymbol* = 0x00000AF7
  CLUTTER_KEY_femalesymbol* = 0x00000AF8
  CLUTTER_KEY_telephone* = 0x00000AF9
  CLUTTER_KEY_telephonerecorder* = 0x00000AFA
  CLUTTER_KEY_phonographcopyright* = 0x00000AFB
  CLUTTER_KEY_caret* = 0x00000AFC
  CLUTTER_KEY_singlelowquotemark* = 0x00000AFD
  CLUTTER_KEY_doublelowquotemark* = 0x00000AFE
  CLUTTER_KEY_cursor* = 0x00000AFF
  CLUTTER_KEY_leftcaret* = 0x00000BA3
  CLUTTER_KEY_rightcaret* = 0x00000BA6
  CLUTTER_KEY_downcaret* = 0x00000BA8
  CLUTTER_KEY_upcaret* = 0x00000BA9
  CLUTTER_KEY_overbar* = 0x00000BC0
  CLUTTER_KEY_downtack* = 0x00000BC2
  CLUTTER_KEY_upshoe* = 0x00000BC3
  CLUTTER_KEY_downstile* = 0x00000BC4
  CLUTTER_KEY_underbar* = 0x00000BC6
  CLUTTER_KEY_jot* = 0x00000BCA
  CLUTTER_KEY_quad* = 0x00000BCC
  CLUTTER_KEY_uptack* = 0x00000BCE
  CLUTTER_KEY_circle* = 0x00000BCF
  CLUTTER_KEY_upstile* = 0x00000BD3
  CLUTTER_KEY_downshoe* = 0x00000BD6
  CLUTTER_KEY_rightshoe* = 0x00000BD8
  CLUTTER_KEY_leftshoe* = 0x00000BDA
  CLUTTER_KEY_lefttack* = 0x00000BDC
  CLUTTER_KEY_righttack* = 0x00000BFC
  CLUTTER_KEY_hebrew_doublelowline* = 0x00000CDF
  CLUTTER_KEY_hebrew_aleph* = 0x00000CE0
  CLUTTER_KEY_hebrew_bet* = 0x00000CE1
  CLUTTER_KEY_hebrew_beth* = 0x00000CE1
  CLUTTER_KEY_hebrew_gimel* = 0x00000CE2
  CLUTTER_KEY_hebrew_gimmel* = 0x00000CE2
  CLUTTER_KEY_hebrew_dalet* = 0x00000CE3
  CLUTTER_KEY_hebrew_daleth* = 0x00000CE3
  CLUTTER_KEY_hebrew_he* = 0x00000CE4
  CLUTTER_KEY_hebrew_waw* = 0x00000CE5
  CLUTTER_KEY_hebrew_zain* = 0x00000CE6
  CLUTTER_KEY_hebrew_zayin* = 0x00000CE6
  CLUTTER_KEY_hebrew_chet* = 0x00000CE7
  CLUTTER_KEY_hebrew_het* = 0x00000CE7
  CLUTTER_KEY_hebrew_tet* = 0x00000CE8
  CLUTTER_KEY_hebrew_teth* = 0x00000CE8
  CLUTTER_KEY_hebrew_yod* = 0x00000CE9
  CLUTTER_KEY_hebrew_finalkaph* = 0x00000CEA
  CLUTTER_KEY_hebrew_kaph* = 0x00000CEB
  CLUTTER_KEY_hebrew_lamed* = 0x00000CEC
  CLUTTER_KEY_hebrew_finalmem* = 0x00000CED
  CLUTTER_KEY_hebrew_mem* = 0x00000CEE
  CLUTTER_KEY_hebrew_finalnun* = 0x00000CEF
  CLUTTER_KEY_hebrew_nun* = 0x00000CF0
  CLUTTER_KEY_hebrew_samech* = 0x00000CF1
  CLUTTER_KEY_hebrew_samekh* = 0x00000CF1
  CLUTTER_KEY_hebrew_ayin* = 0x00000CF2
  CLUTTER_KEY_hebrew_finalpe* = 0x00000CF3
  CLUTTER_KEY_hebrew_pe* = 0x00000CF4
  CLUTTER_KEY_hebrew_finalzade* = 0x00000CF5
  CLUTTER_KEY_hebrew_finalzadi* = 0x00000CF5
  CLUTTER_KEY_hebrew_zade* = 0x00000CF6
  CLUTTER_KEY_hebrew_zadi* = 0x00000CF6
  CLUTTER_KEY_hebrew_qoph* = 0x00000CF7
  CLUTTER_KEY_hebrew_kuf* = 0x00000CF7
  CLUTTER_KEY_hebrew_resh* = 0x00000CF8
  CLUTTER_KEY_hebrew_shin* = 0x00000CF9
  CLUTTER_KEY_hebrew_taw* = 0x00000CFA
  CLUTTER_KEY_hebrew_taf* = 0x00000CFA
  CLUTTER_KEY_Hebrew_switch* = 0x0000FF7E
  CLUTTER_KEY_Thai_kokai* = 0x00000DA1
  CLUTTER_KEY_Thai_khokhai* = 0x00000DA2
  CLUTTER_KEY_Thai_khokhuat* = 0x00000DA3
  CLUTTER_KEY_Thai_khokhwai* = 0x00000DA4
  CLUTTER_KEY_Thai_khokhon* = 0x00000DA5
  CLUTTER_KEY_Thai_khorakhang* = 0x00000DA6
  CLUTTER_KEY_Thai_ngongu* = 0x00000DA7
  CLUTTER_KEY_Thai_chochan* = 0x00000DA8
  CLUTTER_KEY_Thai_choching* = 0x00000DA9
  CLUTTER_KEY_Thai_chochang* = 0x00000DAA
  CLUTTER_KEY_Thai_soso* = 0x00000DAB
  CLUTTER_KEY_Thai_chochoe* = 0x00000DAC
  CLUTTER_KEY_Thai_yoying* = 0x00000DAD
  CLUTTER_KEY_Thai_dochada* = 0x00000DAE
  CLUTTER_KEY_Thai_topatak* = 0x00000DAF
  CLUTTER_KEY_Thai_thothan* = 0x00000DB0
  CLUTTER_KEY_Thai_thonangmontho* = 0x00000DB1
  CLUTTER_KEY_Thai_thophuthao* = 0x00000DB2
  CLUTTER_KEY_Thai_nonen* = 0x00000DB3
  CLUTTER_KEY_Thai_dodek* = 0x00000DB4
  CLUTTER_KEY_Thai_totao* = 0x00000DB5
  CLUTTER_KEY_Thai_thothung* = 0x00000DB6
  CLUTTER_KEY_Thai_thothahan* = 0x00000DB7
  CLUTTER_KEY_Thai_thothong* = 0x00000DB8
  CLUTTER_KEY_Thai_nonu* = 0x00000DB9
  CLUTTER_KEY_Thai_bobaimai* = 0x00000DBA
  CLUTTER_KEY_Thai_popla* = 0x00000DBB
  CLUTTER_KEY_Thai_phophung* = 0x00000DBC
  CLUTTER_KEY_Thai_fofa* = 0x00000DBD
  CLUTTER_KEY_Thai_phophan* = 0x00000DBE
  CLUTTER_KEY_Thai_fofan* = 0x00000DBF
  CLUTTER_KEY_Thai_phosamphao* = 0x00000DC0
  CLUTTER_KEY_Thai_moma* = 0x00000DC1
  CLUTTER_KEY_Thai_yoyak* = 0x00000DC2
  CLUTTER_KEY_Thai_rorua* = 0x00000DC3
  CLUTTER_KEY_Thai_ru* = 0x00000DC4
  CLUTTER_KEY_Thai_loling* = 0x00000DC5
  CLUTTER_KEY_Thai_lu* = 0x00000DC6
  CLUTTER_KEY_Thai_wowaen* = 0x00000DC7
  CLUTTER_KEY_Thai_sosala* = 0x00000DC8
  CLUTTER_KEY_Thai_sorusi* = 0x00000DC9
  CLUTTER_KEY_Thai_sosua* = 0x00000DCA
  CLUTTER_KEY_Thai_hohip* = 0x00000DCB
  CLUTTER_KEY_Thai_lochula* = 0x00000DCC
  CLUTTER_KEY_Thai_oang* = 0x00000DCD
  CLUTTER_KEY_Thai_honokhuk* = 0x00000DCE
  CLUTTER_KEY_Thai_paiyannoi* = 0x00000DCF
  CLUTTER_KEY_Thai_saraa* = 0x00000DD0
  CLUTTER_KEY_Thai_maihanakat* = 0x00000DD1
  CLUTTER_KEY_Thai_saraaa* = 0x00000DD2
  CLUTTER_KEY_Thai_saraam* = 0x00000DD3
  CLUTTER_KEY_Thai_sarai* = 0x00000DD4
  CLUTTER_KEY_Thai_saraii* = 0x00000DD5
  CLUTTER_KEY_Thai_saraue* = 0x00000DD6
  CLUTTER_KEY_Thai_sarauee* = 0x00000DD7
  CLUTTER_KEY_Thai_sarau* = 0x00000DD8
  CLUTTER_KEY_Thai_sarauu* = 0x00000DD9
  CLUTTER_KEY_Thai_phinthu* = 0x00000DDA
  CLUTTER_KEY_Thai_maihanakat_maitho* = 0x00000DDE
  CLUTTER_KEY_Thai_baht* = 0x00000DDF
  CLUTTER_KEY_Thai_sarae* = 0x00000DE0
  CLUTTER_KEY_Thai_saraae* = 0x00000DE1
  CLUTTER_KEY_Thai_sarao* = 0x00000DE2
  CLUTTER_KEY_Thai_saraaimaimuan* = 0x00000DE3
  CLUTTER_KEY_Thai_saraaimaimalai* = 0x00000DE4
  CLUTTER_KEY_Thai_lakkhangyao* = 0x00000DE5
  CLUTTER_KEY_Thai_maiyamok* = 0x00000DE6
  CLUTTER_KEY_Thai_maitaikhu* = 0x00000DE7
  CLUTTER_KEY_Thai_maiek* = 0x00000DE8
  CLUTTER_KEY_Thai_maitho* = 0x00000DE9
  CLUTTER_KEY_Thai_maitri* = 0x00000DEA
  CLUTTER_KEY_Thai_maichattawa* = 0x00000DEB
  CLUTTER_KEY_Thai_thanthakhat* = 0x00000DEC
  CLUTTER_KEY_Thai_nikhahit* = 0x00000DED
  CLUTTER_KEY_Thai_leksun* = 0x00000DF0
  CLUTTER_KEY_Thai_leknung* = 0x00000DF1
  CLUTTER_KEY_Thai_leksong* = 0x00000DF2
  CLUTTER_KEY_Thai_leksam* = 0x00000DF3
  CLUTTER_KEY_Thai_leksi* = 0x00000DF4
  CLUTTER_KEY_Thai_lekha* = 0x00000DF5
  CLUTTER_KEY_Thai_lekhok* = 0x00000DF6
  CLUTTER_KEY_Thai_lekchet* = 0x00000DF7
  CLUTTER_KEY_Thai_lekpaet* = 0x00000DF8
  CLUTTER_KEY_Thai_lekkao* = 0x00000DF9
  CLUTTER_KEY_Hangul* = 0x0000FF31
  CLUTTER_KEY_Hangul_Start* = 0x0000FF32
  CLUTTER_KEY_Hangul_End* = 0x0000FF33
  CLUTTER_KEY_Hangul_Hanja* = 0x0000FF34
  CLUTTER_KEY_Hangul_Jamo* = 0x0000FF35
  CLUTTER_KEY_Hangul_Romaja* = 0x0000FF36
  CLUTTER_KEY_Hangul_Codeinput* = 0x0000FF37
  CLUTTER_KEY_Hangul_Jeonja* = 0x0000FF38
  CLUTTER_KEY_Hangul_Banja* = 0x0000FF39
  CLUTTER_KEY_Hangul_PreHanja* = 0x0000FF3A
  CLUTTER_KEY_Hangul_PostHanja* = 0x0000FF3B
  CLUTTER_KEY_Hangul_SingleCandidate* = 0x0000FF3C
  CLUTTER_KEY_Hangul_MultipleCandidate* = 0x0000FF3D
  CLUTTER_KEY_Hangul_PreviousCandidate* = 0x0000FF3E
  CLUTTER_KEY_Hangul_Special* = 0x0000FF3F
  CLUTTER_KEY_Hangul_switch* = 0x0000FF7E
  CLUTTER_KEY_Hangul_Kiyeog* = 0x00000EA1
  CLUTTER_KEY_Hangul_SsangKiyeog* = 0x00000EA2
  CLUTTER_KEY_Hangul_KiyeogSios* = 0x00000EA3
  CLUTTER_KEY_Hangul_Nieun* = 0x00000EA4
  CLUTTER_KEY_Hangul_NieunJieuj* = 0x00000EA5
  CLUTTER_KEY_Hangul_NieunHieuh* = 0x00000EA6
  CLUTTER_KEY_Hangul_Dikeud* = 0x00000EA7
  CLUTTER_KEY_Hangul_SsangDikeud* = 0x00000EA8
  CLUTTER_KEY_Hangul_Rieul* = 0x00000EA9
  CLUTTER_KEY_Hangul_RieulKiyeog* = 0x00000EAA
  CLUTTER_KEY_Hangul_RieulMieum* = 0x00000EAB
  CLUTTER_KEY_Hangul_RieulPieub* = 0x00000EAC
  CLUTTER_KEY_Hangul_RieulSios* = 0x00000EAD
  CLUTTER_KEY_Hangul_RieulTieut* = 0x00000EAE
  CLUTTER_KEY_Hangul_RieulPhieuf* = 0x00000EAF
  CLUTTER_KEY_Hangul_RieulHieuh* = 0x00000EB0
  CLUTTER_KEY_Hangul_Mieum* = 0x00000EB1
  CLUTTER_KEY_Hangul_Pieub* = 0x00000EB2
  CLUTTER_KEY_Hangul_SsangPieub* = 0x00000EB3
  CLUTTER_KEY_Hangul_PieubSios* = 0x00000EB4
  CLUTTER_KEY_Hangul_Sios* = 0x00000EB5
  CLUTTER_KEY_Hangul_SsangSios* = 0x00000EB6
  CLUTTER_KEY_Hangul_Ieung* = 0x00000EB7
  CLUTTER_KEY_Hangul_Jieuj* = 0x00000EB8
  CLUTTER_KEY_Hangul_SsangJieuj* = 0x00000EB9
  CLUTTER_KEY_Hangul_Cieuc* = 0x00000EBA
  CLUTTER_KEY_Hangul_Khieuq* = 0x00000EBB
  CLUTTER_KEY_Hangul_Tieut* = 0x00000EBC
  CLUTTER_KEY_Hangul_Phieuf* = 0x00000EBD
  CLUTTER_KEY_Hangul_Hieuh* = 0x00000EBE
  CLUTTER_KEY_Hangul_A* = 0x00000EBF
  CLUTTER_KEY_Hangul_AE* = 0x00000EC0
  CLUTTER_KEY_Hangul_YA* = 0x00000EC1
  CLUTTER_KEY_Hangul_YAE* = 0x00000EC2
  CLUTTER_KEY_Hangul_EO* = 0x00000EC3
  CLUTTER_KEY_Hangul_E* = 0x00000EC4
  CLUTTER_KEY_Hangul_YEO* = 0x00000EC5
  CLUTTER_KEY_Hangul_YE* = 0x00000EC6
  CLUTTER_KEY_Hangul_O* = 0x00000EC7
  CLUTTER_KEY_Hangul_WA* = 0x00000EC8
  CLUTTER_KEY_Hangul_WAE* = 0x00000EC9
  CLUTTER_KEY_Hangul_OE* = 0x00000ECA
  CLUTTER_KEY_Hangul_YO* = 0x00000ECB
  CLUTTER_KEY_Hangul_U* = 0x00000ECC
  CLUTTER_KEY_Hangul_WEO* = 0x00000ECD
  CLUTTER_KEY_Hangul_WE* = 0x00000ECE
  CLUTTER_KEY_Hangul_WI* = 0x00000ECF
  CLUTTER_KEY_Hangul_YU* = 0x00000ED0
  CLUTTER_KEY_Hangul_EU* = 0x00000ED1
  CLUTTER_KEY_Hangul_YI* = 0x00000ED2
  CLUTTER_KEY_Hangul_I* = 0x00000ED3
  CLUTTER_KEY_Hangul_J_Kiyeog* = 0x00000ED4
  CLUTTER_KEY_Hangul_J_SsangKiyeog* = 0x00000ED5
  CLUTTER_KEY_Hangul_J_KiyeogSios* = 0x00000ED6
  CLUTTER_KEY_Hangul_J_Nieun* = 0x00000ED7
  CLUTTER_KEY_Hangul_J_NieunJieuj* = 0x00000ED8
  CLUTTER_KEY_Hangul_J_NieunHieuh* = 0x00000ED9
  CLUTTER_KEY_Hangul_J_Dikeud* = 0x00000EDA
  CLUTTER_KEY_Hangul_J_Rieul* = 0x00000EDB
  CLUTTER_KEY_Hangul_J_RieulKiyeog* = 0x00000EDC
  CLUTTER_KEY_Hangul_J_RieulMieum* = 0x00000EDD
  CLUTTER_KEY_Hangul_J_RieulPieub* = 0x00000EDE
  CLUTTER_KEY_Hangul_J_RieulSios* = 0x00000EDF
  CLUTTER_KEY_Hangul_J_RieulTieut* = 0x00000EE0
  CLUTTER_KEY_Hangul_J_RieulPhieuf* = 0x00000EE1
  CLUTTER_KEY_Hangul_J_RieulHieuh* = 0x00000EE2
  CLUTTER_KEY_Hangul_J_Mieum* = 0x00000EE3
  CLUTTER_KEY_Hangul_J_Pieub* = 0x00000EE4
  CLUTTER_KEY_Hangul_J_PieubSios* = 0x00000EE5
  CLUTTER_KEY_Hangul_J_Sios* = 0x00000EE6
  CLUTTER_KEY_Hangul_J_SsangSios* = 0x00000EE7
  CLUTTER_KEY_Hangul_J_Ieung* = 0x00000EE8
  CLUTTER_KEY_Hangul_J_Jieuj* = 0x00000EE9
  CLUTTER_KEY_Hangul_J_Cieuc* = 0x00000EEA
  CLUTTER_KEY_Hangul_J_Khieuq* = 0x00000EEB
  CLUTTER_KEY_Hangul_J_Tieut* = 0x00000EEC
  CLUTTER_KEY_Hangul_J_Phieuf* = 0x00000EED
  CLUTTER_KEY_Hangul_J_Hieuh* = 0x00000EEE
  CLUTTER_KEY_Hangul_RieulYeorinHieuh* = 0x00000EEF
  CLUTTER_KEY_Hangul_SunkyeongeumMieum* = 0x00000EF0
  CLUTTER_KEY_Hangul_SunkyeongeumPieub* = 0x00000EF1
  CLUTTER_KEY_Hangul_PanSios* = 0x00000EF2
  CLUTTER_KEY_Hangul_KkogjiDalrinIeung* = 0x00000EF3
  CLUTTER_KEY_Hangul_SunkyeongeumPhieuf* = 0x00000EF4
  CLUTTER_KEY_Hangul_YeorinHieuh* = 0x00000EF5
  CLUTTER_KEY_Hangul_AraeA* = 0x00000EF6
  CLUTTER_KEY_Hangul_AraeAE* = 0x00000EF7
  CLUTTER_KEY_Hangul_J_PanSios* = 0x00000EF8
  CLUTTER_KEY_Hangul_J_KkogjiDalrinIeung* = 0x00000EF9
  CLUTTER_KEY_Hangul_J_YeorinHieuh* = 0x00000EFA
  CLUTTER_KEY_Korean_Won* = 0x00000EFF
  CLUTTER_KEY_Armenian_ligature_ew* = 0x01000587
  CLUTTER_KEY_Armenian_full_stop* = 0x01000589
  CLUTTER_KEY_Armenian_verjaket* = 0x01000589
  CLUTTER_KEY_Armenian_separation_mark* = 0x0100055D
  CLUTTER_KEY_Armenian_but* = 0x0100055D
  CLUTTER_KEY_Armenian_hyphen* = 0x0100058A
  CLUTTER_KEY_Armenian_yentamna* = 0x0100058A
  CLUTTER_KEY_Armenian_exclam* = 0x0100055C
  CLUTTER_KEY_Armenian_amanak* = 0x0100055C
  CLUTTER_KEY_Armenian_accent* = 0x0100055B
  CLUTTER_KEY_Armenian_shesht* = 0x0100055B
  CLUTTER_KEY_Armenian_question* = 0x0100055E
  CLUTTER_KEY_Armenian_paruyk* = 0x0100055E
  CLUTTER_KEY_Armenian_AYB_upper* = 0x01000531
  CLUTTER_KEY_Armenian_ayb* = 0x01000561
  CLUTTER_KEY_Armenian_BEN_upper* = 0x01000532
  CLUTTER_KEY_Armenian_ben* = 0x01000562
  CLUTTER_KEY_Armenian_GIM_upper* = 0x01000533
  CLUTTER_KEY_Armenian_gim* = 0x01000563
  CLUTTER_KEY_Armenian_DA_upper* = 0x01000534
  CLUTTER_KEY_Armenian_da* = 0x01000564
  CLUTTER_KEY_Armenian_YECH_upper* = 0x01000535
  CLUTTER_KEY_Armenian_yech* = 0x01000565
  CLUTTER_KEY_Armenian_ZA_upper* = 0x01000536
  CLUTTER_KEY_Armenian_za* = 0x01000566
  CLUTTER_KEY_Armenian_E_upper* = 0x01000537
  CLUTTER_KEY_Armenian_e* = 0x01000567
  CLUTTER_KEY_Armenian_AT_upper* = 0x01000538
  CLUTTER_KEY_Armenian_at* = 0x01000568
  CLUTTER_KEY_Armenian_TO_upper* = 0x01000539
  CLUTTER_KEY_Armenian_to* = 0x01000569
  CLUTTER_KEY_Armenian_ZHE_upper* = 0x0100053A
  CLUTTER_KEY_Armenian_zhe* = 0x0100056A
  CLUTTER_KEY_Armenian_INI_upper* = 0x0100053B
  CLUTTER_KEY_Armenian_ini* = 0x0100056B
  CLUTTER_KEY_Armenian_LYUN_upper* = 0x0100053C
  CLUTTER_KEY_Armenian_lyun* = 0x0100056C
  CLUTTER_KEY_Armenian_KHE_upper* = 0x0100053D
  CLUTTER_KEY_Armenian_khe* = 0x0100056D
  CLUTTER_KEY_Armenian_TSA_upper* = 0x0100053E
  CLUTTER_KEY_Armenian_tsa* = 0x0100056E
  CLUTTER_KEY_Armenian_KEN_upper* = 0x0100053F
  CLUTTER_KEY_Armenian_ken* = 0x0100056F
  CLUTTER_KEY_Armenian_HO_upper* = 0x01000540
  CLUTTER_KEY_Armenian_ho* = 0x01000570
  CLUTTER_KEY_Armenian_DZA_upper* = 0x01000541
  CLUTTER_KEY_Armenian_dza* = 0x01000571
  CLUTTER_KEY_Armenian_GHAT_upper* = 0x01000542
  CLUTTER_KEY_Armenian_ghat* = 0x01000572
  CLUTTER_KEY_Armenian_TCHE_upper* = 0x01000543
  CLUTTER_KEY_Armenian_tche* = 0x01000573
  CLUTTER_KEY_Armenian_MEN_upper* = 0x01000544
  CLUTTER_KEY_Armenian_men* = 0x01000574
  CLUTTER_KEY_Armenian_HI_upper* = 0x01000545
  CLUTTER_KEY_Armenian_hi* = 0x01000575
  CLUTTER_KEY_Armenian_NU_upper* = 0x01000546
  CLUTTER_KEY_Armenian_nu* = 0x01000576
  CLUTTER_KEY_Armenian_SHA_upper* = 0x01000547
  CLUTTER_KEY_Armenian_sha* = 0x01000577
  CLUTTER_KEY_Armenian_VO_upper* = 0x01000548
  CLUTTER_KEY_Armenian_vo* = 0x01000578
  CLUTTER_KEY_Armenian_CHA_upper* = 0x01000549
  CLUTTER_KEY_Armenian_cha* = 0x01000579
  CLUTTER_KEY_Armenian_PE_upper* = 0x0100054A
  CLUTTER_KEY_Armenian_pe* = 0x0100057A
  CLUTTER_KEY_Armenian_JE_upper* = 0x0100054B
  CLUTTER_KEY_Armenian_je* = 0x0100057B
  CLUTTER_KEY_Armenian_RA_upper* = 0x0100054C
  CLUTTER_KEY_Armenian_ra* = 0x0100057C
  CLUTTER_KEY_Armenian_SE_upper* = 0x0100054D
  CLUTTER_KEY_Armenian_se* = 0x0100057D
  CLUTTER_KEY_Armenian_VEV_upper* = 0x0100054E
  CLUTTER_KEY_Armenian_vev* = 0x0100057E
  CLUTTER_KEY_Armenian_TYUN_upper* = 0x0100054F
  CLUTTER_KEY_Armenian_tyun* = 0x0100057F
  CLUTTER_KEY_Armenian_RE_upper* = 0x01000550
  CLUTTER_KEY_Armenian_re* = 0x01000580
  CLUTTER_KEY_Armenian_TSO_upper* = 0x01000551
  CLUTTER_KEY_Armenian_tso* = 0x01000581
  CLUTTER_KEY_Armenian_VYUN_upper* = 0x01000552
  CLUTTER_KEY_Armenian_vyun* = 0x01000582
  CLUTTER_KEY_Armenian_PYUR_upper* = 0x01000553
  CLUTTER_KEY_Armenian_pyur* = 0x01000583
  CLUTTER_KEY_Armenian_KE_upper* = 0x01000554
  CLUTTER_KEY_Armenian_ke* = 0x01000584
  CLUTTER_KEY_Armenian_O_upper* = 0x01000555
  CLUTTER_KEY_Armenian_o* = 0x01000585
  CLUTTER_KEY_Armenian_FE_upper* = 0x01000556
  CLUTTER_KEY_Armenian_fe* = 0x01000586
  CLUTTER_KEY_Armenian_apostrophe* = 0x0100055A
  CLUTTER_KEY_Georgian_an* = 0x010010D0
  CLUTTER_KEY_Georgian_ban* = 0x010010D1
  CLUTTER_KEY_Georgian_gan* = 0x010010D2
  CLUTTER_KEY_Georgian_don* = 0x010010D3
  CLUTTER_KEY_Georgian_en* = 0x010010D4
  CLUTTER_KEY_Georgian_vin* = 0x010010D5
  CLUTTER_KEY_Georgian_zen* = 0x010010D6
  CLUTTER_KEY_Georgian_tan* = 0x010010D7
  CLUTTER_KEY_Georgian_in* = 0x010010D8
  CLUTTER_KEY_Georgian_kan* = 0x010010D9
  CLUTTER_KEY_Georgian_las* = 0x010010DA
  CLUTTER_KEY_Georgian_man* = 0x010010DB
  CLUTTER_KEY_Georgian_nar* = 0x010010DC
  CLUTTER_KEY_Georgian_on* = 0x010010DD
  CLUTTER_KEY_Georgian_par* = 0x010010DE
  CLUTTER_KEY_Georgian_zhar* = 0x010010DF
  CLUTTER_KEY_Georgian_rae* = 0x010010E0
  CLUTTER_KEY_Georgian_san* = 0x010010E1
  CLUTTER_KEY_Georgian_tar* = 0x010010E2
  CLUTTER_KEY_Georgian_un* = 0x010010E3
  CLUTTER_KEY_Georgian_phar* = 0x010010E4
  CLUTTER_KEY_Georgian_khar* = 0x010010E5
  CLUTTER_KEY_Georgian_ghan* = 0x010010E6
  CLUTTER_KEY_Georgian_qar* = 0x010010E7
  CLUTTER_KEY_Georgian_shin* = 0x010010E8
  CLUTTER_KEY_Georgian_chin* = 0x010010E9
  CLUTTER_KEY_Georgian_can* = 0x010010EA
  CLUTTER_KEY_Georgian_jil* = 0x010010EB
  CLUTTER_KEY_Georgian_cil* = 0x010010EC
  CLUTTER_KEY_Georgian_char* = 0x010010ED
  CLUTTER_KEY_Georgian_xan* = 0x010010EE
  CLUTTER_KEY_Georgian_jhan* = 0x010010EF
  CLUTTER_KEY_Georgian_hae* = 0x010010F0
  CLUTTER_KEY_Georgian_he* = 0x010010F1
  CLUTTER_KEY_Georgian_hie* = 0x010010F2
  CLUTTER_KEY_Georgian_we* = 0x010010F3
  CLUTTER_KEY_Georgian_har* = 0x010010F4
  CLUTTER_KEY_Georgian_hoe* = 0x010010F5
  CLUTTER_KEY_Georgian_fi* = 0x010010F6
  CLUTTER_KEY_Xabovedot_upper* = 0x01001E8A
  CLUTTER_KEY_Ibreve_upper* = 0x0100012C
  CLUTTER_KEY_Zstroke_upper* = 0x010001B5
  CLUTTER_KEY_Gcaron_upper* = 0x010001E6
  CLUTTER_KEY_Ocaron_upper* = 0x010001D1
  CLUTTER_KEY_Obarred_upper* = 0x0100019F
  CLUTTER_KEY_xabovedot* = 0x01001E8B
  CLUTTER_KEY_ibreve* = 0x0100012D
  CLUTTER_KEY_zstroke* = 0x010001B6
  CLUTTER_KEY_gcaron* = 0x010001E7
  CLUTTER_KEY_ocaron* = 0x010001D2
  CLUTTER_KEY_obarred* = 0x01000275
  CLUTTER_KEY_SCHWA_upper* = 0x0100018F
  CLUTTER_KEY_schwa* = 0x01000259
  CLUTTER_KEY_EZH_upper* = 0x010001B7
  CLUTTER_KEY_ezh* = 0x01000292
  CLUTTER_KEY_Lbelowdot_upper* = 0x01001E36
  CLUTTER_KEY_lbelowdot* = 0x01001E37
  CLUTTER_KEY_Abelowdot_upper* = 0x01001EA0
  CLUTTER_KEY_abelowdot* = 0x01001EA1
  CLUTTER_KEY_Ahook_upper* = 0x01001EA2
  CLUTTER_KEY_ahook* = 0x01001EA3
  CLUTTER_KEY_Acircumflexacute_upper* = 0x01001EA4
  CLUTTER_KEY_acircumflexacute* = 0x01001EA5
  CLUTTER_KEY_Acircumflexgrave_upper* = 0x01001EA6
  CLUTTER_KEY_acircumflexgrave* = 0x01001EA7
  CLUTTER_KEY_Acircumflexhook_upper* = 0x01001EA8
  CLUTTER_KEY_acircumflexhook* = 0x01001EA9
  CLUTTER_KEY_Acircumflextilde_upper* = 0x01001EAA
  CLUTTER_KEY_acircumflextilde* = 0x01001EAB
  CLUTTER_KEY_Acircumflexbelowdot_upper* = 0x01001EAC
  CLUTTER_KEY_acircumflexbelowdot* = 0x01001EAD
  CLUTTER_KEY_Abreveacute_upper* = 0x01001EAE
  CLUTTER_KEY_abreveacute* = 0x01001EAF
  CLUTTER_KEY_Abrevegrave_upper* = 0x01001EB0
  CLUTTER_KEY_abrevegrave* = 0x01001EB1
  CLUTTER_KEY_Abrevehook_upper* = 0x01001EB2
  CLUTTER_KEY_abrevehook* = 0x01001EB3
  CLUTTER_KEY_Abrevetilde_upper* = 0x01001EB4
  CLUTTER_KEY_abrevetilde* = 0x01001EB5
  CLUTTER_KEY_Abrevebelowdot_upper* = 0x01001EB6
  CLUTTER_KEY_abrevebelowdot* = 0x01001EB7
  CLUTTER_KEY_Ebelowdot_upper* = 0x01001EB8
  CLUTTER_KEY_ebelowdot* = 0x01001EB9
  CLUTTER_KEY_Ehook_upper* = 0x01001EBA
  CLUTTER_KEY_ehook* = 0x01001EBB
  CLUTTER_KEY_Etilde_upper* = 0x01001EBC
  CLUTTER_KEY_etilde* = 0x01001EBD
  CLUTTER_KEY_Ecircumflexacute_upper* = 0x01001EBE
  CLUTTER_KEY_ecircumflexacute* = 0x01001EBF
  CLUTTER_KEY_Ecircumflexgrave_upper* = 0x01001EC0
  CLUTTER_KEY_ecircumflexgrave* = 0x01001EC1
  CLUTTER_KEY_Ecircumflexhook_upper* = 0x01001EC2
  CLUTTER_KEY_ecircumflexhook* = 0x01001EC3
  CLUTTER_KEY_Ecircumflextilde_upper* = 0x01001EC4
  CLUTTER_KEY_ecircumflextilde* = 0x01001EC5
  CLUTTER_KEY_Ecircumflexbelowdot_upper* = 0x01001EC6
  CLUTTER_KEY_ecircumflexbelowdot* = 0x01001EC7
  CLUTTER_KEY_Ihook_upper* = 0x01001EC8
  CLUTTER_KEY_ihook* = 0x01001EC9
  CLUTTER_KEY_Ibelowdot_upper* = 0x01001ECA
  CLUTTER_KEY_ibelowdot* = 0x01001ECB
  CLUTTER_KEY_Obelowdot_upper* = 0x01001ECC
  CLUTTER_KEY_obelowdot* = 0x01001ECD
  CLUTTER_KEY_Ohook_upper* = 0x01001ECE
  CLUTTER_KEY_ohook* = 0x01001ECF
  CLUTTER_KEY_Ocircumflexacute_upper* = 0x01001ED0
  CLUTTER_KEY_ocircumflexacute* = 0x01001ED1
  CLUTTER_KEY_Ocircumflexgrave_upper* = 0x01001ED2
  CLUTTER_KEY_ocircumflexgrave* = 0x01001ED3
  CLUTTER_KEY_Ocircumflexhook_upper* = 0x01001ED4
  CLUTTER_KEY_ocircumflexhook* = 0x01001ED5
  CLUTTER_KEY_Ocircumflextilde_upper* = 0x01001ED6
  CLUTTER_KEY_ocircumflextilde* = 0x01001ED7
  CLUTTER_KEY_Ocircumflexbelowdot_upper* = 0x01001ED8
  CLUTTER_KEY_ocircumflexbelowdot* = 0x01001ED9
  CLUTTER_KEY_Ohornacute_upper* = 0x01001EDA
  CLUTTER_KEY_ohornacute* = 0x01001EDB
  CLUTTER_KEY_Ohorngrave_upper* = 0x01001EDC
  CLUTTER_KEY_ohorngrave* = 0x01001EDD
  CLUTTER_KEY_Ohornhook_upper* = 0x01001EDE
  CLUTTER_KEY_ohornhook* = 0x01001EDF
  CLUTTER_KEY_Ohorntilde_upper* = 0x01001EE0
  CLUTTER_KEY_ohorntilde* = 0x01001EE1
  CLUTTER_KEY_Ohornbelowdot_upper* = 0x01001EE2
  CLUTTER_KEY_ohornbelowdot* = 0x01001EE3
  CLUTTER_KEY_Ubelowdot_upper* = 0x01001EE4
  CLUTTER_KEY_ubelowdot* = 0x01001EE5
  CLUTTER_KEY_Uhook_upper* = 0x01001EE6
  CLUTTER_KEY_uhook* = 0x01001EE7
  CLUTTER_KEY_Uhornacute_upper* = 0x01001EE8
  CLUTTER_KEY_uhornacute* = 0x01001EE9
  CLUTTER_KEY_Uhorngrave_upper* = 0x01001EEA
  CLUTTER_KEY_uhorngrave* = 0x01001EEB
  CLUTTER_KEY_Uhornhook_upper* = 0x01001EEC
  CLUTTER_KEY_uhornhook* = 0x01001EED
  CLUTTER_KEY_Uhorntilde_upper* = 0x01001EEE
  CLUTTER_KEY_uhorntilde* = 0x01001EEF
  CLUTTER_KEY_Uhornbelowdot_upper* = 0x01001EF0
  CLUTTER_KEY_uhornbelowdot* = 0x01001EF1
  CLUTTER_KEY_Ybelowdot_upper* = 0x01001EF4
  CLUTTER_KEY_ybelowdot* = 0x01001EF5
  CLUTTER_KEY_Yhook_upper* = 0x01001EF6
  CLUTTER_KEY_yhook* = 0x01001EF7
  CLUTTER_KEY_Ytilde_upper* = 0x01001EF8
  CLUTTER_KEY_ytilde* = 0x01001EF9
  CLUTTER_KEY_Ohorn_upper* = 0x010001A0
  CLUTTER_KEY_ohorn* = 0x010001A1
  CLUTTER_KEY_Uhorn_upper* = 0x010001AF
  CLUTTER_KEY_uhorn* = 0x010001B0
  CLUTTER_KEY_EcuSign* = 0x010020A0
  CLUTTER_KEY_ColonSign* = 0x010020A1
  CLUTTER_KEY_CruzeiroSign* = 0x010020A2
  CLUTTER_KEY_FFrancSign* = 0x010020A3
  CLUTTER_KEY_LiraSign* = 0x010020A4
  CLUTTER_KEY_MillSign* = 0x010020A5
  CLUTTER_KEY_NairaSign* = 0x010020A6
  CLUTTER_KEY_PesetaSign* = 0x010020A7
  CLUTTER_KEY_RupeeSign* = 0x010020A8
  CLUTTER_KEY_WonSign* = 0x010020A9
  CLUTTER_KEY_NewSheqelSign* = 0x010020AA
  CLUTTER_KEY_DongSign* = 0x010020AB
  CLUTTER_KEY_EuroSign* = 0x000020AC
  CLUTTER_KEY_zerosuperior* = 0x01002070
  CLUTTER_KEY_foursuperior* = 0x01002074
  CLUTTER_KEY_fivesuperior* = 0x01002075
  CLUTTER_KEY_sixsuperior* = 0x01002076
  CLUTTER_KEY_sevensuperior* = 0x01002077
  CLUTTER_KEY_eightsuperior* = 0x01002078
  CLUTTER_KEY_ninesuperior* = 0x01002079
  CLUTTER_KEY_zerosubscript* = 0x01002080
  CLUTTER_KEY_onesubscript* = 0x01002081
  CLUTTER_KEY_twosubscript* = 0x01002082
  CLUTTER_KEY_threesubscript* = 0x01002083
  CLUTTER_KEY_foursubscript* = 0x01002084
  CLUTTER_KEY_fivesubscript* = 0x01002085
  CLUTTER_KEY_sixsubscript* = 0x01002086
  CLUTTER_KEY_sevensubscript* = 0x01002087
  CLUTTER_KEY_eightsubscript* = 0x01002088
  CLUTTER_KEY_ninesubscript* = 0x01002089
  CLUTTER_KEY_partdifferential* = 0x01002202
  CLUTTER_KEY_emptyset* = 0x01002205
  CLUTTER_KEY_elementof* = 0x01002208
  CLUTTER_KEY_notelementof* = 0x01002209
  CLUTTER_KEY_containsas* = 0x0100220B
  CLUTTER_KEY_squareroot* = 0x0100221A
  CLUTTER_KEY_cuberoot* = 0x0100221B
  CLUTTER_KEY_fourthroot* = 0x0100221C
  CLUTTER_KEY_dintegral* = 0x0100222C
  CLUTTER_KEY_tintegral* = 0x0100222D
  CLUTTER_KEY_because* = 0x01002235
  CLUTTER_KEY_approxeq* = 0x01002248
  CLUTTER_KEY_notapproxeq* = 0x01002247
  CLUTTER_KEY_notidentical* = 0x01002262
  CLUTTER_KEY_stricteq* = 0x01002263
  CLUTTER_KEY_braille_dot_1* = 0x0000FFF1
  CLUTTER_KEY_braille_dot_2* = 0x0000FFF2
  CLUTTER_KEY_braille_dot_3* = 0x0000FFF3
  CLUTTER_KEY_braille_dot_4* = 0x0000FFF4
  CLUTTER_KEY_braille_dot_5* = 0x0000FFF5
  CLUTTER_KEY_braille_dot_6* = 0x0000FFF6
  CLUTTER_KEY_braille_dot_7* = 0x0000FFF7
  CLUTTER_KEY_braille_dot_8* = 0x0000FFF8
  CLUTTER_KEY_braille_dot_9* = 0x0000FFF9
  CLUTTER_KEY_braille_dot_10* = 0x0000FFFA
  CLUTTER_KEY_braille_blank* = 0x01002800
  CLUTTER_KEY_braille_dots_1* = 0x01002801
  CLUTTER_KEY_braille_dots_2* = 0x01002802
  CLUTTER_KEY_braille_dots_12* = 0x01002803
  CLUTTER_KEY_braille_dots_3* = 0x01002804
  CLUTTER_KEY_braille_dots_13* = 0x01002805
  CLUTTER_KEY_braille_dots_23* = 0x01002806
  CLUTTER_KEY_braille_dots_123* = 0x01002807
  CLUTTER_KEY_braille_dots_4* = 0x01002808
  CLUTTER_KEY_braille_dots_14* = 0x01002809
  CLUTTER_KEY_braille_dots_24* = 0x0100280A
  CLUTTER_KEY_braille_dots_124* = 0x0100280B
  CLUTTER_KEY_braille_dots_34* = 0x0100280C
  CLUTTER_KEY_braille_dots_134* = 0x0100280D
  CLUTTER_KEY_braille_dots_234* = 0x0100280E
  CLUTTER_KEY_braille_dots_1234* = 0x0100280F
  CLUTTER_KEY_braille_dots_5* = 0x01002810
  CLUTTER_KEY_braille_dots_15* = 0x01002811
  CLUTTER_KEY_braille_dots_25* = 0x01002812
  CLUTTER_KEY_braille_dots_125* = 0x01002813
  CLUTTER_KEY_braille_dots_35* = 0x01002814
  CLUTTER_KEY_braille_dots_135* = 0x01002815
  CLUTTER_KEY_braille_dots_235* = 0x01002816
  CLUTTER_KEY_braille_dots_1235* = 0x01002817
  CLUTTER_KEY_braille_dots_45* = 0x01002818
  CLUTTER_KEY_braille_dots_145* = 0x01002819
  CLUTTER_KEY_braille_dots_245* = 0x0100281A
  CLUTTER_KEY_braille_dots_1245* = 0x0100281B
  CLUTTER_KEY_braille_dots_345* = 0x0100281C
  CLUTTER_KEY_braille_dots_1345* = 0x0100281D
  CLUTTER_KEY_braille_dots_2345* = 0x0100281E
  CLUTTER_KEY_braille_dots_12345* = 0x0100281F
  CLUTTER_KEY_braille_dots_6* = 0x01002820
  CLUTTER_KEY_braille_dots_16* = 0x01002821
  CLUTTER_KEY_braille_dots_26* = 0x01002822
  CLUTTER_KEY_braille_dots_126* = 0x01002823
  CLUTTER_KEY_braille_dots_36* = 0x01002824
  CLUTTER_KEY_braille_dots_136* = 0x01002825
  CLUTTER_KEY_braille_dots_236* = 0x01002826
  CLUTTER_KEY_braille_dots_1236* = 0x01002827
  CLUTTER_KEY_braille_dots_46* = 0x01002828
  CLUTTER_KEY_braille_dots_146* = 0x01002829
  CLUTTER_KEY_braille_dots_246* = 0x0100282A
  CLUTTER_KEY_braille_dots_1246* = 0x0100282B
  CLUTTER_KEY_braille_dots_346* = 0x0100282C
  CLUTTER_KEY_braille_dots_1346* = 0x0100282D
  CLUTTER_KEY_braille_dots_2346* = 0x0100282E
  CLUTTER_KEY_braille_dots_12346* = 0x0100282F
  CLUTTER_KEY_braille_dots_56* = 0x01002830
  CLUTTER_KEY_braille_dots_156* = 0x01002831
  CLUTTER_KEY_braille_dots_256* = 0x01002832
  CLUTTER_KEY_braille_dots_1256* = 0x01002833
  CLUTTER_KEY_braille_dots_356* = 0x01002834
  CLUTTER_KEY_braille_dots_1356* = 0x01002835
  CLUTTER_KEY_braille_dots_2356* = 0x01002836
  CLUTTER_KEY_braille_dots_12356* = 0x01002837
  CLUTTER_KEY_braille_dots_456* = 0x01002838
  CLUTTER_KEY_braille_dots_1456* = 0x01002839
  CLUTTER_KEY_braille_dots_2456* = 0x0100283A
  CLUTTER_KEY_braille_dots_12456* = 0x0100283B
  CLUTTER_KEY_braille_dots_3456* = 0x0100283C
  CLUTTER_KEY_braille_dots_13456* = 0x0100283D
  CLUTTER_KEY_braille_dots_23456* = 0x0100283E
  CLUTTER_KEY_braille_dots_123456* = 0x0100283F
  CLUTTER_KEY_braille_dots_7* = 0x01002840
  CLUTTER_KEY_braille_dots_17* = 0x01002841
  CLUTTER_KEY_braille_dots_27* = 0x01002842
  CLUTTER_KEY_braille_dots_127* = 0x01002843
  CLUTTER_KEY_braille_dots_37* = 0x01002844
  CLUTTER_KEY_braille_dots_137* = 0x01002845
  CLUTTER_KEY_braille_dots_237* = 0x01002846
  CLUTTER_KEY_braille_dots_1237* = 0x01002847
  CLUTTER_KEY_braille_dots_47* = 0x01002848
  CLUTTER_KEY_braille_dots_147* = 0x01002849
  CLUTTER_KEY_braille_dots_247* = 0x0100284A
  CLUTTER_KEY_braille_dots_1247* = 0x0100284B
  CLUTTER_KEY_braille_dots_347* = 0x0100284C
  CLUTTER_KEY_braille_dots_1347* = 0x0100284D
  CLUTTER_KEY_braille_dots_2347* = 0x0100284E
  CLUTTER_KEY_braille_dots_12347* = 0x0100284F
  CLUTTER_KEY_braille_dots_57* = 0x01002850
  CLUTTER_KEY_braille_dots_157* = 0x01002851
  CLUTTER_KEY_braille_dots_257* = 0x01002852
  CLUTTER_KEY_braille_dots_1257* = 0x01002853
  CLUTTER_KEY_braille_dots_357* = 0x01002854
  CLUTTER_KEY_braille_dots_1357* = 0x01002855
  CLUTTER_KEY_braille_dots_2357* = 0x01002856
  CLUTTER_KEY_braille_dots_12357* = 0x01002857
  CLUTTER_KEY_braille_dots_457* = 0x01002858
  CLUTTER_KEY_braille_dots_1457* = 0x01002859
  CLUTTER_KEY_braille_dots_2457* = 0x0100285A
  CLUTTER_KEY_braille_dots_12457* = 0x0100285B
  CLUTTER_KEY_braille_dots_3457* = 0x0100285C
  CLUTTER_KEY_braille_dots_13457* = 0x0100285D
  CLUTTER_KEY_braille_dots_23457* = 0x0100285E
  CLUTTER_KEY_braille_dots_123457* = 0x0100285F
  CLUTTER_KEY_braille_dots_67* = 0x01002860
  CLUTTER_KEY_braille_dots_167* = 0x01002861
  CLUTTER_KEY_braille_dots_267* = 0x01002862
  CLUTTER_KEY_braille_dots_1267* = 0x01002863
  CLUTTER_KEY_braille_dots_367* = 0x01002864
  CLUTTER_KEY_braille_dots_1367* = 0x01002865
  CLUTTER_KEY_braille_dots_2367* = 0x01002866
  CLUTTER_KEY_braille_dots_12367* = 0x01002867
  CLUTTER_KEY_braille_dots_467* = 0x01002868
  CLUTTER_KEY_braille_dots_1467* = 0x01002869
  CLUTTER_KEY_braille_dots_2467* = 0x0100286A
  CLUTTER_KEY_braille_dots_12467* = 0x0100286B
  CLUTTER_KEY_braille_dots_3467* = 0x0100286C
  CLUTTER_KEY_braille_dots_13467* = 0x0100286D
  CLUTTER_KEY_braille_dots_23467* = 0x0100286E
  CLUTTER_KEY_braille_dots_123467* = 0x0100286F
  CLUTTER_KEY_braille_dots_567* = 0x01002870
  CLUTTER_KEY_braille_dots_1567* = 0x01002871
  CLUTTER_KEY_braille_dots_2567* = 0x01002872
  CLUTTER_KEY_braille_dots_12567* = 0x01002873
  CLUTTER_KEY_braille_dots_3567* = 0x01002874
  CLUTTER_KEY_braille_dots_13567* = 0x01002875
  CLUTTER_KEY_braille_dots_23567* = 0x01002876
  CLUTTER_KEY_braille_dots_123567* = 0x01002877
  CLUTTER_KEY_braille_dots_4567* = 0x01002878
  CLUTTER_KEY_braille_dots_14567* = 0x01002879
  CLUTTER_KEY_braille_dots_24567* = 0x0100287A
  CLUTTER_KEY_braille_dots_124567* = 0x0100287B
  CLUTTER_KEY_braille_dots_34567* = 0x0100287C
  CLUTTER_KEY_braille_dots_134567* = 0x0100287D
  CLUTTER_KEY_braille_dots_234567* = 0x0100287E
  CLUTTER_KEY_braille_dots_1234567* = 0x0100287F
  CLUTTER_KEY_braille_dots_8* = 0x01002880
  CLUTTER_KEY_braille_dots_18* = 0x01002881
  CLUTTER_KEY_braille_dots_28* = 0x01002882
  CLUTTER_KEY_braille_dots_128* = 0x01002883
  CLUTTER_KEY_braille_dots_38* = 0x01002884
  CLUTTER_KEY_braille_dots_138* = 0x01002885
  CLUTTER_KEY_braille_dots_238* = 0x01002886
  CLUTTER_KEY_braille_dots_1238* = 0x01002887
  CLUTTER_KEY_braille_dots_48* = 0x01002888
  CLUTTER_KEY_braille_dots_148* = 0x01002889
  CLUTTER_KEY_braille_dots_248* = 0x0100288A
  CLUTTER_KEY_braille_dots_1248* = 0x0100288B
  CLUTTER_KEY_braille_dots_348* = 0x0100288C
  CLUTTER_KEY_braille_dots_1348* = 0x0100288D
  CLUTTER_KEY_braille_dots_2348* = 0x0100288E
  CLUTTER_KEY_braille_dots_12348* = 0x0100288F
  CLUTTER_KEY_braille_dots_58* = 0x01002890
  CLUTTER_KEY_braille_dots_158* = 0x01002891
  CLUTTER_KEY_braille_dots_258* = 0x01002892
  CLUTTER_KEY_braille_dots_1258* = 0x01002893
  CLUTTER_KEY_braille_dots_358* = 0x01002894
  CLUTTER_KEY_braille_dots_1358* = 0x01002895
  CLUTTER_KEY_braille_dots_2358* = 0x01002896
  CLUTTER_KEY_braille_dots_12358* = 0x01002897
  CLUTTER_KEY_braille_dots_458* = 0x01002898
  CLUTTER_KEY_braille_dots_1458* = 0x01002899
  CLUTTER_KEY_braille_dots_2458* = 0x0100289A
  CLUTTER_KEY_braille_dots_12458* = 0x0100289B
  CLUTTER_KEY_braille_dots_3458* = 0x0100289C
  CLUTTER_KEY_braille_dots_13458* = 0x0100289D
  CLUTTER_KEY_braille_dots_23458* = 0x0100289E
  CLUTTER_KEY_braille_dots_123458* = 0x0100289F
  CLUTTER_KEY_braille_dots_68* = 0x010028A0
  CLUTTER_KEY_braille_dots_168* = 0x010028A1
  CLUTTER_KEY_braille_dots_268* = 0x010028A2
  CLUTTER_KEY_braille_dots_1268* = 0x010028A3
  CLUTTER_KEY_braille_dots_368* = 0x010028A4
  CLUTTER_KEY_braille_dots_1368* = 0x010028A5
  CLUTTER_KEY_braille_dots_2368* = 0x010028A6
  CLUTTER_KEY_braille_dots_12368* = 0x010028A7
  CLUTTER_KEY_braille_dots_468* = 0x010028A8
  CLUTTER_KEY_braille_dots_1468* = 0x010028A9
  CLUTTER_KEY_braille_dots_2468* = 0x010028AA
  CLUTTER_KEY_braille_dots_12468* = 0x010028AB
  CLUTTER_KEY_braille_dots_3468* = 0x010028AC
  CLUTTER_KEY_braille_dots_13468* = 0x010028AD
  CLUTTER_KEY_braille_dots_23468* = 0x010028AE
  CLUTTER_KEY_braille_dots_123468* = 0x010028AF
  CLUTTER_KEY_braille_dots_568* = 0x010028B0
  CLUTTER_KEY_braille_dots_1568* = 0x010028B1
  CLUTTER_KEY_braille_dots_2568* = 0x010028B2
  CLUTTER_KEY_braille_dots_12568* = 0x010028B3
  CLUTTER_KEY_braille_dots_3568* = 0x010028B4
  CLUTTER_KEY_braille_dots_13568* = 0x010028B5
  CLUTTER_KEY_braille_dots_23568* = 0x010028B6
  CLUTTER_KEY_braille_dots_123568* = 0x010028B7
  CLUTTER_KEY_braille_dots_4568* = 0x010028B8
  CLUTTER_KEY_braille_dots_14568* = 0x010028B9
  CLUTTER_KEY_braille_dots_24568* = 0x010028BA
  CLUTTER_KEY_braille_dots_124568* = 0x010028BB
  CLUTTER_KEY_braille_dots_34568* = 0x010028BC
  CLUTTER_KEY_braille_dots_134568* = 0x010028BD
  CLUTTER_KEY_braille_dots_234568* = 0x010028BE
  CLUTTER_KEY_braille_dots_1234568* = 0x010028BF
  CLUTTER_KEY_braille_dots_78* = 0x010028C0
  CLUTTER_KEY_braille_dots_178* = 0x010028C1
  CLUTTER_KEY_braille_dots_278* = 0x010028C2
  CLUTTER_KEY_braille_dots_1278* = 0x010028C3
  CLUTTER_KEY_braille_dots_378* = 0x010028C4
  CLUTTER_KEY_braille_dots_1378* = 0x010028C5
  CLUTTER_KEY_braille_dots_2378* = 0x010028C6
  CLUTTER_KEY_braille_dots_12378* = 0x010028C7
  CLUTTER_KEY_braille_dots_478* = 0x010028C8
  CLUTTER_KEY_braille_dots_1478* = 0x010028C9
  CLUTTER_KEY_braille_dots_2478* = 0x010028CA
  CLUTTER_KEY_braille_dots_12478* = 0x010028CB
  CLUTTER_KEY_braille_dots_3478* = 0x010028CC
  CLUTTER_KEY_braille_dots_13478* = 0x010028CD
  CLUTTER_KEY_braille_dots_23478* = 0x010028CE
  CLUTTER_KEY_braille_dots_123478* = 0x010028CF
  CLUTTER_KEY_braille_dots_578* = 0x010028D0
  CLUTTER_KEY_braille_dots_1578* = 0x010028D1
  CLUTTER_KEY_braille_dots_2578* = 0x010028D2
  CLUTTER_KEY_braille_dots_12578* = 0x010028D3
  CLUTTER_KEY_braille_dots_3578* = 0x010028D4
  CLUTTER_KEY_braille_dots_13578* = 0x010028D5
  CLUTTER_KEY_braille_dots_23578* = 0x010028D6
  CLUTTER_KEY_braille_dots_123578* = 0x010028D7
  CLUTTER_KEY_braille_dots_4578* = 0x010028D8
  CLUTTER_KEY_braille_dots_14578* = 0x010028D9
  CLUTTER_KEY_braille_dots_24578* = 0x010028DA
  CLUTTER_KEY_braille_dots_124578* = 0x010028DB
  CLUTTER_KEY_braille_dots_34578* = 0x010028DC
  CLUTTER_KEY_braille_dots_134578* = 0x010028DD
  CLUTTER_KEY_braille_dots_234578* = 0x010028DE
  CLUTTER_KEY_braille_dots_1234578* = 0x010028DF
  CLUTTER_KEY_braille_dots_678* = 0x010028E0
  CLUTTER_KEY_braille_dots_1678* = 0x010028E1
  CLUTTER_KEY_braille_dots_2678* = 0x010028E2
  CLUTTER_KEY_braille_dots_12678* = 0x010028E3
  CLUTTER_KEY_braille_dots_3678* = 0x010028E4
  CLUTTER_KEY_braille_dots_13678* = 0x010028E5
  CLUTTER_KEY_braille_dots_23678* = 0x010028E6
  CLUTTER_KEY_braille_dots_123678* = 0x010028E7
  CLUTTER_KEY_braille_dots_4678* = 0x010028E8
  CLUTTER_KEY_braille_dots_14678* = 0x010028E9
  CLUTTER_KEY_braille_dots_24678* = 0x010028EA
  CLUTTER_KEY_braille_dots_124678* = 0x010028EB
  CLUTTER_KEY_braille_dots_34678* = 0x010028EC
  CLUTTER_KEY_braille_dots_134678* = 0x010028ED
  CLUTTER_KEY_braille_dots_234678* = 0x010028EE
  CLUTTER_KEY_braille_dots_1234678* = 0x010028EF
  CLUTTER_KEY_braille_dots_5678* = 0x010028F0
  CLUTTER_KEY_braille_dots_15678* = 0x010028F1
  CLUTTER_KEY_braille_dots_25678* = 0x010028F2
  CLUTTER_KEY_braille_dots_125678* = 0x010028F3
  CLUTTER_KEY_braille_dots_35678* = 0x010028F4
  CLUTTER_KEY_braille_dots_135678* = 0x010028F5
  CLUTTER_KEY_braille_dots_235678* = 0x010028F6
  CLUTTER_KEY_braille_dots_1235678* = 0x010028F7
  CLUTTER_KEY_braille_dots_45678* = 0x010028F8
  CLUTTER_KEY_braille_dots_145678* = 0x010028F9
  CLUTTER_KEY_braille_dots_245678* = 0x010028FA
  CLUTTER_KEY_braille_dots_1245678* = 0x010028FB
  CLUTTER_KEY_braille_dots_345678* = 0x010028FC
  CLUTTER_KEY_braille_dots_1345678* = 0x010028FD
  CLUTTER_KEY_braille_dots_2345678* = 0x010028FE
  CLUTTER_KEY_braille_dots_12345678* = 0x010028FF
  CLUTTER_KEY_Sinh_ng* = 0x01000D82
  CLUTTER_KEY_Sinh_h2* = 0x01000D83
  CLUTTER_KEY_Sinh_a* = 0x01000D85
  CLUTTER_KEY_Sinh_aa* = 0x01000D86
  CLUTTER_KEY_Sinh_ae* = 0x01000D87
  CLUTTER_KEY_Sinh_aee* = 0x01000D88
  CLUTTER_KEY_Sinh_i* = 0x01000D89
  CLUTTER_KEY_Sinh_ii* = 0x01000D8A
  CLUTTER_KEY_Sinh_u* = 0x01000D8B
  CLUTTER_KEY_Sinh_uu* = 0x01000D8C
  CLUTTER_KEY_Sinh_ri* = 0x01000D8D
  CLUTTER_KEY_Sinh_rii* = 0x01000D8E
  CLUTTER_KEY_Sinh_lu* = 0x01000D8F
  CLUTTER_KEY_Sinh_luu* = 0x01000D90
  CLUTTER_KEY_Sinh_e* = 0x01000D91
  CLUTTER_KEY_Sinh_ee* = 0x01000D92
  CLUTTER_KEY_Sinh_ai* = 0x01000D93
  CLUTTER_KEY_Sinh_o* = 0x01000D94
  CLUTTER_KEY_Sinh_oo* = 0x01000D95
  CLUTTER_KEY_Sinh_au* = 0x01000D96
  CLUTTER_KEY_Sinh_ka* = 0x01000D9A
  CLUTTER_KEY_Sinh_kha* = 0x01000D9B
  CLUTTER_KEY_Sinh_ga* = 0x01000D9C
  CLUTTER_KEY_Sinh_gha* = 0x01000D9D
  CLUTTER_KEY_Sinh_ng2* = 0x01000D9E
  CLUTTER_KEY_Sinh_nga* = 0x01000D9F
  CLUTTER_KEY_Sinh_ca* = 0x01000DA0
  CLUTTER_KEY_Sinh_cha* = 0x01000DA1
  CLUTTER_KEY_Sinh_ja* = 0x01000DA2
  CLUTTER_KEY_Sinh_jha* = 0x01000DA3
  CLUTTER_KEY_Sinh_nya* = 0x01000DA4
  CLUTTER_KEY_Sinh_jnya* = 0x01000DA5
  CLUTTER_KEY_Sinh_nja* = 0x01000DA6
  CLUTTER_KEY_Sinh_tta* = 0x01000DA7
  CLUTTER_KEY_Sinh_ttha* = 0x01000DA8
  CLUTTER_KEY_Sinh_dda* = 0x01000DA9
  CLUTTER_KEY_Sinh_ddha* = 0x01000DAA
  CLUTTER_KEY_Sinh_nna* = 0x01000DAB
  CLUTTER_KEY_Sinh_ndda* = 0x01000DAC
  CLUTTER_KEY_Sinh_tha* = 0x01000DAD
  CLUTTER_KEY_Sinh_thha* = 0x01000DAE
  CLUTTER_KEY_Sinh_dha* = 0x01000DAF
  CLUTTER_KEY_Sinh_dhha* = 0x01000DB0
  CLUTTER_KEY_Sinh_na* = 0x01000DB1
  CLUTTER_KEY_Sinh_ndha* = 0x01000DB3
  CLUTTER_KEY_Sinh_pa* = 0x01000DB4
  CLUTTER_KEY_Sinh_pha* = 0x01000DB5
  CLUTTER_KEY_Sinh_ba* = 0x01000DB6
  CLUTTER_KEY_Sinh_bha* = 0x01000DB7
  CLUTTER_KEY_Sinh_ma* = 0x01000DB8
  CLUTTER_KEY_Sinh_mba* = 0x01000DB9
  CLUTTER_KEY_Sinh_ya* = 0x01000DBA
  CLUTTER_KEY_Sinh_ra* = 0x01000DBB
  CLUTTER_KEY_Sinh_la* = 0x01000DBD
  CLUTTER_KEY_Sinh_va* = 0x01000DC0
  CLUTTER_KEY_Sinh_sha* = 0x01000DC1
  CLUTTER_KEY_Sinh_ssha* = 0x01000DC2
  CLUTTER_KEY_Sinh_sa* = 0x01000DC3
  CLUTTER_KEY_Sinh_ha* = 0x01000DC4
  CLUTTER_KEY_Sinh_lla* = 0x01000DC5
  CLUTTER_KEY_Sinh_fa* = 0x01000DC6
  CLUTTER_KEY_Sinh_al* = 0x01000DCA
  CLUTTER_KEY_Sinh_aa2* = 0x01000DCF
  CLUTTER_KEY_Sinh_ae2* = 0x01000DD0
  CLUTTER_KEY_Sinh_aee2* = 0x01000DD1
  CLUTTER_KEY_Sinh_i2* = 0x01000DD2
  CLUTTER_KEY_Sinh_ii2* = 0x01000DD3
  CLUTTER_KEY_Sinh_u2* = 0x01000DD4
  CLUTTER_KEY_Sinh_uu2* = 0x01000DD6
  CLUTTER_KEY_Sinh_ru2* = 0x01000DD8
  CLUTTER_KEY_Sinh_e2* = 0x01000DD9
  CLUTTER_KEY_Sinh_ee2* = 0x01000DDA
  CLUTTER_KEY_Sinh_ai2* = 0x01000DDB
  CLUTTER_KEY_Sinh_o2* = 0x01000DDC
  CLUTTER_KEY_Sinh_oo2* = 0x01000DDD
  CLUTTER_KEY_Sinh_au2* = 0x01000DDE
  CLUTTER_KEY_Sinh_lu2* = 0x01000DDF
  CLUTTER_KEY_Sinh_ruu2* = 0x01000DF2
  CLUTTER_KEY_Sinh_luu2* = 0x01000DF3
  CLUTTER_KEY_Sinh_kunddaliya* = 0x01000DF4
  CLUTTER_KEY_ModeLock* = 0x1008FF01
  CLUTTER_KEY_MonBrightnessUp* = 0x1008FF02
  CLUTTER_KEY_MonBrightnessDown* = 0x1008FF03
  CLUTTER_KEY_KbdLightOnOff* = 0x1008FF04
  CLUTTER_KEY_KbdBrightnessUp* = 0x1008FF05
  CLUTTER_KEY_KbdBrightnessDown* = 0x1008FF06
  CLUTTER_KEY_Standby* = 0x1008FF10
  CLUTTER_KEY_AudioLowerVolume* = 0x1008FF11
  CLUTTER_KEY_AudioMute* = 0x1008FF12
  CLUTTER_KEY_AudioRaiseVolume* = 0x1008FF13
  CLUTTER_KEY_AudioPlay* = 0x1008FF14
  CLUTTER_KEY_AudioStop* = 0x1008FF15
  CLUTTER_KEY_AudioPrev* = 0x1008FF16
  CLUTTER_KEY_AudioNext* = 0x1008FF17
  CLUTTER_KEY_HomePage* = 0x1008FF18
  CLUTTER_KEY_Mail* = 0x1008FF19
  CLUTTER_KEY_Start* = 0x1008FF1A
  CLUTTER_KEY_Search* = 0x1008FF1B
  CLUTTER_KEY_AudioRecord* = 0x1008FF1C
  CLUTTER_KEY_Calculator* = 0x1008FF1D
  CLUTTER_KEY_Memo* = 0x1008FF1E
  CLUTTER_KEY_ToDoList* = 0x1008FF1F
  CLUTTER_KEY_Calendar* = 0x1008FF20
  CLUTTER_KEY_PowerDown* = 0x1008FF21
  CLUTTER_KEY_ContrastAdjust* = 0x1008FF22
  CLUTTER_KEY_RockerUp* = 0x1008FF23
  CLUTTER_KEY_RockerDown* = 0x1008FF24
  CLUTTER_KEY_RockerEnter* = 0x1008FF25
  CLUTTER_KEY_Back* = 0x1008FF26
  CLUTTER_KEY_Forward* = 0x1008FF27
  CLUTTER_KEY_Stop* = 0x1008FF28
  CLUTTER_KEY_Refresh* = 0x1008FF29
  CLUTTER_KEY_PowerOff* = 0x1008FF2A
  CLUTTER_KEY_WakeUp* = 0x1008FF2B
  CLUTTER_KEY_Eject* = 0x1008FF2C
  CLUTTER_KEY_ScreenSaver* = 0x1008FF2D
  CLUTTER_KEY_WWW* = 0x1008FF2E
  CLUTTER_KEY_Sleep* = 0x1008FF2F
  CLUTTER_KEY_Favorites* = 0x1008FF30
  CLUTTER_KEY_AudioPause* = 0x1008FF31
  CLUTTER_KEY_AudioMedia* = 0x1008FF32
  CLUTTER_KEY_MyComputer* = 0x1008FF33
  CLUTTER_KEY_VendorHome* = 0x1008FF34
  CLUTTER_KEY_LightBulb* = 0x1008FF35
  CLUTTER_KEY_Shop* = 0x1008FF36
  CLUTTER_KEY_History* = 0x1008FF37
  CLUTTER_KEY_OpenURL* = 0x1008FF38
  CLUTTER_KEY_AddFavorite* = 0x1008FF39
  CLUTTER_KEY_HotLinks* = 0x1008FF3A
  CLUTTER_KEY_BrightnessAdjust* = 0x1008FF3B
  CLUTTER_KEY_Finance* = 0x1008FF3C
  CLUTTER_KEY_Community* = 0x1008FF3D
  CLUTTER_KEY_AudioRewind* = 0x1008FF3E
  CLUTTER_KEY_BackForward* = 0x1008FF3F
  CLUTTER_KEY_Launch0* = 0x1008FF40
  CLUTTER_KEY_Launch1* = 0x1008FF41
  CLUTTER_KEY_Launch2* = 0x1008FF42
  CLUTTER_KEY_Launch3* = 0x1008FF43
  CLUTTER_KEY_Launch4* = 0x1008FF44
  CLUTTER_KEY_Launch5* = 0x1008FF45
  CLUTTER_KEY_Launch6* = 0x1008FF46
  CLUTTER_KEY_Launch7* = 0x1008FF47
  CLUTTER_KEY_Launch8* = 0x1008FF48
  CLUTTER_KEY_Launch9* = 0x1008FF49
  CLUTTER_KEY_LaunchA* = 0x1008FF4A
  CLUTTER_KEY_LaunchB* = 0x1008FF4B
  CLUTTER_KEY_LaunchC* = 0x1008FF4C
  CLUTTER_KEY_LaunchD* = 0x1008FF4D
  CLUTTER_KEY_LaunchE* = 0x1008FF4E
  CLUTTER_KEY_LaunchF* = 0x1008FF4F
  CLUTTER_KEY_ApplicationLeft* = 0x1008FF50
  CLUTTER_KEY_ApplicationRight* = 0x1008FF51
  CLUTTER_KEY_Book* = 0x1008FF52
  CLUTTER_KEY_CD* = 0x1008FF53
  CLUTTER_KEY_WindowClear* = 0x1008FF55
  CLUTTER_KEY_Close* = 0x1008FF56
  CLUTTER_KEY_Copy* = 0x1008FF57
  CLUTTER_KEY_Cut* = 0x1008FF58
  CLUTTER_KEY_Display* = 0x1008FF59
  CLUTTER_KEY_DOS* = 0x1008FF5A
  CLUTTER_KEY_Documents* = 0x1008FF5B
  CLUTTER_KEY_Excel* = 0x1008FF5C
  CLUTTER_KEY_Explorer* = 0x1008FF5D
  CLUTTER_KEY_Game* = 0x1008FF5E
  CLUTTER_KEY_Go* = 0x1008FF5F
  CLUTTER_KEY_iTouch* = 0x1008FF60
  CLUTTER_KEY_LogOff* = 0x1008FF61
  CLUTTER_KEY_Market* = 0x1008FF62
  CLUTTER_KEY_Meeting* = 0x1008FF63
  CLUTTER_KEY_MenuKB* = 0x1008FF65
  CLUTTER_KEY_MenuPB* = 0x1008FF66
  CLUTTER_KEY_MySites* = 0x1008FF67
  CLUTTER_KEY_New* = 0x1008FF68
  CLUTTER_KEY_News* = 0x1008FF69
  CLUTTER_KEY_OfficeHome* = 0x1008FF6A
  CLUTTER_KEY_Open* = 0x1008FF6B
  CLUTTER_KEY_Option* = 0x1008FF6C
  CLUTTER_KEY_Paste* = 0x1008FF6D
  CLUTTER_KEY_Phone* = 0x1008FF6E
  CLUTTER_KEY_Reply* = 0x1008FF72
  CLUTTER_KEY_Reload* = 0x1008FF73
  CLUTTER_KEY_RotateWindows* = 0x1008FF74
  CLUTTER_KEY_RotationPB* = 0x1008FF75
  CLUTTER_KEY_RotationKB* = 0x1008FF76
  CLUTTER_KEY_Save* = 0x1008FF77
  CLUTTER_KEY_ScrollUp* = 0x1008FF78
  CLUTTER_KEY_ScrollDown* = 0x1008FF79
  CLUTTER_KEY_ScrollClick* = 0x1008FF7A
  CLUTTER_KEY_Send* = 0x1008FF7B
  CLUTTER_KEY_Spell* = 0x1008FF7C
  CLUTTER_KEY_SplitScreen* = 0x1008FF7D
  CLUTTER_KEY_Support* = 0x1008FF7E
  CLUTTER_KEY_TaskPane* = 0x1008FF7F
  CLUTTER_KEY_Terminal* = 0x1008FF80
  CLUTTER_KEY_Tools* = 0x1008FF81
  CLUTTER_KEY_Travel* = 0x1008FF82
  CLUTTER_KEY_UserPB* = 0x1008FF84
  CLUTTER_KEY_User1KB* = 0x1008FF85
  CLUTTER_KEY_User2KB* = 0x1008FF86
  CLUTTER_KEY_Video* = 0x1008FF87
  CLUTTER_KEY_WheelButton* = 0x1008FF88
  CLUTTER_KEY_Word* = 0x1008FF89
  CLUTTER_KEY_Xfer* = 0x1008FF8A
  CLUTTER_KEY_ZoomIn* = 0x1008FF8B
  CLUTTER_KEY_ZoomOut* = 0x1008FF8C
  CLUTTER_KEY_Away* = 0x1008FF8D
  CLUTTER_KEY_Messenger* = 0x1008FF8E
  CLUTTER_KEY_WebCam* = 0x1008FF8F
  CLUTTER_KEY_MailForward* = 0x1008FF90
  CLUTTER_KEY_Pictures* = 0x1008FF91
  CLUTTER_KEY_Music* = 0x1008FF92
  CLUTTER_KEY_Battery* = 0x1008FF93
  CLUTTER_KEY_Bluetooth* = 0x1008FF94
  CLUTTER_KEY_WLAN* = 0x1008FF95
  CLUTTER_KEY_UWB* = 0x1008FF96
  CLUTTER_KEY_AudioForward* = 0x1008FF97
  CLUTTER_KEY_AudioRepeat* = 0x1008FF98
  CLUTTER_KEY_AudioRandomPlay* = 0x1008FF99
  CLUTTER_KEY_Subtitle* = 0x1008FF9A
  CLUTTER_KEY_AudioCycleTrack* = 0x1008FF9B
  CLUTTER_KEY_CycleAngle* = 0x1008FF9C
  CLUTTER_KEY_FrameBack* = 0x1008FF9D
  CLUTTER_KEY_FrameForward* = 0x1008FF9E
  CLUTTER_KEY_Time* = 0x1008FF9F
  CLUTTER_KEY_SelectButton* = 0x1008FFA0
  CLUTTER_KEY_View* = 0x1008FFA1
  CLUTTER_KEY_TopMenu* = 0x1008FFA2
  CLUTTER_KEY_Red* = 0x1008FFA3
  CLUTTER_KEY_Green* = 0x1008FFA4
  CLUTTER_KEY_Yellow* = 0x1008FFA5
  CLUTTER_KEY_Blue* = 0x1008FFA6
  CLUTTER_KEY_Suspend* = 0x1008FFA7
  CLUTTER_KEY_Hibernate* = 0x1008FFA8
  CLUTTER_KEY_TouchpadToggle* = 0x1008FFA9
  CLUTTER_KEY_TouchpadOn* = 0x1008FFB0
  CLUTTER_KEY_TouchpadOff* = 0x1008FFB1
  CLUTTER_KEY_AudioMicMute* = 0x1008FFB2
  CLUTTER_KEY_Switch_VT_1* = 0x1008FE01
  CLUTTER_KEY_Switch_VT_2* = 0x1008FE02
  CLUTTER_KEY_Switch_VT_3* = 0x1008FE03
  CLUTTER_KEY_Switch_VT_4* = 0x1008FE04
  CLUTTER_KEY_Switch_VT_5* = 0x1008FE05
  CLUTTER_KEY_Switch_VT_6* = 0x1008FE06
  CLUTTER_KEY_Switch_VT_7* = 0x1008FE07
  CLUTTER_KEY_Switch_VT_8* = 0x1008FE08
  CLUTTER_KEY_Switch_VT_9* = 0x1008FE09
  CLUTTER_KEY_Switch_VT_10* = 0x1008FE0A
  CLUTTER_KEY_Switch_VT_11* = 0x1008FE0B
  CLUTTER_KEY_Switch_VT_12* = 0x1008FE0C
  CLUTTER_KEY_Ungrab* = 0x1008FE20
  CLUTTER_KEY_ClearGrab* = 0x1008FE21
  CLUTTER_KEY_Next_VMode* = 0x1008FE22
  CLUTTER_KEY_Prev_VMode* = 0x1008FE23
  CLUTTER_KEY_LogWindowTree* = 0x1008FE24
  CLUTTER_KEY_LogGrabInfo* = 0x1008FE25

type
  RedrawFlags* {.size: sizeof(cint), pure.} = enum
    CLIPPED_TO_ALLOCATION = 1 shl 0
  ActorTraverseFlags* {.size: sizeof(cint), pure.} = enum
    DEPTH_FIRST = 1 shl 0,
    BREADTH_FIRST = 1 shl 1
  ActorTraverseVisitFlags* {.size: sizeof(cint), pure.} = enum
    CONTINUE = 1 shl 0,
    SKIP_CHILDREN = 1 shl 1,
    BREAK = 1 shl 2
  DebugFlag* {.size: sizeof(cint), pure.} = enum
    MISC = 1 shl 0, ACTOR = 1 shl 1,
    TEXTURE = 1 shl 2, EVENT = 1 shl 3,
    PAINT = 1 shl 4, PANGO = 1 shl 5,
    BACKEND = 1 shl 6, SCHEDULER = 1 shl 7,
    SCRIPT = 1 shl 8, SHADER = 1 shl 9,
    MULTISTAGE = 1 shl 10, ANIMATION = 1 shl 11,
    LAYOUT = 1 shl 12, PICK = 1 shl 13,
    EVENTLOOP = 1 shl 14, CLIPPING = 1 shl 15,
    OOB_TRANSFORMS = 1 shl 16
  PickDebugFlag* {.size: sizeof(cint), pure.} = enum
    NOP_PICKING = 1 shl 0, DUMP_PICK_BUFFERS = 1 shl 1
  DrawDebugFlag* {.size: sizeof(cint), pure.} = enum
    DISABLE_SWAP_EVENTS = 1 shl 0,
    DISABLE_CLIPPED_REDRAWS = 1 shl 1, REDRAWS = 1 shl 2,
    PAINT_VOLUMES = 1 shl 3, DISABLE_CULLING = 1 shl 4,
    DISABLE_OFFSCREEN_REDIRECT = 1 shl 5,
    CONTINUOUS_REDRAW = 1 shl 6,
    PAINT_DEFORM_TILES = 1 shl 7
  Gravity* {.size: sizeof(cint), pure.} = enum
    NONE = 0, NORTH, NORTH_EAST,
    EAST, SOUTH_EAST, SOUTH,
    SOUTH_WEST, WEST, NORTH_WEST,
    CENTER
  RotateAxis* {.size: sizeof(cint), pure.} = enum
    X_AXIS, Y_AXIS, Z_AXIS
  RotateDirection* {.size: sizeof(cint), pure.} = enum
    CW, CCW
  RequestMode* {.size: sizeof(cint), pure.} = enum
    HEIGHT_FOR_WIDTH, WIDTH_FOR_HEIGHT,
    CONTENT_SIZE
  AnimationMode* {.size: sizeof(cint), pure.} = enum
    CUSTOM_MODE = 0, LINEAR, EASE_IN_QUAD,
    EASE_OUT_QUAD, EASE_IN_OUT_QUAD, EASE_IN_CUBIC,
    EASE_OUT_CUBIC, EASE_IN_OUT_CUBIC, EASE_IN_QUART,
    EASE_OUT_QUART, EASE_IN_OUT_QUART, EASE_IN_QUINT,
    EASE_OUT_QUINT, EASE_IN_OUT_QUINT, EASE_IN_SINE,
    EASE_OUT_SINE, EASE_IN_OUT_SINE, EASE_IN_EXPO,
    EASE_OUT_EXPO, EASE_IN_OUT_EXPO, EASE_IN_CIRC,
    EASE_OUT_CIRC, EASE_IN_OUT_CIRC, EASE_IN_ELASTIC,
    EASE_OUT_ELASTIC, EASE_IN_OUT_ELASTIC, EASE_IN_BACK,
    EASE_OUT_BACK, EASE_IN_OUT_BACK, EASE_IN_BOUNCE,
    EASE_OUT_BOUNCE, EASE_IN_OUT_BOUNCE, STEPS,
    STEP_START, STEP_END, CUBIC_BEZIER, EASE,
    EASE_IN, EASE_OUT, EASE_IN_OUT, ANIMATION_LAST
  FontFlags* {.size: sizeof(cint), pure.} = enum
    MIPMAPPING = (1 shl 0), HINTING = (1 shl 1)
  TextDirection* {.size: sizeof(cint), pure.} = enum
    DEFAULT, LTR, RTL
  ShaderType* {.size: sizeof(cint), pure.} = enum
    VERTEX_SHADER, FRAGMENT_SHADER
  ScrollDirection* {.size: sizeof(cint), pure.} = enum
    UP, DOWN, LEFT, RIGHT, SMOOTH
  ModifierType* {.size: sizeof(cint), pure.} = enum
    SHIFT_MASK = 1 shl 0, LOCK_MASK = 1 shl 1,
    CONTROL_MASK = 1 shl 2, MOD1_MASK = 1 shl 3,
    MOD2_MASK = 1 shl 4, MOD3_MASK = 1 shl 5, MOD4_MASK = 1 shl 6,
    MOD5_MASK = 1 shl 7, BUTTON1_MASK = 1 shl 8,
    BUTTON2_MASK = 1 shl 9, BUTTON3_MASK = 1 shl 10,
    BUTTON4_MASK = 1 shl 11, BUTTON5_MASK = 1 shl 12,
    SUPER_MASK = 1 shl 26, HYPER_MASK = 1 shl 27,
    META_MASK = 1 shl 28, RELEASE_MASK = 1 shl 30,
    MODIFIER_MASK = 0x5C001FFF
  ActorFlags* {.size: sizeof(cint), pure.} = enum
    MAPPED = 1 shl 1, REALIZED = 1 shl 2,
    REACTIVE = 1 shl 3, VISIBLE = 1 shl 4,
    NO_LAYOUT = 1 shl 5
  OffscreenRedirect* {.size: sizeof(cint), pure.} = enum
    AUTOMATIC_FOR_OPACITY = 1 shl 0,
    ALWAYS = 1 shl 1
  AllocationFlags* {.size: sizeof(cint), pure.} = enum
    NONE = 0, ABSOLUTE_ORIGIN_CHANGED = 1 shl 1,
    DELEGATE_LAYOUT = 1 shl 2
  AlignAxis* {.size: sizeof(cint), pure.} = enum
    X_AXIS, Y_AXIS, BOTH
  Interpolation* {.size: sizeof(cint), pure.} = enum
    LINEAR, CUBIC
  BinAlignment* {.size: sizeof(cint), pure.} = enum
    FIXED, FILL,
    START, END,
    CENTER
  BindCoordinate* {.size: sizeof(cint), pure.} = enum
    X, Y, WIDTH, HEIGHT,
    POSITION, SIZE, ALL
  EffectPaintFlags* {.size: sizeof(cint), pure.} = enum
    ACTOR_DIRTY = (1 shl 0)
  BoxAlignment* {.size: sizeof(cint), pure.} = enum
    START, END,
    CENTER
  LongPressState* {.size: sizeof(cint), pure.} = enum
    QUERY, ACTIVATE, CANCEL
  StaticColor* {.size: sizeof(cint), pure.} = enum
    WHITE = 0, BLACK, RED,
    DARK_RED, GREEN, DARK_GREEN,
    BLUE, DARK_BLUE, CYAN,
    DARK_CYAN, MAGENTA, DARK_MAGENTA,
    YELLOW, DARK_YELLOW, GRAY,
    DARK_GRAY, LIGHT_GRAY, BUTTER,
    BUTTER_LIGHT, BUTTER_DARK, ORANGE,
    ORANGE_LIGHT, ORANGE_DARK,
    CHOCOLATE, CHOCOLATE_LIGHT,
    CHOCOLATE_DARK, CHAMELEON,
    CHAMELEON_LIGHT, CHAMELEON_DARK,
    SKY_BLUE, SKY_BLUE_LIGHT,
    SKY_BLUE_DARK, PLUM, PLUM_LIGHT,
    PLUM_DARK, SCARLET_RED,
    SCARLET_RED_LIGHT, SCARLET_RED_DARK,
    ALUMINIUM_1, ALUMINIUM_2,
    ALUMINIUM_3, ALUMINIUM_4,
    ALUMINIUM_5, ALUMINIUM_6,
    TRANSPARENT
  DragAxis* {.size: sizeof(cint), pure.} = enum
    NONE = 0, X_AXIS, Y_AXIS
  EventFlags* {.size: sizeof(cint), pure.} = enum
    NONE = 0, FLAG_SYNTHETIC = 1 shl 0
  EventType* {.size: sizeof(cint), pure.} = enum
    NOTHING = 0, KEY_PRESS, KEY_RELEASE, MOTION,
    ENTER, LEAVE, BUTTON_PRESS, BUTTON_RELEASE,
    SCROLL, STAGE_STATE, DESTROY_NOTIFY,
    CLIENT_MESSAGE, DELETE, TOUCH_BEGIN,
    TOUCH_UPDATE, TOUCH_END, TOUCH_CANCEL,
    EVENT_LAST
  StageState* {.size: sizeof(cint), pure.} = enum
    FULLSCREEN = (1 shl 1),
    OFFSCREEN = (1 shl 2),
    ACTIVATED = (1 shl 3)
  FeatureFlags* {.size: sizeof(cint), pure.} = enum
    TEXTURE_NPOT = (1 shl 2),
    SYNC_TO_VBLANK = (1 shl 3),
    TEXTURE_YUV = (1 shl 4),
    TEXTURE_READ_PIXELS = (1 shl 5),
    STAGE_STATIC = (1 shl 6),
    STAGE_USER_RESIZE = (1 shl 7),
    STAGE_CURSOR = (1 shl 8),
    SHADERS_GLSL = (1 shl 9), OFFSCREEN = (1 shl 10),
    STAGE_MULTIPLE = (1 shl 11),
    SWAP_EVENTS = (1 shl 12)
  FlowOrientation* {.size: sizeof(cint), pure.} = enum
    HORIZONTAL, VERTICAL
  InputDeviceType* {.size: sizeof(cint), pure.} = enum
    POINTER_DEVICE, KEYBOARD_DEVICE, EXTENSION_DEVICE,
    JOYSTICK_DEVICE, TABLET_DEVICE, TOUCHPAD_DEVICE,
    TOUCHSCREEN_DEVICE, PEN_DEVICE, ERASER_DEVICE,
    CURSOR_DEVICE, N_DEVICE_TYPES
  InputMode* {.size: sizeof(cint), pure.} = enum
    MASTER, SLAVE, FLOATING
  InputAxis* {.size: sizeof(cint), pure.} = enum
    IGNORE, X, Y,
    PRESSURE, XTILT,
    YTILT, WHEEL,
    DISTANCE, LAST
  SnapEdge* {.size: sizeof(cint), pure.} = enum
    EDGE_TOP, EDGE_RIGHT, EDGE_BOTTOM, EDGE_LEFT
  PickMode* {.size: sizeof(cint), pure.} = enum
    NONE = 0, REACTIVE, ALL
  SwipeDirection* {.size: sizeof(cint), pure.} = enum
    UP = 1 shl 0, DOWN = 1 shl 1,
    LEFT = 1 shl 2, RIGHT = 1 shl 3
  PanAxis* {.size: sizeof(cint), pure.} = enum
    NONE = 0, X_AXIS, Y_AXIS
  TableAlignment* {.size: sizeof(cint), pure.} = enum
    START, CENTER, END
  TextureFlags* {.size: sizeof(cint), pure.} = enum
    NONE = 0, RGB_FLAG_BGR = 1 shl 1,
    RGB_FLAG_PREMULT = 1 shl 2,
    YUV_FLAG_YUV2 = 1 shl 3
  TextureQuality* {.size: sizeof(cint), pure.} = enum
    LOW, MEDIUM,
    HIGH
  TimelineDirection* {.size: sizeof(cint), pure.} = enum
    FORWARD, BACKWARD
  UnitType* {.size: sizeof(cint), pure.} = enum
    PIXEL, EM, MM, POINT, CM
  PathNodeType* {.size: sizeof(cint), pure.} = enum
    MOVE_TO = 0, LINE_TO = 1, CURVE_TO = 2,
    CLOSE = 3, REL_MOVE_TO = 32, REL_LINE_TO = 33
  ActorAlign* {.size: sizeof(cint), pure.} = enum
    FILL, START, CENTER, END
  RepaintFlags* {.size: sizeof(cint), pure.} = enum
    PRE_PAINT = 1 shl 0,
    POST_PAINT = 1 shl 1,
    QUEUE_REDRAW_ON_ADD = 1 shl 2
  ContentGravity* {.size: sizeof(cint), pure.} = enum
    TOP_LEFT, TOP,
    TOP_RIGHT, LEFT,
    CENTER, RIGHT,
    BOTTOM_LEFT, BOTTOM,
    BOTTOM_RIGHT, RESIZE_FILL,
    RESIZE_ASPECT
  ScalingFilter* {.size: sizeof(cint), pure.} = enum
    LINEAR, NEAREST, TRILINEAR
  Orientation* {.size: sizeof(cint), pure.} = enum
    HORIZONTAL, VERTICAL
  ScrollMode* {.size: sizeof(cint), pure.} = enum
    NONE = 0, HORIZONTALLY, VERTICALLY, BOTH
  GridPosition* {.size: sizeof(cint), pure.} = enum
    LEFT, RIGHT, TOP, BOTTOM
  ContentRepeat* {.size: sizeof(cint), pure.} = enum
    NONE = 0, X_AXIS, Y_AXIS, BOTH
  StepMode* {.size: sizeof(cint), pure.} = enum
    START, END
  ZoomAxis* {.size: sizeof(cint), pure.} = enum
    X_AXIS, Y_AXIS, BOTH
  GestureTriggerEdge* {.size: sizeof(cint), pure.} = enum
    NONE = 0, AFTER, BEFORE
  TranslateReturn* {.size: sizeof(cint), pure.} = enum
    CONTINUE, REMOVE, QUEUE
  ImageError* {.size: sizeof(cint), pure.} = enum
    INVALID_DATA
  InitError* {.size: sizeof(cint), pure.} = enum
    INTERNAL = -3, BACKEND = -2,
    THREADS = -1, UNKNOWN = 0,
    SUCCESS = 1
  PaintOpCode* {.size: sizeof(cint), pure.} = enum
    PAINT_OP_INVALID = 0, PAINT_OP_TEX_RECT, 
    PAINT_OP_PATH, PAINT_OP_PRIMITIVE
  PrivateFlags* {.size: sizeof(cint), pure.} = enum
    ACTOR_UNUSED_FLAG = 0, IN_DESTRUCTION = 1 shl 0,
    IS_TOPLEVEL = 1 shl 1, IN_REPARENT = 1 shl 2,
    IN_PAINT = 1 shl 3, IN_RELAYOUT = 1 shl 4,
    INTERNAL_CHILD = 1 shl 5
  CullResult* {.size: sizeof(cint), pure.} = enum
    UNKNOWN, IN, OUT,
    PARTIAL
  ProfileFlag* {.size: sizeof(cint), pure.} = enum
    PICKING_ONLY = 1 shl 0, DISABLE_REPORT = 1 shl 1
  ScriptError* {.size: sizeof(cint), pure.} = enum
    INVALID_TYPE_FUNCTION,
    INVALID_PROPERTY, INVALID_VALUE
  TextureError* {.size: sizeof(cint), pure.} = enum
    OUT_OF_MEMORY, NO_YUV,
    BAD_FORMAT

# The C code says that CLUTTER_PATH_REL_CURVE_TO = 
# CLUTTER_PATH_CURVE_TO | CLUTTER_PATH_RELATIVE,
# where CLUTTER_PATH_CURVE_TO is 2 and 
# CLUTTER_PATH_RELATIVE is 32. This would equal
# 32, the same value as CLUTTER_PATH_REL_MOVE_TO 
# (32 | 2 = 32 and 32 | 0 = 32).
const
  REL_CURVE_TO* = PathNodeType.REL_MOVE_TO

type
  CoglMatrix* = ptr object
  CoglRenderer* = ptr object
  CoglDisplay* = ptr object
  CoglContext* = ptr object
  CoglSwapChain* = ptr object
  CoglPath* = ptr object
  CoglTexture* = ptr object
  CoglTextureVertex* = ptr object
  CoglFramebuffer* = ptr object
  CoglPrimitive* = ptr object
  CoglMaterial* = ptr object
  CoglHandle* = object

type
  JsonNode* = ptr object
  JsonParser* = object
  CoglPixelFormat* {.size: sizeof(cint), pure.} = enum
    COGL_PIXEL_FORMAT_ANY
    COGL_PIXEL_FORMAT_A_8
    COGL_PIXEL_FORMAT_RGB_565
    COGL_PIXEL_FORMAT_RGBA_4444
    COGL_PIXEL_FORMAT_RGBA_5551
    COGL_PIXEL_FORMAT_YUV
    COGL_PIXEL_FORMAT_G_8
    COGL_PIXEL_FORMAT_RG_88
    COGL_PIXEL_FORMAT_RGB_888
    COGL_PIXEL_FORMAT_BGR_888
    COGL_PIXEL_FORMAT_RGBA_8888
    COGL_PIXEL_FORMAT_BGRA_8888
    COGL_PIXEL_FORMAT_ARGB_8888
    COGL_PIXEL_FORMAT_ABGR_8888
    COGL_PIXEL_FORMAT_RGBA_1010102
    COGL_PIXEL_FORMAT_BGRA_1010102
    COGL_PIXEL_FORMAT_ARGB_2101010
    COGL_PIXEL_FORMAT_ABGR_2101010
    COGL_PIXEL_FORMAT_RGBA_8888_PRE
    COGL_PIXEL_FORMAT_BGRA_8888_PRE
    COGL_PIXEL_FORMAT_ARGB_8888_PRE
    COGL_PIXEL_FORMAT_ABGR_8888_PRE
    COGL_PIXEL_FORMAT_RGBA_4444_PRE
    COGL_PIXEL_FORMAT_RGBA_5551_PRE
    COGL_PIXEL_FORMAT_RGBA_1010102_PRE
    COGL_PIXEL_FORMAT_BGRA_1010102_PRE
    COGL_PIXEL_FORMAT_ARGB_2101010_PRE
    COGL_PIXEL_FORMAT_ABGR_2101010_PRE
    COGL_PIXEL_FORMAT_DEPTH_16
    COGL_PIXEL_FORMAT_DEPTH_32
    COGL_PIXEL_FORMAT_DEPTH_24_STENCIL_8
  CoglBufferBit* {.size: sizeof(cint), pure.} = enum
    COGL_BUFFER_BIT_COLOR
    COGL_BUFFER_BIT_DEPTH
    COGL_BUFFER_BIT_STENCIL

type
  AState* = ptr AStateObj
  AStateObj* = object
    easing_duration*: cuint
    easing_delay*: cuint
    easing_mode*: AnimationMode
  AnimationInfo* = ptr AnimationInfoObj
  AnimationInfoObj* = object
    states*: ptr GArray
    cur_states*: AState
    transitions*: ptr GHashTable
  BindConstraint* = ptr object
  SnapConstraint* = ptr object
  AlignConstraint* = ptr object
  AlphaPrivate* = ptr object
  Alpha* = ptr AlphaObj
  AlphaObj* = object
    parent*: GInitiallyUnowned
    priv*: AlphaPrivate
  Action* = ptr ActionObj
  ActionObj* = object
    parent_instance*: ActorMetaObj
  ActionClass* = object
    parent_class*: ActorMetaClass
    clutter_action1*: proc ()
    clutter_action2*: proc ()
    clutter_action3*: proc ()
    clutter_action4*: proc ()
    clutter_action5*: proc ()
    clutter_action6*: proc ()
    clutter_action7*: proc ()
    clutter_action8*: proc ()
  MetaGroup* = ptr MetaGroupObj
  MetaGroupObj* = object
    parent_instance*: GObject
    actor*: Actor
    meta*: ptr GList
  MetaGroupClass* = object
    parent_class*: GObjectClass
  ActorMetaPrivate* = ptr object
  ActorMeta* = ptr ActorMetaObj
  ActorMetaObj* = object
    parent_instance*: GInitiallyUnowned
    priv*: ActorMetaPrivate
  ActorMetaClass* = object
    parent_class*: GInitiallyUnownedClass
    set_actor*: proc (meta: ActorMeta; actor: Actor)
    clutter_meta1*: proc ()
    clutter_meta2*: proc ()
    clutter_meta3*: proc ()
    clutter_meta4*: proc ()
    clutter_meta5*: proc ()
    clutter_meta6*: proc ()
    clutter_meta7*: proc ()
  INNER_C_STRUCT* = object
    x*: cdouble
    y*: cdouble
  INNER_C_UNION* = object {.union.}
    fraction*: INNER_C_STRUCT
    units*: VertexObj
  AnchorCoord* = object
    is_fractional*: Gboolean
    v*: INNER_C_UNION
  SizeRequest* = object
    age*: cuint
    for_size*: cfloat
    min_size*: cfloat
    natural_size*: cfloat
  LayoutInfo* = ptr LayoutInfoObj
  LayoutInfoObj* = object
    fixed_pos*: PointObj
    margin*: MarginObj
    x_align* {.bitsize: 4.}: cuint
    y_align* {.bitsize: 4.}: cuint
    x_expand* {.bitsize: 1.}: cuint
    y_expand* {.bitsize: 1.}: cuint
    minimum*: Size
    natural*: Size
  TransformInfo* = ptr TransformInfoObj
  TransformInfoObj* = object
    rx_angle*: cdouble
    rx_center*: AnchorCoord
    ry_angle*: cdouble
    ry_center*: AnchorCoord
    rz_angle*: cdouble
    rz_center*: AnchorCoord
    scale_x*: cdouble
    scale_y*: cdouble
    scale_z*: cdouble
    scale_center*: AnchorCoord
    anchor*: AnchorCoord
    translation*: VertexObj
    z_position*: cfloat
    pivot*: PointObj
    pivot_z*: cfloat
    transform*: CoglMatrix
    transform_set* {.bitsize: 1.}: cuint
    child_transform*: CoglMatrix
    child_transform_set* {.bitsize: 1.}: cuint
  Callback* = proc (actor: Actor; data: Gpointer)
  Bezier* = ptr object
  BrightnessContrastEffect* = ptr object
  ActorPrivate* = ptr object
  Actor* = ptr ActorObj
  ActorObj* = object
    parent_instance*: GInitiallyUnowned
    flags*: cuint
    private_flags*: cuint
    priv*: ActorPrivate
  ActorClass* = object
    parent_class*: GInitiallyUnownedClass
    show*: proc (self: Actor)
    show_all*: proc (self: Actor)
    hide*: proc (self: Actor)
    hide_all*: proc (self: Actor)
    realize*: proc (self: Actor)
    unrealize*: proc (self: Actor)
    map*: proc (self: Actor)
    unmap*: proc (self: Actor)
    paint*: proc (self: Actor)
    parent_set*: proc (actor: Actor; old_parent: Actor)
    destroy*: proc (self: Actor)
    pick*: proc (actor: Actor; color: Color)
    queue_redraw*: proc (actor: Actor; leaf_that_queued: Actor)
    get_preferred_width*: proc (self: Actor; for_height: cfloat; min_width_p: ptr cfloat; natural_width_p: ptr cfloat)
    get_preferred_height*: proc (self: Actor; for_width: cfloat; min_height_p: ptr cfloat; natural_height_p: ptr cfloat)
    allocate*: proc (self: Actor; box: ActorBox; flags: AllocationFlags)
    apply_transform*: proc (actor: Actor; matrix: ptr Matrix)
    event*: proc (actor: Actor; event: Event): Gboolean
    button_press_event*: proc (actor: Actor; event: ButtonEvent): Gboolean
    button_release_event*: proc (actor: Actor; event: ButtonEvent): Gboolean
    scroll_event*: proc (actor: Actor; event: ScrollEvent): Gboolean
    key_press_event*: proc (actor: Actor; event: KeyEvent): Gboolean
    key_release_event*: proc (actor: Actor; event: KeyEvent): Gboolean
    motion_event*: proc (actor: Actor; event: MotionEvent): Gboolean
    enter_event*: proc (actor: Actor; event: CrossingEvent): Gboolean
    leave_event*: proc (actor: Actor; event: CrossingEvent): Gboolean
    captured_event*: proc (actor: Actor; event: Event): Gboolean
    key_focus_in*: proc (actor: Actor)
    key_focus_out*: proc (actor: Actor)
    queue_relayout*: proc (self: Actor)
    get_accessible*: proc (self: Actor): atk.Object
    get_paint_volume*: proc (actor: Actor; volume: PaintVolume): Gboolean
    has_overlaps*: proc (self: Actor): Gboolean
    paint_node*: proc (self: Actor; root: PaintNode)
    touch_event*: proc (self: Actor; event: TouchEvent): Gboolean
    padding_dummy*: array[26, Gpointer]
  ActorIter* = ptr ActorIterObj
  ActorIterObj* = object
    CLUTTER_PRIVATE_FIELD1*: proc (a2: cint): Gpointer
    CLUTTER_PRIVATE_FIELD2*: proc (a2: cint): Gpointer
    CLUTTER_PRIVATE_FIELD3*: proc (a2: cint): Gpointer
    CLUTTER_PRIVATE_FIELD4*: proc (a2: cint): cint
    CLUTTER_PRIVATE_FIELD5*: proc (a2: cint): Gpointer
  AnimationPrivate* = ptr object
  Animation* = ptr AnimationObj
  AnimationObj* = object
    parent_instance*: GObject
    priv*: AnimationPrivate
  Animatable* = ptr object
  AnimatableIface* = object
    parent_iface*: GTypeInterface
    animate_property*: proc (animatable: Animatable; animation: Animation; property_name: cstring; initial_value: ptr GValue; final_value: ptr GValue; progress: cdouble; value: ptr GValue): Gboolean
    find_property*: proc (animatable: Animatable; property_name: cstring): ptr GParamSpec
    get_initial_state*: proc (animatable: Animatable; property_name: cstring; value: ptr GValue)
    set_final_state*: proc (animatable: Animatable; property_name: cstring; value: ptr GValue)
    interpolate_value*: proc (animatable: Animatable; property_name: cstring; interval: Interval; progress: cdouble; value: ptr GValue): Gboolean
  BackendPrivate* = ptr object
  Backend* = ptr BackendObj
  BackendObj* = object
    parent_instance*: GObject
    cogl_renderer*: CoglRenderer
    cogl_display*: CoglDisplay
    cogl_context*: CoglContext
    cogl_source*: ptr GSource
    device_manager*: DeviceManager
    priv*: BackendPrivate
  StageWindow* = ptr object
  BackendClass* = object
    parent_class*: GObjectClass
    stage_window_type*: GType
    pre_parse*: proc (backend: Backend; error: ptr ptr GError): Gboolean
    post_parse*: proc (backend: Backend; error: ptr ptr GError): Gboolean
    create_stage*: proc (backend: Backend; wrapper: Stage; error: ptr ptr GError): StageWindow
    init_events*: proc (backend: Backend)
    init_features*: proc (backend: Backend)
    add_options*: proc (backend: Backend; group: ptr GOptionGroup)
    get_features*: proc (backend: Backend): FeatureFlags
    get_renderer*: proc (backend: Backend; error: ptr ptr GError): CoglRenderer
    get_display*: proc (backend: Backend; renderer: CoglRenderer; swap_chain: CoglSwapChain; error: ptr ptr GError): CoglDisplay
    create_context*: proc (backend: Backend; error: ptr ptr GError): Gboolean
    ensure_context*: proc (backend: Backend; stage: Stage)
    get_device_manager*: proc (backend: Backend): DeviceManager
    copy_event_data*: proc (backend: Backend; src: Event; dest: Event)
    free_event_data*: proc (backend: Backend; event: Event)
    translate_event*: proc (backend: Backend; native: Gpointer; event: Event): Gboolean
    get_keymap_direction*: proc (backend: Backend): Direction
    resolution_changed*: proc (backend: Backend)
    font_changed*: proc (backend: Backend)
    settings_changed*: proc (backend: Backend)
  BinLayoutPrivate* = ptr object
  BinLayout* = ptr BinLayoutObj
  BinLayoutObj* = object
    parent_instance*: LayoutManagerObj
    priv*: BinLayoutPrivate
  BinLayoutClass* = object
    parent_class*: LayoutManagerClass
  BindingActionFunc* = proc (gobject: ptr GObject; action_name: cstring; key_val: cuint; modifiers: ModifierType; user_data: Gpointer): Gboolean
  BindingPool* = ptr object
  BoxLayoutPrivate* = ptr object
  BoxLayout* = ptr BoxLayoutObj
  BoxLayoutObj* = object
    parent_instance*: LayoutManagerObj
    priv*: BoxLayoutPrivate
  BoxLayoutClass* = object
    parent_class*: LayoutManagerClass
  CanvasPrivate* = ptr object
  Canvas* = ptr CanvasObj
  CanvasObj* = object
    parent_instance*: GObject
    priv*: CanvasPrivate
  CanvasClass* = object
    parent_class*: GObjectClass
    draw*: proc (canvas: Canvas; cr: cairo.Context; width: cint; height: cint): Gboolean
    padding*: array[16, Gpointer]
  ChildMeta* = ptr ChildMetaObj
  ChildMetaObj* = object
    parent_instance*: GObject
    container*: Container
    actor*: Actor
  ChildMetaClass* = object
    parent_class*: GObjectClass
  ClickActionPrivate* = ptr object
  ClickAction* = ptr ClickActionObj
  ClickActionObj* = object
    parent_instance*: ActionObj
    priv*: ClickActionPrivate
  ClickActionClass* = object
    parent_class*: ActionClass
    clicked*: proc (action: ClickAction; actor: Actor)
    long_press*: proc (action: ClickAction; actor: Actor; state: LongPressState): Gboolean
    clutter_click_action1*: proc ()
    clutter_click_action2*: proc ()
    clutter_click_action3*: proc ()
    clutter_click_action4*: proc ()
    clutter_click_action5*: proc ()
    clutter_click_action6*: proc ()
    clutter_click_action7*: proc ()
  ClonePrivate* = ptr object
  Clone* = ptr CloneObj
  CloneObj* = object
    parent_instance*: Actor
    priv*: ClonePrivate
  CloneClass* = object
    parent_class*: ActorClass
    clutter_actor_clone1*: proc ()
    clutter_actor_clone2*: proc ()
    clutter_actor_clone3*: proc ()
    clutter_actor_clone4*: proc ()
  Color* = ptr ColorObj
  ColorObj* = object
    red*: cuchar
    green*: cuchar
    blue*: cuchar
    alpha*: cuchar
  ColorizeEffect* = ptr object
  Container* = ptr object
  ParamSpecColor* = ptr ParamSpecColorObj
  ParamSpecColorObj* = object
    parent_instance*: GParamSpec
    default_value*: Color
  Constraint* = ptr ConstraintObj
  ConstraintObj* = object
    parent_instance*: ActorMetaObj
  ConstraintClass* = object
    parent_class*: ActorMetaClass
    update_allocation*: proc (constraint: Constraint; actor: Actor; allocation: ActorBox)
    update_preferred_size*: proc (constraint: Constraint; actor: Actor; direction: Orientation; for_size: cfloat; minimum_size: ptr cfloat; natural_size: ptr cfloat)
    clutter_constraint1*: proc ()
    clutter_constraint2*: proc ()
    clutter_constraint3*: proc ()
    clutter_constraint4*: proc ()
    clutter_constraint5*: proc ()
    clutter_constraint6*: proc ()
    clutter_constraint7*: proc ()
  ContainerIface* = object
    g_iface*: GTypeInterface
    add*: proc (container: Container; actor: Actor)
    remove*: proc (container: Container; actor: Actor)
    foreach*: proc (container: Container; callback: Callback; user_data: Gpointer)
    foreach_with_internals*: proc (container: Container; callback: Callback; user_data: Gpointer)
    `raise`*: proc (container: Container; actor: Actor; sibling: Actor)
    lower*: proc (container: Container; actor: Actor; sibling: Actor)
    sort_depth_order*: proc (container: Container)
    child_meta_type*: GType
    create_child_meta*: proc (container: Container; actor: Actor)
    destroy_child_meta*: proc (container: Container; actor: Actor)
    get_child_meta*: proc (container: Container; actor: Actor): ChildMeta
    actor_added*: proc (container: Container; actor: Actor)
    actor_removed*: proc (container: Container; actor: Actor)
    child_notify*: proc (container: Container; child: Actor; pspec: ptr GParamSpec)
  Content* = ptr object
  ContentIface* = object
    g_iface*: GTypeInterface
    get_preferred_size*: proc (content: Content; width: ptr cfloat; height: ptr cfloat): Gboolean
    paint_content*: proc (content: Content; actor: Actor; node: PaintNode)
    attached*: proc (content: Content; actor: Actor)
    detached*: proc (content: Content; actor: Actor)
    invalidate*: proc (content: Content)
  DeformEffectPrivate* = ptr object
  DeformEffect* = ptr DeformEffectObj
  DeformEffectObj* = object
    parent_instance*: OffscreenEffectObj
    priv*: DeformEffectPrivate
  DeformEffectClass* = object
    parent_class*: OffscreenEffectClass
    deform_vertex*: proc (effect: DeformEffect; width: cfloat; height: cfloat; vertex: CoglTextureVertex)
    clutter_deform1*: proc ()
    clutter_deform2*: proc ()
    clutter_deform3*: proc ()
    clutter_deform4*: proc ()
    clutter_deform5*: proc ()
    clutter_deform6*: proc ()
    clutter_deform7*: proc ()
  DesaturateEffect* = ptr object
  EventSequence* = ptr object
  AxisInfo* = ptr AxisInfoObj
  AxisInfoObj* = object
    axis*: InputAxis
    min_axis*: cdouble
    max_axis*: cdouble
    min_value*: cdouble
    max_value*: cdouble
    resolution*: cdouble
  KeyInfo* = ptr KeyInfoObj
  KeyInfoObj* = object
    keyval*: cuint
    modifiers*: ModifierType
  ScrollInfo* = ptr ScrollInfoObj
  ScrollInfoObj* = object
    axis_id*: cuint
    direction*: ScrollDirection
    increment*: cdouble
    last_value*: cdouble
    last_value_valid* {.bitsize: 1.}: cuint
  TouchInfo* = ptr TouchInfoObj
  TouchInfoObj* = object
    sequence*: EventSequence
    actor*: Actor
    current_x*: cfloat
    current_y*: cfloat
  InputDevice* = ptr InputDeviceObj
  InputDeviceObj* = object
    parent_instance*: GObject
    id*: cint
    device_type*: InputDeviceType
    device_mode*: InputMode
    device_name*: cstring
    device_manager*: DeviceManager
    backend*: Backend
    associated*: InputDevice
    slaves*: ptr GList
    cursor_actor*: Actor
    inv_touch_sequence_actors*: ptr GHashTable
    pointer_grab_actor*: Actor
    keyboard_grab_actor*: Actor
    sequence_grab_actors*: ptr GHashTable
    inv_sequence_grab_actors*: ptr GHashTable
    click_count*: cint
    stage*: Stage
    current_x*: cfloat
    current_y*: cfloat
    current_time*: cuint
    current_button_number*: cint
    current_state*: ModifierType
    touch_sequences_info*: ptr GHashTable
    previous_x*: cint
    previous_y*: cint
    previous_time*: cuint
    previous_button_number*: cint
    previous_state*: ModifierType
    axes*: ptr GArray
    n_keys*: cuint
    keys*: ptr GArray
    scroll_info*: ptr GArray
    has_cursor* {.bitsize: 1.}: cuint
    is_enabled* {.bitsize: 1.}: cuint
  InputDeviceClass* = object
    parent_class*: GObjectClass
    keycode_to_evdev*: proc (device: InputDevice; hardware_keycode: cuint; evdev_keycode: ptr cuint): Gboolean
  DeviceManagerPrivate* = ptr object
  DeviceManager* = ptr DeviceManagerObj
  DeviceManagerObj* = object
    parent_instance*: GObject
    priv*: DeviceManagerPrivate
  DeviceManagerClass* = object
    parent_class*: GObjectClass
    get_devices*: proc (device_manager: DeviceManager): ptr GSList
    get_core_device*: proc (device_manager: DeviceManager; device_type: InputDeviceType): InputDevice
    get_device*: proc (device_manager: DeviceManager; device_id: cint): InputDevice
    add_device*: proc (manager: DeviceManager; device: InputDevice)
    remove_device*: proc (manager: DeviceManager; device: InputDevice)
    select_stage_events*: proc (manager: DeviceManager; stage: Stage)
    padding*: array[7, Gpointer]
  DragActionPrivate* = ptr object
  DragAction* = ptr DragActionObj
  DragActionObj* = object
    parent_instance*: ActionObj
    priv*: DragActionPrivate
  DragActionClass* = object
    parentclass*: ActionClass
    drag_begin*: proc (action: DragAction; actor: Actor; event_x: cfloat; event_y: cfloat; modifiers: ModifierType)
    drag_motion*: proc (action: DragAction; actor: Actor; delta_x: cfloat; delta_y: cfloat)
    drag_end*: proc (action: DragAction; actor: Actor; event_x: cfloat; event_y: cfloat; modifiers: ModifierType)
    drag_progress*: proc (action: DragAction; actor: Actor; delta_x: cfloat; delta_y: cfloat): Gboolean
    clutter_drag_action1*: proc ()
    clutter_drag_action2*: proc ()
    clutter_drag_action3*: proc ()
    clutter_drag_action4*: proc ()
  DropActionPrivate* = ptr object
  DropAction* = ptr DropActionObj
  DropActionObj* = object
    parent_instance*: ActionObj
    priv*: DropActionPrivate
  DropActionClass* = object
    parentclass*: ActionClass
    can_drop*: proc (action: DropAction; actor: Actor; event_x: cfloat; event_y: cfloat): Gboolean
    over_in*: proc (action: DropAction; actor: Actor)
    over_out*: proc (action: DropAction; actor: Actor)
    drop*: proc (action: DropAction; actor: Actor; event_x: cfloat; event_y: cfloat)
    clutter_drop_action1*: proc ()
    clutter_drop_action2*: proc ()
    clutter_drop_action3*: proc ()
    clutter_drop_action4*: proc ()
    clutter_drop_action5*: proc ()
    clutter_drop_action6*: proc ()
    clutter_drop_action7*: proc ()
    clutter_drop_action8*: proc ()
  EasingFunc* = proc (t: cdouble; d: cdouble): cdouble
  Effect* = ptr EffectObj
  EffectObj* = object
    parent_instance*: ActorMetaObj
  EffectClass* = object
    parent_class*: ActorMetaClass
    pre_paint*: proc (effect: Effect): Gboolean
    post_paint*: proc (effect: Effect)
    get_paint_volume*: proc (effect: Effect; volume: PaintVolume): Gboolean
    paint*: proc (effect: Effect; flags: EffectPaintFlags)
    pick*: proc (effect: Effect; flags: EffectPaintFlags)
    clutter_effect4*: proc ()
    clutter_effect5*: proc ()
    clutter_effect6*: proc ()
  EventTranslator* = ptr object
  EventTranslatorIface* = object
    g_iface*: GTypeInterface
    translate_event*: proc (translator: EventTranslator; native: Gpointer; translated: Event): TranslateReturn
  AnyEvent* = ptr AnyEventObj
  AnyEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
  KeyEvent* = ptr KeyEventObj
  KeyEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    modifier_state*: ModifierType
    keyval*: cuint
    hardware_keycode*: cushort
    unicode_value*: Gunichar
    device*: InputDevice
  ButtonEvent* = ptr ButtonEventObj
  ButtonEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    x*: cfloat
    y*: cfloat
    modifier_state*: ModifierType
    button*: cuint
    click_count*: cuint
    axes*: ptr cdouble
    device*: InputDevice
  CrossingEvent* = ptr CrossingEventObj
  CrossingEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    x*: cfloat
    y*: cfloat
    device*: InputDevice
    related*: Actor
  MotionEvent* = ptr MotionEventObj
  MotionEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    x*: cfloat
    y*: cfloat
    modifier_state*: ModifierType
    axes*: ptr cdouble
    device*: InputDevice
  ScrollEvent* = ptr ScrollEventObj
  ScrollEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    x*: cfloat
    y*: cfloat
    direction*: ScrollDirection
    modifier_state*: ModifierType
    axes*: ptr cdouble
    device*: InputDevice
  StageStateEvent* = ptr StageStateEventObj
  StageStateEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    changed_mask*: StageState
    new_state*: StageState
  TouchEvent* = ptr TouchEventObj
  TouchEventObj* = object
    `type`*: EventType
    time*: cuint
    flags*: EventFlags
    stage*: Stage
    source*: Actor
    x*: cfloat
    y*: cfloat
    sequence*: EventSequence
    modifier_state*: ModifierType
    axes*: ptr cdouble
    device*: InputDevice
  Event* = ptr EventObj
  EventObj* = object {.union.}
    `type`*: EventType
    `any`*: AnyEventObj
    button*: ButtonEventObj
    key*: KeyEventObj
    motion*: MotionEventObj
    scroll*: ScrollEventObj
    stage_state*: StageStateEventObj
    crossing*: CrossingEventObj
    touch*: TouchEventObj
  EventFilterFunc* = proc (event: Event; user_data: Gpointer): Gboolean
  FixedLayout* = ptr FixedLayoutObj
  FixedLayoutObj* = object
    parent_instance*: LayoutManagerObj
  FixedLayoutClass* = object
    parent_class*: LayoutManagerClass
  FlattenEffectClass* = object
    parent_class*: OffscreenEffectClass
  FlattenEffect* = ptr FlattenEffectObj
  FlattenEffectObj* = object
    parent*: OffscreenEffectObj
  FlowLayoutPrivate* = ptr object
  FlowLayout* = ptr FlowLayoutObj
  FlowLayoutObj* = object
    parent_instance*: LayoutManagerObj
    priv*: FlowLayoutPrivate
  FlowLayoutClass* = object
    parent_class*: LayoutManagerClass
  GestureActionPrivate* = ptr object
  GestureAction* = ptr GestureActionObj
  GestureActionObj* = object
    parent_instance*: ActionObj
    priv*: GestureActionPrivate
  GestureActionClass* = object
    parent_class*: ActionClass
    gesture_begin*: proc (action: GestureAction; actor: Actor): Gboolean
    gesture_progress*: proc (action: GestureAction; actor: Actor): Gboolean
    gesture_end*: proc (action: GestureAction; actor: Actor)
    gesture_cancel*: proc (action: GestureAction; actor: Actor)
    gesture_prepare*: proc (action: GestureAction; actor: Actor): Gboolean
    clutter_gesture_action1*: proc ()
    clutter_gesture_action2*: proc ()
    clutter_gesture_action3*: proc ()
    clutter_gesture_action4*: proc ()
    clutter_gesture_action5*: proc ()
    clutter_gesture_action6*: proc ()
  GridLayoutPrivate* = ptr object
  GridLayout* = ptr GridLayoutObj
  GridLayoutObj* = object
    parent_instance*: LayoutManagerObj
    priv*: GridLayoutPrivate
  GridLayoutClass* = object
    parent_class*: LayoutManagerClass
    padding*: array[8, Gpointer]
  GroupPrivate* = ptr object
  Group* = object
    parent_instance*: Actor
    priv*: GroupPrivate
  GroupClass* = object
    parent_class*: ActorClass
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
  IDPool* = ptr IDPoolObj
  IDPoolObj* = object
    array*: ptr GArray
    free_ids*: ptr GSList
  ImagePrivate* = ptr object
  Image* = ptr ImageObj
  ImageObj* = object
    parent_instance*: GObject
    priv*: ImagePrivate
  ImageClass* = object
    parent_class*: GObjectClass
    padding*: array[16, Gpointer]
  IntervalPrivate* = ptr object
  Interval* = ptr IntervalObj
  IntervalObj* = object
    parent_instance*: GInitiallyUnowned
    priv*: IntervalPrivate
  IntervalClass* = object
    parent_class*: GInitiallyUnownedClass
    validate*: proc (interval: Interval; pspec: ptr GParamSpec): Gboolean
    compute_value*: proc (interval: Interval; factor: cdouble; value: ptr GValue): Gboolean
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
  KeyframeTransitionPrivate* = ptr object
  KeyframeTransition* = ptr KeyframeTransitionObj
  KeyframeTransitionObj* = object
    parent_instance*: PropertyTransitionObj
    priv*: KeyframeTransitionPrivate
  KeyframeTransitionClass* = object
    parent_class*: PropertyTransitionClass
    padding*: array[8, Gpointer]
  LayoutManager* = ptr LayoutManagerObj
  LayoutManagerObj* = object
    parent_instance*: GInitiallyUnowned
    dummy*: Gpointer
  LayoutManagerClass* = object
    parent_class*: GInitiallyUnownedClass
    get_preferred_width*: proc (manager: LayoutManager; container: Container; for_height: cfloat; min_width_p: ptr cfloat; nat_width_p: ptr cfloat)
    get_preferred_height*: proc (manager: LayoutManager; container: Container; for_width: cfloat; min_height_p: ptr cfloat; nat_height_p: ptr cfloat)
    allocate*: proc (manager: LayoutManager; container: Container; allocation: ActorBox; flags: AllocationFlags)
    set_container*: proc (manager: LayoutManager; container: Container)
    get_child_meta_type*: proc (manager: LayoutManager): GType
    create_child_meta*: proc (manager: LayoutManager; container: Container; actor: Actor): LayoutMeta
    begin_animation*: proc (manager: LayoutManager; duration: cuint; mode: Gulong): Alpha
    get_animation_progress*: proc (manager: LayoutManager): cdouble
    end_animation*: proc (manager: LayoutManager)
    layout_changed*: proc (manager: LayoutManager)
    clutter_padding_1*: proc ()
    clutter_padding_2*: proc ()
    clutter_padding_3*: proc ()
    clutter_padding_4*: proc ()
    clutter_padding_5*: proc ()
    clutter_padding_6*: proc ()
    clutter_padding_7*: proc ()
    clutter_padding_8*: proc ()
  LayoutMeta* = ptr LayoutMetaObj
  LayoutMetaObj* = object
    parent_instance*: ChildMetaObj
    manager*: LayoutManager
    dummy0*: cint
    dummy1*: Gpointer
  LayoutMetaClass* = object
    parent_class*: ChildMetaClass
    clutter_padding1*: proc ()
    clutter_padding2*: proc ()
    clutter_padding3*: proc ()
    clutter_padding4*: proc ()
  ListModelPrivate* = ptr object
  ListModel* = ptr ListModelObj
  ListModelObj* = object
    parent_instance*: ModelObj
    priv*: ListModelPrivate
  ListModelClass* = object
    parent_class*: ModelClass
  ModelFilterFunc* = proc (model: Model; iter: ModelIter; user_data: Gpointer): Gboolean
  ModelSortFunc* = proc (model: Model; a: ptr GValue; b: ptr GValue; user_data: Gpointer): cint
  ModelForeachFunc* = proc (model: Model; iter: ModelIter; user_data: Gpointer): Gboolean
  ModelPrivate* = ptr object
  Model* = ptr ModelObj
  ModelObj* = object
    parent_instance*: GObject
    priv*: ModelPrivate
  ModelClass* = object
    parent_class*: GObjectClass
    get_n_rows*: proc (model: Model): cuint
    get_n_columns*: proc (model: Model): cuint
    get_column_name*: proc (model: Model; column: cuint): cstring
    get_column_type*: proc (model: Model; column: cuint): GType
    insert_row*: proc (model: Model; index: cint): ModelIter
    remove_row*: proc (model: Model; row: cuint)
    get_iter_at_row*: proc (model: Model; row: cuint): ModelIter
    resort*: proc (model: Model; `func`: ModelSortFunc; data: Gpointer)
    row_added*: proc (model: Model; iter: ModelIter)
    row_removed*: proc (model: Model; iter: ModelIter)
    row_changed*: proc (model: Model; iter: ModelIter)
    sort_changed*: proc (model: Model)
    filter_changed*: proc (model: Model)
    clutter_model_1*: proc ()
    clutter_model_2*: proc ()
    clutter_model_3*: proc ()
    clutter_model_4*: proc ()
    clutter_model_5*: proc ()
    clutter_model_6*: proc ()
    clutter_model_7*: proc ()
    clutter_model_8*: proc ()
  ModelIterPrivate* = ptr object
  ModelIter* = ptr ModelIterObj
  ModelIterObj* = object
    parent_instance*: GObject
    priv*: ModelIterPrivate
  ModelIterClass* = object
    parent_class*: GObjectClass
    get_value*: proc (iter: ModelIter; column: cuint; value: ptr GValue)
    set_value*: proc (iter: ModelIter; column: cuint; value: ptr GValue)
    is_first*: proc (iter: ModelIter): Gboolean
    is_last*: proc (iter: ModelIter): Gboolean
    next*: proc (iter: ModelIter): ModelIter
    prev*: proc (iter: ModelIter): ModelIter
    get_model*: proc (iter: ModelIter): Model
    get_row*: proc (iter: ModelIter): cuint
    copy*: proc (iter: ModelIter): ModelIter
    clutter_model_iter_1*: proc ()
    clutter_model_iter_2*: proc ()
    clutter_model_iter_3*: proc ()
    clutter_model_iter_4*: proc ()
    clutter_model_iter_5*: proc ()
    clutter_model_iter_6*: proc ()
    clutter_model_iter_7*: proc ()
    clutter_model_iter_8*: proc ()
  OffscreenEffectPrivate* = ptr object
  OffscreenEffect* = ptr OffscreenEffectObj
  OffscreenEffectObj* = object
    parent_instance*: EffectObj
    priv*: OffscreenEffectPrivate
  OffscreenEffectClass* = object
    parent_class*: EffectClass
    create_texture*: proc (effect: OffscreenEffect; width: cfloat; height: cfloat): CoglHandle
    paint_target*: proc (effect: OffscreenEffect)
    clutter_offscreen1*: proc ()
    clutter_offscreen2*: proc ()
    clutter_offscreen3*: proc ()
    clutter_offscreen4*: proc ()
    clutter_offscreen5*: proc ()
    clutter_offscreen6*: proc ()
    clutter_offscreen7*: proc ()
  PageTurnEffect* = ptr PageTurnEffectObj
  PageTurnEffectObj* = object
    parent_instance*: DeformEffectObj
    period*: cdouble
    angle*: cdouble
    radius*: cfloat
  PageTurnClass* = object
    parent_class*: DeformEffectClass
  PaintNode* = ptr PaintNodeObj
  PaintNodeObj* = object
    parent_instance*: GTypeInstance
    parent*: PaintNode
    first_child*: PaintNode
    prev_sibling*: PaintNode
    next_sibling*: PaintNode
    last_child*: PaintNode
    n_children*: cuint
    operations*: ptr GArray
    name*: cstring
    ref_count*: cint
  PaintNodeClass* = object
    base_class*: GTypeClass
    finalize*: proc (node: PaintNode)
    pre_draw*: proc (node: PaintNode): Gboolean
    draw*: proc (node: PaintNode)
    post_draw*: proc (node: PaintNode)
    serialize*: proc (node: PaintNode): JsonNode
    get_framebuffer*: proc (node: PaintNode): CoglFramebuffer
  INNER_C_UNION_PAINT* = object {.union.}
    texrect*: array[8, cfloat]
    path*: CoglPath
    primitive*: CoglPrimitive
  PaintOperation* = ptr PaintOperationObj
  PaintOperationObj* = object
    opcode*: PaintOpCode
    op*: INNER_C_UNION_PAINT
  PaintVolume* = ptr PaintVolumeObj
  PaintVolumeObj* = object
    actor*: Actor
    vertices*: array[8, VertexObj]
    is_static* {.bitsize: 1.}: cuint
    is_empty* {.bitsize: 1.}: cuint
    is_complete* {.bitsize: 1.}: cuint
    is_2d* {.bitsize: 1.}: cuint
    is_axis_aligned* {.bitsize: 1.}: cuint
  PanActionPrivate* = ptr object
  PanAction* = ptr PanActionObj
  PanActionObj* = object
    parent_instance*: GestureActionObj
    priv*: PanActionPrivate
  PanActionClass* = object
    parent_class*: GestureActionClass
    pan*: proc (action: PanAction; actor: Actor; is_interpolated: Gboolean): Gboolean
    pan_stopped*: proc (action: PanAction; actor: Actor)
    clutter_pan_action1*: proc ()
    clutter_pan_action2*: proc ()
    clutter_pan_action3*: proc ()
    clutter_pan_action4*: proc ()
    clutter_pan_action5*: proc ()
    clutter_pan_action6*: proc ()
  PathCallback* = proc (node: PathNode; data: Gpointer)
  PathPrivate* = ptr object
  Path* = ptr PathObj
  PathObj* = object
    parent*: GInitiallyUnowned
    priv*: PathPrivate
  PathClass* = object
    parent_class*: GInitiallyUnownedClass
  MasterClock* = ptr MasterClockObj
  MasterClockObj* = object
    parent_instance*: GObject
    timelines*: ptr GSList
    cur_tick*: int64
    prev_tick*: int64
    source*: ptr GSource
    idle* {.bitsize: 1.}: cuint
    ensure_next_iteration* {.bitsize: 1.}: cuint
    paused* {.bitsize: 1.}: cuint
  MainContext* = ptr MainContextObj
  MainContextObj* = object
    backend*: Backend
    stage_manager*: StageManager
    master_clock*: MasterClock
    events_queue*: ptr GQueue
    event_filters*: ptr GList
    pick_mode*: PickMode
    frame_rate*: cuint
    pointer_grab_actor*: Actor
    keyboard_grab_actor*: Actor
    shaders*: ptr GSList
    fb_r_mask*: cint
    fb_g_mask*: cint
    fb_b_mask*: cint
    fb_r_mask_used*: cint
    fb_g_mask_used*: cint
    fb_b_mask_used*: cint
    font_map*: ptr FontMap
    current_event*: ptr GSList
    repaint_funcs*: ptr GList
    last_repaint_id*: cuint
    settings*: Settings
    is_initialized* {.bitsize: 1.}: cuint
    motion_events_per_actor* {.bitsize: 1.}: cuint
    defer_display_setup* {.bitsize: 1.}: cuint
    options_parsed* {.bitsize: 1.}: cuint
    show_fps* {.bitsize: 1.}: cuint
  ThreadsDispatch* = object
    `func`*: GSourceFunc
    data*: Gpointer
    notify*: GDestroyNotify
  Vertex4* = ptr Vertex4Obj
  Vertex4Obj* = object
    x*: cfloat
    y*: cfloat
    z*: cfloat
    w*: cfloat
  Plane* = ptr PlaneObj
  PlaneObj* = object
    v0*: array[3, cfloat]
    n*: array[3, cfloat]
  PropertyTransitionPrivate* = object
  PropertyTransition* = ptr PropertyTransitionObj
  PropertyTransitionObj* = object
    parent_instance*: TransitionObj
    priv*: ptr PropertyTransitionPrivate
  PropertyTransitionClass* = object
    parent_class*: TransitionClass
    padding*: array[8, Gpointer]
  RotateActionPrivate* = object
  RotateAction* = object
    parent_instance*: GestureActionObj
    priv*: ptr RotateActionPrivate
  RotateActionClass* = object
    parent_class*: GestureActionClass
    rotate*: proc (action: ptr RotateAction; actor: Actor; angle: cdouble): Gboolean
    clutter_rotate_action1*: proc ()
    clutter_rotate_action2*: proc ()
    clutter_rotate_action3*: proc ()
    clutter_rotate_action4*: proc ()
    clutter_rotate_action5*: proc ()
    clutter_rotate_action6*: proc ()
    clutter_rotate_action7*: proc ()
  ScriptParser* = ptr ScriptParserObj
  ScriptParserObj* = object
    parent_instance*: JsonParser
    script*: Script
  StatePrivate* = ptr object
  State* = ptr StateObj
  StateObj* = object
    parent*: GObject
    priv*: StatePrivate
  GTypeGetFunc* = proc (): GType
  ObjectInfo* = ptr ObjectInfoObj
  ObjectInfoObj* = object
    id*: cstring
    class_name*: cstring
    type_func*: cstring
    properties*: ptr GList
    children*: ptr GList
    signals*: ptr GList
    gtype*: GType
    `object`*: ptr GObject
    merge_id*: cuint
    is_actor* {.bitsize: 1.}: cuint
    is_stage* {.bitsize: 1.}: cuint
    is_stage_default* {.bitsize: 1.}: cuint
    has_unresolved* {.bitsize: 1.}: cuint
    is_unmerged* {.bitsize: 1.}: cuint
  PropertyInfo* = ptr PropertyInfoObj
  PropertyInfoObj* = object
    name*: cstring
    node*: JsonNode
    pspec*: ptr GParamSpec
    is_child* {.bitsize: 1.}: cuint
    is_layout* {.bitsize: 1.}: cuint
  SignalInfo* = ptr SignalInfoObj
  SignalInfoObj* = object
    name*: cstring
    handler*: cstring
    `object`*: cstring
    state*: cstring
    target*: cstring
    flags*: GConnectFlags
    is_handler* {.bitsize: 1.}: cuint
    warp_to* {.bitsize: 1.}: cuint
  Settings* = ptr object
  ScriptPrivate* = ptr object
  Script* = ptr ScriptObj
  ScriptObj* = object
    parent_instance*: GObject
    priv*: ScriptPrivate
  ScriptClass* = object
    parent_class*: GObjectClass
    get_type_from_name*: proc (script: Script; type_name: cstring): GType
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
    clutter_reserved8*: proc ()
  ScriptConnectFunc* = proc (script: Script; `object`: ptr GObject; signal_name: cstring; handler_name: cstring; connect_object: ptr GObject; flags: GConnectFlags; user_data: Gpointer)
  Scriptable* = ptr object
  ScriptableIface* = object
    g_iface*: GTypeInterface
    set_id*: proc (scriptable: Scriptable; id: cstring)
    get_id*: proc (scriptable: Scriptable): cstring
    parse_custom_node*: proc (scriptable: Scriptable; script: Script; value: ptr GValue; name: cstring; node: JsonNode): Gboolean
    set_custom_property*: proc (scriptable: Scriptable; script: Script; name: cstring; value: ptr GValue)
  ScrollActorPrivate* = ptr object
  ScrollActor* = object
    parent_instance*: Actor
    priv*: ScrollActorPrivate
  ScrollActorClass* = object
    parent_instance*: ActorClass
    padding*: array[8, Gpointer]
  ShaderEffectPrivate* = ptr object
  ShaderEffect* = ptr ShaderEffectObj
  ShaderEffectObj* = object
    parent_instance*: OffscreenEffectObj
    priv*: ShaderEffectPrivate
  ShaderEffectClass* = object
    parent_class*: OffscreenEffectClass
    get_static_shader_source*: proc (effect: ShaderEffect): cstring
    clutter_shader1*: proc ()
    clutter_shader2*: proc ()
    clutter_shader3*: proc ()
    clutter_shader4*: proc ()
    clutter_shader5*: proc ()
  StageManager* = ptr StageManagerObj
  StageManagerObj* = object
    parent_instance*: GObject
    stages*: ptr GSList
  StageManagerClass* = object
    parent_class*: GObjectClass
    stage_added*: proc (stage_manager: StageManager; stage: Stage)
    stage_removed*: proc (stage_manager: StageManager; stage: Stage)
  StageQueueRedrawEntry* = ptr StageQueueRedrawEntryObj
  StageQueueRedrawEntryObj* = object
    actor*: Actor
    has_clip*: Gboolean
    clip*: PaintVolumeObj
  StageWindowIface* = object
    parent_iface*: GTypeInterface
    get_wrapper*: proc (stage_window: StageWindow): Actor
    set_title*: proc (stage_window: StageWindow; title: cstring)
    set_fullscreen*: proc (stage_window: StageWindow; is_fullscreen: Gboolean)
    set_cursor_visible*: proc (stage_window: StageWindow; cursor_visible: Gboolean)
    set_user_resizable*: proc (stage_window: StageWindow; is_resizable: Gboolean)
    realize*: proc (stage_window: StageWindow): Gboolean
    unrealize*: proc (stage_window: StageWindow)
    show*: proc (stage_window: StageWindow; do_raise: Gboolean)
    hide*: proc (stage_window: StageWindow)
    resize*: proc (stage_window: StageWindow; width: cint; height: cint)
    get_geometry*: proc (stage_window: StageWindow; geometry: RectangleInt)
    schedule_update*: proc (stage_window: StageWindow; sync_delay: cint)
    get_update_time*: proc (stage_window: StageWindow): int64
    clear_update_time*: proc (stage_window: StageWindow)
    add_redraw_clip*: proc (stage_window: StageWindow; stage_rectangle: RectangleInt)
    has_redraw_clips*: proc (stage_window: StageWindow): Gboolean
    ignoring_redraw_clips*: proc (stage_window: StageWindow): Gboolean
    get_redraw_clip_bounds*: proc (stage_window: StageWindow; clip: RectangleInt): Gboolean
    set_accept_focus*: proc (stage_window: StageWindow; accept_focus: Gboolean)
    redraw*: proc (stage_window: StageWindow)
    dirty_back_buffer*: proc (stage_window: StageWindow)
    get_dirty_pixel*: proc (stage_window: StageWindow; x: ptr cint; y: ptr cint)
    get_active_framebuffer*: proc (stage_window: StageWindow): CoglFramebuffer
    can_clip_redraws*: proc (stage_window: StageWindow): Gboolean
    set_scale_factor*: proc (stage_window: StageWindow; factor: cint)
    get_scale_factor*: proc (stage_window: StageWindow): cint
  StagePrivate* = ptr object
  Stage* = ptr StageObj
  StageObj* = object
    parent_instance*: Group
    priv*: StagePrivate
  StageClass* = object
    parent_class*: GroupClass
    fullscreen*: proc (stage: Stage)
    unfullscreen*: proc (stage: Stage)
    activate*: proc (stage: Stage)
    deactivate*: proc (stage: Stage)
    delete_event*: proc (stage: Stage; event: Event): Gboolean
    padding_dummy*: array[31, Gpointer]
  Perspective* = ptr PerspectiveObj
  PerspectiveObj* = object
    fovy*: cfloat
    aspect*: cfloat
    z_near*: cfloat
    z_far*: cfloat
  Fog* = ptr FogObj
  FogObj* = object
    z_near*: cfloat
    z_far*: cfloat
  SwipeActionPrivate* = ptr object
  SwipeAction* = ptr SwipeActionObj
  SwipeActionObj* = object
    parent_instance*: GestureActionObj
    priv*: SwipeActionPrivate
  SwipeActionClass* = object
    parent_class*: GestureActionClass
    swept*: proc (action: SwipeAction; actor: Actor; direction: SwipeDirection)
    swipe*: proc (action: SwipeAction; actor: Actor; direction: SwipeDirection): Gboolean
    clutter_swipe_action1*: proc ()
    clutter_swipe_action2*: proc ()
    clutter_swipe_action3*: proc ()
    clutter_swipe_action4*: proc ()
    clutter_swipe_action5*: proc ()
    clutter_swipe_action6*: proc ()
  TapAction* = ptr TapActionObj
  TapActionObj* = object
    parent_instance*: GestureActionObj
  TapActionClass* = object
    parent_class*: GestureActionClass
    tap*: proc (action: TapAction; actor: Actor): Gboolean
    clutter_tap_action1*: proc ()
    clutter_tap_action2*: proc ()
    clutter_tap_action3*: proc ()
    clutter_tap_action4*: proc ()
    clutter_tap_action5*: proc ()
    clutter_tap_action6*: proc ()
  TextBufferPrivate* = ptr object
  TextBuffer* = ptr TextBufferObj
  TextBufferObj* = object
    parent_instance*: GObject
    priv*: TextBufferPrivate
  TextBufferClass* = object
    parent_class*: GObjectClass
    inserted_text*: proc (buffer: TextBuffer; position: cuint; chars: cstring; n_chars: cuint)
    deleted_text*: proc (buffer: TextBuffer; position: cuint; n_chars: cuint)
    get_text*: proc (buffer: TextBuffer; n_bytes: ptr Gsize): cstring
    get_length*: proc (buffer: TextBuffer): cuint
    insert_text*: proc (buffer: TextBuffer; position: cuint; chars: cstring; n_chars: cuint): cuint
    delete_text*: proc (buffer: TextBuffer; position: cuint; n_chars: cuint): cuint
    clutter_reserved*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
    clutter_reserved8*: proc ()
  TextPrivate* = ptr object
  Text* = ptr TextObj
  TextObj* = object
    parent_instance*: Actor
    priv*: TextPrivate
  TextClass* = object
    parent_class*: ActorClass
    text_changed*: proc (self: Text)
    activate*: proc (self: Text)
    cursor_event*: proc (self: Text; geometry: Geometry)
    cursor_changed*: proc (self: Text)
    clutter_reserved1*: proc ()
    clutter_reserved2*: proc ()
    clutter_reserved3*: proc ()
    clutter_reserved4*: proc ()
    clutter_reserved5*: proc ()
    clutter_reserved6*: proc ()
    clutter_reserved7*: proc ()
  TexturePrivate* = ptr object
  Texture* = ptr TextureObj
  TextureObj* = object
    parent*: Actor
    priv*: TexturePrivate
  TextureClass* = object
    parent_class*: ActorClass
    size_change*: proc (texture: Texture; width: cint; height: cint)
    pixbuf_change*: proc (texture: Texture)
    load_finished*: proc (texture: Texture; error: ptr GError)
    clutter_texture1*: proc ()
    clutter_texture2*: proc ()
    clutter_texture3*: proc ()
    clutter_texture4*: proc ()
    clutter_texture5*: proc ()
  TimelineProgressFunc* = proc (timeline: Timeline; elapsed: cdouble; total: cdouble; user_data: Gpointer): cdouble
  TimelinePrivate* = ptr object
  Timeline* = ptr TimelineObj
  TimelineObj* = object
    parent_instance*: GObject
    priv*: TimelinePrivate
  TimelineClass* = object
    parent_class*: GObjectClass
    started*: proc (timeline: Timeline)
    completed*: proc (timeline: Timeline)
    paused*: proc (timeline: Timeline)
    new_frame*: proc (timeline: Timeline; msecs: cint)
    marker_reached*: proc (timeline: Timeline; marker_name: cstring; msecs: cint)
    stopped*: proc (timeline: Timeline; is_finished: Gboolean)
    clutter_timeline_1*: proc ()
    clutter_timeline_2*: proc ()
    clutter_timeline_3*: proc ()
    clutter_timeline_4*: proc ()
  TransitionGroupPrivate* = ptr object
  TransitionGroup* = ptr TransitionGroupObj
  TransitionGroupObj* = object
    parent_instance*: TransitionObj
    priv*: TransitionGroupPrivate
  TransitionPrivate* = ptr object
  Transition* = ptr TransitionObj
  TransitionObj* = object
    parent_instance*: TimelineObj
    priv*: TransitionPrivate
  TransitionClass* = object
    parent_class*: TimelineClass
    attached*: proc (transition: Transition; animatable: Animatable)
    detached*: proc (transition: Transition; animatable: Animatable)
    compute_value*: proc (transition: Transition; animatable: Animatable; interval: Interval; progress: cdouble)
    padding*: array[8, Gpointer]
  Point* = ptr PointObj
  PointObj* = object
    x*: cfloat
    y*: cfloat
  Matrix* = CoglMatrix
  Size* = object
    width*: cfloat
    height*: cfloat
  Rect* = ptr RectObj
  RectObj* = object
    origin*: PointObj
    size*: Size
  Vertex* = ptr VertexObj
  VertexObj* = object
    x*: cfloat
    y*: cfloat
    z*: cfloat
  ActorBox* = ptr ActorBoxObj
  ActorBoxObj* = object
    x1*: cfloat
    y1*: cfloat
    x2*: cfloat
    y2*: cfloat
  Geometry* = ptr GeometryObj
  GeometryObj* = object
    x*: cint
    y*: cint
    width*: cuint
    height*: cuint
  Knot* = ptr KnotObj
  KnotObj* = object
    x*: cint
    y*: cint
  PathNode* = ptr PathNodeObj
  PathNodeObj* = object
    `type`*: PathNodeType
    points*: array[3, KnotObj]
  PathConstraint* = ptr PathConstraintObj
  PathConstraintObj* = object
    parent_instance*: ConstraintObj
    path*: Path
    offset*: cfloat
    actor*: Actor
    current_node*: cuint
  Margin* = ptr MarginObj
  MarginObj* = object
    left*: cfloat
    right*: cfloat
    top*: cfloat
    bottom*: cfloat
  ProgressFunc* = proc (a: ptr GValue; b: ptr GValue; progress: cdouble; retval: ptr GValue): Gboolean
  Units* = ptr UnitsObj
  UnitsObj* = object
    unit_type*: UnitType
    value*: cfloat
    pixels*: cfloat
    pixels_set*: cuint
    serial*: cint
    padding_1*: cint
    padding_2*: int64
  ParamSpecUnits* = ptr ParamSpecUnitsObj
  ParamSpecUnitsObj* = object
    parent_instance*: GParamSpec
    default_type*: UnitType
    default_value*: cfloat
    minimum*: cfloat
    maximum*: cfloat
  ZoomActionPrivate* = ptr object
  ZoomAction* = ptr ZoomActionObj
  ZoomActionObj* = object
    parent_instance*: GestureActionObj
    priv*: ZoomActionPrivate
  ZoomActionClass* = object
    parent_class*: GestureActionClass
    zoom*: proc (action: ZoomAction; actor: Actor; focal_point: Point; factor: cdouble): Gboolean
    clutter_zoom_action1*: proc ()
    clutter_zoom_action2*: proc ()
    clutter_zoom_action3*: proc ()
    clutter_zoom_action4*: proc ()
    clutter_zoom_action5*: proc ()
  TraverseCallback* = proc (actor: Actor; depth: cint; user_data: Gpointer): ActorTraverseVisitFlags
  ForeachCallback* = proc (actor: Actor; user_data: Gpointer): Gboolean

proc getActionType*(): GType {.importc:"clutter_action_get_type", libclutter.}
proc addAction*(self: Actor; action: Action) {.importc:"clutter_actor_add_action", libclutter.}
proc addAction*(self: Actor; name: cstring; action: Action) {.importc:"clutter_actor_add_action_with_name", libclutter.}
proc removeAction*(self: Actor; action: Action) {.importc:"clutter_actor_remove_action", libclutter.}
proc removeAction*(self: Actor; name: cstring) {.importc:"clutter_actor_remove_action_by_name", libclutter.}
proc getAction*(self: Actor; name: cstring): Action {.importc:"clutter_actor_get_action", libclutter.}
proc getActions*(self: Actor): ptr GList {.importc:"clutter_actor_get_actions", libclutter.}
proc clearActions*(self: Actor) {.importc:"clutter_actor_clear_actions", libclutter.}
proc hasActions*(self: Actor): Gboolean {.importc:"clutter_actor_has_actions", libclutter.}
proc getActorMetaType*(): GType {.importc:"clutter_actor_meta_get_type", libclutter.}
proc setName*(meta: ActorMeta; name: cstring) {.importc:"clutter_actor_meta_set_name", libclutter.}
proc getName*(meta: ActorMeta): cstring {.importc:"clutter_actor_meta_get_name", libclutter.} 
proc setEnabled*(meta: ActorMeta; is_enabled: Gboolean) {.importc:"clutter_actor_meta_set_enabled", libclutter.}
proc getEnabled*(meta: ActorMeta): Gboolean {.importc:"clutter_actor_meta_get_enabled", libclutter.}
proc getActor*(meta: ActorMeta): Actor {.importc:"clutter_actor_meta_get_actor", libclutter.}
proc getActorType*(): GType {.importc:"clutter_actor_get_type", libclutter.}
proc newActor*(): Actor {.importc:"clutter_actor_new", libclutter.}
proc setFlags*(self: Actor; flags: ActorFlags) {.importc:"clutter_actor_set_flags", libclutter.}
proc unsetFlags*(self: Actor; flags: ActorFlags) {.importc:"clutter_actor_unset_flags", libclutter.}
proc getFlags*(self: Actor): ActorFlags {.importc:"clutter_actor_get_flags", libclutter.}
proc show*(self: Actor) {.importc:"clutter_actor_show", libclutter.}
proc hide*(self: Actor) {.importc:"clutter_actor_hide", libclutter.}
proc realize*(self: Actor) {.importc:"clutter_actor_realize", libclutter.}
proc unrealize*(self: Actor) {.importc:"clutter_actor_unrealize", libclutter.}
proc map*(self: Actor) {.importc:"clutter_actor_map", libclutter.}
proc unmap*(self: Actor) {.importc:"clutter_actor_unmap", libclutter.}
proc paint*(self: Actor) {.importc:"clutter_actor_paint", libclutter.}
proc continuePaint*(self: Actor) {.importc:"clutter_actor_continue_paint", libclutter.}
proc queueRedraw*(self: Actor) {.importc:"clutter_actor_queue_redraw", libclutter.}
proc queueRedrawWithClip*(self: Actor; clip: RectangleInt) {.importc:"clutter_actor_queue_redraw_with_clip", libclutter.}
proc queueRelayout*(self: Actor) {.importc:"clutter_actor_queue_relayout", libclutter.}
proc destroy*(self: Actor) {.importc:"clutter_actor_destroy", libclutter.}
proc setName*(self: Actor; name: cstring) {.importc:"clutter_actor_set_name", libclutter.}
proc getName*(self: Actor): cstring {.importc:"clutter_actor_get_name", libclutter.}
proc getAccessible*(self: Actor): atk.Object {.importc:"clutter_actor_get_accessible", libclutter.}
proc addChild*(self: Actor; child: Actor)  {.importc:"clutter_actor_add_child", libclutter.}
proc addConstraint*(self: Actor; constraint: Constraint)  {.importc:"clutter_actor_add_constraint", libclutter.}
proc addConstraint*(self: Actor; name: cstring; constraint: Constraint)  {.importc:"clutter_actor_add_constraint_with_name", libclutter.}
proc addEffect*(self: Actor; effect: Effect)  {.importc:"clutter_actor_add_effect", libclutter.}
proc addEffect*(self: Actor; name: cstring; effect: Effect)  {.importc:"clutter_actor_add_effect_with_name", libclutter.}
proc addTransition*(self: Actor; name: cstring; transition: Transition)  {.importc:"clutter_actor_add_transition", libclutter.}
proc allocate*(self: Actor; box: ActorBox; flags: AllocationFlags)  {.importc:"clutter_actor_allocate", libclutter.}
proc allocateAlignFill*(self: Actor; box: ActorBox; x_align: cdouble; y_align: cdouble; x_fill: Gboolean; y_fill: Gboolean; flags: AllocationFlags)  {.importc:"clutter_actor_allocate_align_fill", libclutter.}
proc allocateAvailableSize*(self: Actor; x: cfloat; y: cfloat; available_width: cfloat; available_height: cfloat; flags: AllocationFlags)  {.importc:"clutter_actor_allocate_available_size", libclutter.}
proc allocatePreferredSize*(self: Actor; flags: AllocationFlags)  {.importc:"clutter_actor_allocate_preferred_size", libclutter.}
proc applyRelativeTransformToPoint*(self: Actor; ancestor: Actor; point: Vertex; vertex: Vertex)  {.importc:"clutter_actor_apply_relative_transform_to_point", libclutter.}
proc applyTransformToPoint*(self: Actor; point: Vertex; vertex: Vertex)  {.importc:"clutter_actor_apply_transform_to_point", libclutter.}
proc newActorBox*(): ActorBox  {.importc:"clutter_actor_box_alloc", libclutter.}
proc clampToPixel*(box: ActorBox)  {.importc:"clutter_actor_box_clamp_to_pixel", libclutter.}
proc contains*(box: ActorBox; x: cfloat; y: cfloat): Gboolean  {.importc:"clutter_actor_box_contains", libclutter.}
proc copy*(box: ActorBox): ActorBox  {.importc:"clutter_actor_box_copy", libclutter.}
proc equal*(box_a: ActorBox; box_b: ActorBox): Gboolean  {.importc:"clutter_actor_box_equal", libclutter.}
proc free*(box: ActorBox)  {.importc:"clutter_actor_box_free", libclutter.}
proc fromVertices*(box: ActorBox; verts: Vertex)  {.importc:"clutter_actor_box_from_vertices", libclutter.}
proc getArea*(box: ActorBox): cfloat  {.importc:"clutter_actor_box_get_area", libclutter.}
proc getHeight*(box: ActorBox): cfloat  {.importc:"clutter_actor_box_get_height", libclutter.}
proc getOrigin*(box: ActorBox; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_actor_box_get_origin", libclutter.}
proc getSize*(box: ActorBox; width: ptr cfloat; height: ptr cfloat)  {.importc:"clutter_actor_box_get_size", libclutter.}
proc getActorBoxType*(): GType  {.importc:"clutter_actor_box_get_type", libclutter.}
proc getWidth*(box: ActorBox): cfloat  {.importc:"clutter_actor_box_get_width", libclutter.}
proc getX*(box: ActorBox): cfloat  {.importc:"clutter_actor_box_get_x", libclutter.}
proc getY*(box: ActorBox): cfloat  {.importc:"clutter_actor_box_get_y", libclutter.}
proc init*(box: ActorBox; x_1: cfloat; y_1: cfloat; x_2: cfloat; y_2: cfloat): ActorBox  {.importc:"clutter_actor_box_init", libclutter.}
proc initRect*(box: ActorBox; x: cfloat; y: cfloat; width: cfloat; height: cfloat)  {.importc:"clutter_actor_box_init_rect", libclutter.}
proc interpolate*(initial: ActorBox; final: ActorBox; progress: cdouble; result: ActorBox)  {.importc:"clutter_actor_box_interpolate", libclutter.}
proc newActorBox*(x_1: cfloat; y_1: cfloat; x_2: cfloat; y_2: cfloat): ActorBox  {.importc:"clutter_actor_box_new", libclutter.}
proc setOrigin*(box: ActorBox; x: cfloat; y: cfloat)  {.importc:"clutter_actor_box_set_origin", libclutter.}
proc setSize*(box: ActorBox; width: cfloat; height: cfloat)  {.importc:"clutter_actor_box_set_size", libclutter.}
proc union*(a: ActorBox; b: ActorBox; result: ActorBox)  {.importc:"clutter_actor_box_union", libclutter.}
proc clearConstraints*(self: Actor)  {.importc:"clutter_actor_clear_constraints", libclutter.}
proc clearEffects*(self: Actor)  {.importc:"clutter_actor_clear_effects", libclutter.}
proc contains*(self: Actor; descendant: Actor): Gboolean  {.importc:"clutter_actor_contains", libclutter.}
proc createPangoContext*(self: Actor): pango.Context  {.importc:"clutter_actor_create_pango_context", libclutter.}
proc createPangoLayout*(self: Actor; text: cstring): pango.Layout {.importc:"clutter_actor_create_pango_layout", libclutter.}
proc destroyAllChildren*(self: Actor)  {.importc:"clutter_actor_destroy_all_children", libclutter.}
proc event*(actor: Actor; event: Event; capture: Gboolean): Gboolean  {.importc:"clutter_actor_event", libclutter.}
proc getAbsAllocationVertices*(self: Actor; verts: Vertex)  {.importc:"clutter_actor_get_abs_allocation_vertices", libclutter.}
proc getAllocationBox*(self: Actor; box: ActorBox)  {.importc:"clutter_actor_get_allocation_box", libclutter.}
proc getAllocationVertices*(self: Actor; ancestor: Actor; verts: Vertex)  {.importc:"clutter_actor_get_allocation_vertices", libclutter.}
proc getBackgroundColor*(self: Actor; color: Color)  {.importc:"clutter_actor_get_background_color", libclutter.}
proc getChildAtIndex*(self: Actor; index: cint): Actor  {.importc:"clutter_actor_get_child_at_index", libclutter.}
proc getChildTransform*(self: Actor; transform: ptr Matrix)  {.importc:"clutter_actor_get_child_transform", libclutter.}
proc getChildren*(self: Actor): ptr GList  {.importc:"clutter_actor_get_children", libclutter.}
proc getClip*(self: Actor; xoff: ptr cfloat; yoff: ptr cfloat; width: ptr cfloat; height: ptr cfloat)  {.importc:"clutter_actor_get_clip", libclutter.}
proc getClipTo_allocation*(self: Actor): Gboolean  {.importc:"clutter_actor_get_clip_to_allocation", libclutter.}
proc getConstraint*(self: Actor; name: cstring): Constraint  {.importc:"clutter_actor_get_constraint", libclutter.}
proc getConstraints*(self: Actor): ptr GList  {.importc:"clutter_actor_get_constraints", libclutter.}
proc getContent*(self: Actor): Content  {.importc:"clutter_actor_get_content", libclutter.}
proc getContent_box*(self: Actor; box: ActorBox)  {.importc:"clutter_actor_get_content_box", libclutter.}
proc getContentGravity*(self: Actor): ContentGravity  {.importc:"clutter_actor_get_content_gravity", libclutter.}
proc getContentRepeat*(self: Actor): ContentRepeat  {.importc:"clutter_actor_get_content_repeat", libclutter.}
proc getContentScalingFilters*(self: Actor; min_filter: ptr ScalingFilter; mag_filter: ptr ScalingFilter)  {.importc:"clutter_actor_get_content_scaling_filters", libclutter.}
proc getDefaultPaintVolume*(self: Actor): PaintVolume  {.importc:"clutter_actor_get_default_paint_volume", libclutter.}
proc getEasingDelay*(self: Actor): cuint  {.importc:"clutter_actor_get_easing_delay", libclutter.}
proc getEasingDuration*(self: Actor): cuint  {.importc:"clutter_actor_get_easing_duration", libclutter.}
proc getEasingMode*(self: Actor): AnimationMode  {.importc:"clutter_actor_get_easing_mode", libclutter.}
proc getEffect*(self: Actor; name: cstring): Effect  {.importc:"clutter_actor_get_effect", libclutter.}
proc getEffects*(self: Actor): ptr GList  {.importc:"clutter_actor_get_effects", libclutter.}
proc getFirstChild*(self: Actor): Actor  {.importc:"clutter_actor_get_first_child", libclutter.}
proc getFixedPositionSet*(self: Actor): Gboolean  {.importc:"clutter_actor_get_fixed_position_set", libclutter.}
proc getHeight*(self: Actor): cfloat  {.importc:"clutter_actor_get_height", libclutter.}
proc getLastChild*(self: Actor): Actor  {.importc:"clutter_actor_get_last_child", libclutter.}
proc getLayoutManager*(self: Actor): LayoutManager  {.importc:"clutter_actor_get_layout_manager", libclutter.}
proc getMargin*(self: Actor; margin: Margin)  {.importc:"clutter_actor_get_margin", libclutter.}
proc getMarginBottom*(self: Actor): cfloat  {.importc:"clutter_actor_get_margin_bottom", libclutter.}
proc getMarginLeft*(self: Actor): cfloat  {.importc:"clutter_actor_get_margin_left", libclutter.}
proc getMarginRight*(self: Actor): cfloat  {.importc:"clutter_actor_get_margin_right", libclutter.}
proc getMarginTop*(self: Actor): cfloat  {.importc:"clutter_actor_get_margin_top", libclutter.}
proc getNChildren*(self: Actor): cint  {.importc:"clutter_actor_get_n_children", libclutter.}
proc getNextSibling*(self: Actor): Actor  {.importc:"clutter_actor_get_next_sibling", libclutter.}
proc getOffscreenRedirect*(self: Actor): OffscreenRedirect  {.importc:"clutter_actor_get_offscreen_redirect", libclutter.}
proc getOpacity*(self: Actor): cuchar  {.importc:"clutter_actor_get_opacity", libclutter.}
proc getPaintBox*(self: Actor; box: ActorBox): Gboolean  {.importc:"clutter_actor_get_paint_box", libclutter.}
proc getPaintOpacity*(self: Actor): cuchar  {.importc:"clutter_actor_get_paint_opacity", libclutter.}
proc getPaintVisibility*(self: Actor): Gboolean  {.importc:"clutter_actor_get_paint_visibility", libclutter.}
proc getPaintVolume*(self: Actor): PaintVolume  {.importc:"clutter_actor_get_paint_volume", libclutter.}
proc getPangoContext*(self: Actor): pango.Context  {.importc:"clutter_actor_get_pango_context", libclutter.}
proc getParent*(self: Actor): Actor  {.importc:"clutter_actor_get_parent", libclutter.}
proc getPivotPoint*(self: Actor; pivot_x: ptr cfloat; pivot_y: ptr cfloat)  {.importc:"clutter_actor_get_pivot_point", libclutter.}
proc getPivotPointZ*(self: Actor): cfloat  {.importc:"clutter_actor_get_pivot_point_z", libclutter.}
proc getPosition*(self: Actor; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_actor_get_position", libclutter.}
proc getPreferredHeight*(self: Actor; for_width: cfloat; min_height_p: ptr cfloat; natural_height_p: ptr cfloat)  {.importc:"clutter_actor_get_preferred_height", libclutter.}
proc getPreferredSize*(self: Actor; min_width_p: ptr cfloat; min_height_p: ptr cfloat; natural_width_p: ptr cfloat; natural_height_p: ptr cfloat)  {.importc:"clutter_actor_get_preferred_size", libclutter.}
proc getPreferredWidth*(self: Actor; for_height: cfloat; min_width_p: ptr cfloat; natural_width_p: ptr cfloat)  {.importc:"clutter_actor_get_preferred_width", libclutter.}
proc getPreviousSibling*(self: Actor): Actor  {.importc:"clutter_actor_get_previous_sibling", libclutter.}
proc getReactive*(actor: Actor): Gboolean  {.importc:"clutter_actor_get_reactive", libclutter.}
proc getRequestMode*(self: Actor): RequestMode  {.importc:"clutter_actor_get_request_mode", libclutter.}
proc getRotationAngle*(self: Actor; axis: RotateAxis): cdouble  {.importc:"clutter_actor_get_rotation_angle", libclutter.}
proc getScale*(self: Actor; scale_x: ptr cdouble; scale_y: ptr cdouble)  {.importc:"clutter_actor_get_scale", libclutter.}
proc getScaleZ*(self: Actor): cdouble  {.importc:"clutter_actor_get_scale_z", libclutter.}
proc getSize*(self: Actor; width: ptr cfloat; height: ptr cfloat)  {.importc:"clutter_actor_get_size", libclutter.}
proc getStage*(actor: Actor): Actor  {.importc:"clutter_actor_get_stage", libclutter.}
proc getTextDirection*(self: Actor): TextDirection  {.importc:"clutter_actor_get_text_direction", libclutter.}
proc getTransform*(self: Actor; transform: ptr Matrix)  {.importc:"clutter_actor_get_transform", libclutter.}
proc getTransformedPaintVolume*(self: Actor; relative_to_ancestor: Actor): PaintVolume  {.importc:"clutter_actor_get_transformed_paint_volume", libclutter.}
proc getTransformedPosition*(self: Actor; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_actor_get_transformed_position", libclutter.}
proc getTransformedSize*(self: Actor; width: ptr cfloat; height: ptr cfloat)  {.importc:"clutter_actor_get_transformed_size", libclutter.}
proc getTransition*(self: Actor; name: cstring): Transition  {.importc:"clutter_actor_get_transition", libclutter.}
proc getTranslation*(self: Actor; translate_x: ptr cfloat; translate_y: ptr cfloat; translate_z: ptr cfloat)  {.importc:"clutter_actor_get_translation", libclutter.}
proc getWidth*(self: Actor): cfloat  {.importc:"clutter_actor_get_width", libclutter.}
proc getX*(self: Actor): cfloat  {.importc:"clutter_actor_get_x", libclutter.}
proc getXAlign*(self: Actor): ActorAlign  {.importc:"clutter_actor_get_x_align", libclutter.}
proc getXExpand*(self: Actor): Gboolean  {.importc:"clutter_actor_get_x_expand", libclutter.}
proc getY*(self: Actor): cfloat   {.importc:"clutter_actor_get_y", libclutter.}
proc getYAlign*(self: Actor): ActorAlign  {.importc:"clutter_actor_get_y_align", libclutter.}
proc getYExpand*(self: Actor): Gboolean  {.importc:"clutter_actor_get_y_expand", libclutter.}
proc getZPosition*(self: Actor): cfloat  {.importc:"clutter_actor_get_z_position", libclutter.}
proc grabKeyFocus*(self: Actor)  {.importc:"clutter_actor_grab_key_focus", libclutter.}
proc hasAllocation*(self: Actor): Gboolean  {.importc:"clutter_actor_has_allocation", libclutter.}
proc hasClip*(self: Actor): Gboolean  {.importc:"clutter_actor_has_clip", libclutter.}
proc hasConstraints*(self: Actor): Gboolean  {.importc:"clutter_actor_has_constraints", libclutter.}
proc hasEffects*(self: Actor): Gboolean  {.importc:"clutter_actor_has_effects", libclutter.}
proc hasKeyFocus*(self: Actor): Gboolean  {.importc:"clutter_actor_has_key_focus", libclutter.}
proc hasOverlaps*(self: Actor): Gboolean  {.importc:"clutter_actor_has_overlaps", libclutter.}
proc hasPointer*(self: Actor): Gboolean  {.importc:"clutter_actor_has_pointer", libclutter.}
proc insertChildAbove*(self: Actor; child: Actor; sibling: Actor)  {.importc:"clutter_actor_insert_child_above", libclutter.}
proc insertChildAtIndex*(self: Actor; child: Actor; index: cint)  {.importc:"clutter_actor_insert_child_at_index", libclutter.}
proc insertChildBelow*(self: Actor; child: Actor; sibling: Actor)  {.importc:"clutter_actor_insert_child_below", libclutter.}
proc isInClonePaint*(self: Actor): Gboolean  {.importc:"clutter_actor_is_in_clone_paint", libclutter.}
proc isRotated*(self: Actor): Gboolean  {.importc:"clutter_actor_is_rotated", libclutter.}
proc isScaled*(self: Actor): Gboolean  {.importc:"clutter_actor_is_scaled", libclutter.}
proc destroy*(iter: ActorIter)  {.importc:"clutter_actor_iter_destroy", libclutter.}
proc init*(iter: ActorIter; root: Actor)  {.importc:"clutter_actor_iter_init", libclutter.}
proc isValid*(iter: ActorIter): Gboolean  {.importc:"clutter_actor_iter_is_valid", libclutter.}
proc next*(iter: ActorIter; child: ptr Actor): Gboolean  {.importc:"clutter_actor_iter_next", libclutter.}
proc prev*(iter: ActorIter; child: ptr Actor): Gboolean  {.importc:"clutter_actor_iter_prev", libclutter.}
proc remove*(iter: ActorIter)  {.importc:"clutter_actor_iter_remove", libclutter.}
proc moveBy*(self: Actor; dx: cfloat; dy: cfloat)  {.importc:"clutter_actor_move_by", libclutter.}
proc needsExpand*(self: Actor; orientation: Orientation): Gboolean  {.importc:"clutter_actor_needs_expand", libclutter.}
proc removeAllChildren*(self: Actor)  {.importc:"clutter_actor_remove_all_children", libclutter.}
proc removeAllTransitions*(self: Actor)  {.importc:"clutter_actor_remove_all_transitions", libclutter.}
proc removeChild*(self: Actor; child: Actor)  {.importc:"clutter_actor_remove_child", libclutter.}
proc removeClip*(self: Actor)  {.importc:"clutter_actor_remove_clip", libclutter.}
proc removeConstraint*(self: Actor; constraint: Constraint)  {.importc:"clutter_actor_remove_constraint", libclutter.}
proc removeConstraint*(self: Actor; name: cstring)  {.importc:"clutter_actor_remove_constraint_by_name", libclutter.}
proc removeEffect*(self: Actor; effect: Effect)  {.importc:"clutter_actor_remove_effect", libclutter.}
proc removeEffect*(self: Actor; name: cstring)  {.importc:"clutter_actor_remove_effect_by_name", libclutter.}
proc removeTransition*(self: Actor; name: cstring)  {.importc:"clutter_actor_remove_transition", libclutter.}
proc replaceChild*(self: Actor; old_child: Actor; new_child: Actor)  {.importc:"clutter_actor_replace_child", libclutter.}
proc restoreEasingState*(self: Actor)  {.importc:"clutter_actor_restore_easing_state", libclutter.}
proc saveEasingState*(self: Actor)  {.importc:"clutter_actor_save_easing_state", libclutter.}
proc setAllocation*(self: Actor; box: ActorBox; flags: AllocationFlags)  {.importc:"clutter_actor_set_allocation", libclutter.}
proc setBackgroundColor*(self: Actor; color: Color)  {.importc:"clutter_actor_set_background_color", libclutter.}
proc setChildAboveSibling*(self: Actor; child: Actor; sibling: Actor)  {.importc:"clutter_actor_set_child_above_sibling", libclutter.}
proc setChildAtIndex*(self: Actor; child: Actor; index: cint)  {.importc:"clutter_actor_set_child_at_index", libclutter.}
proc setChildBelowSibling*(self: Actor; child: Actor; sibling: Actor)  {.importc:"clutter_actor_set_child_below_sibling", libclutter.}
proc setChildTransform*(self: Actor; transform: ptr Matrix)  {.importc:"clutter_actor_set_child_transform", libclutter.}
proc setClip*(self: Actor; xoff: cfloat; yoff: cfloat; width: cfloat; height: cfloat)  {.importc:"clutter_actor_set_clip", libclutter.}
proc setClipToAllocation*(self: Actor; clip_set: Gboolean)  {.importc:"clutter_actor_set_clip_to_allocation", libclutter.}
proc setContent*(self: Actor; content: Content)  {.importc:"clutter_actor_set_content", libclutter.}
proc setContentGravity*(self: Actor; gravity: ContentGravity)  {.importc:"clutter_actor_set_content_gravity", libclutter.}
proc setContentRepeat*(self: Actor; repeat: ContentRepeat)  {.importc:"clutter_actor_set_content_repeat", libclutter.}
proc setContentScalingFilters*(self: Actor; min_filter: ScalingFilter; mag_filter: ScalingFilter)  {.importc:"clutter_actor_set_content_scaling_filters", libclutter.}
proc setEasingDelay*(self: Actor; msecs: cuint)  {.importc:"clutter_actor_set_easing_delay", libclutter.}
proc setEasingDuration*(self: Actor; msecs: cuint)  {.importc:"clutter_actor_set_easing_duration", libclutter.}
proc setEasingMode*(self: Actor; mode: AnimationMode)  {.importc:"clutter_actor_set_easing_mode", libclutter.}
proc setFixedPositionSet*(self: Actor; is_set: Gboolean)  {.importc:"clutter_actor_set_fixed_position_set", libclutter.}
proc setHeight*(self: Actor; height: cfloat)  {.importc:"clutter_actor_set_height", libclutter.}
proc setLayoutManager*(self: Actor; manager: LayoutManager)  {.importc:"clutter_actor_set_layout_manager", libclutter.}
proc setMargin*(self: Actor; margin: Margin)  {.importc:"clutter_actor_set_margin", libclutter.}
proc setMarginBottom*(self: Actor; margin: cfloat)  {.importc:"clutter_actor_set_margin_bottom", libclutter.}
proc setMarginLeft*(self: Actor; margin: cfloat)  {.importc:"clutter_actor_set_margin_left", libclutter.}
proc setMarginRight*(self: Actor; margin: cfloat)  {.importc:"clutter_actor_set_margin_right", libclutter.}
proc setMarginTop*(self: Actor; margin: cfloat)  {.importc:"clutter_actor_set_margin_top", libclutter.}
proc setOffscreenRedirect*(self: Actor; redirect: OffscreenRedirect)  {.importc:"clutter_actor_set_offscreen_redirect", libclutter.}
proc setOpacity*(self: Actor; opacity: cuchar)  {.importc:"clutter_actor_set_opacity", libclutter.}
proc setPivotPoint*(self: Actor; pivot_x: cfloat; pivot_y: cfloat)  {.importc:"clutter_actor_set_pivot_point", libclutter.}
proc setPivotPointZ*(self: Actor; pivot_z: cfloat)  {.importc:"clutter_actor_set_pivot_point_z", libclutter.}
proc setPosition*(self: Actor; x: cfloat; y: cfloat)  {.importc:"clutter_actor_set_position", libclutter.}
proc setReactive*(actor: Actor; reactive: Gboolean)  {.importc:"clutter_actor_set_reactive", libclutter.}
proc setRequestMode*(self: Actor; mode: RequestMode)  {.importc:"clutter_actor_set_request_mode", libclutter.}
proc setRotationAngle*(self: Actor; axis: RotateAxis; angle: cdouble)  {.importc:"clutter_actor_set_rotation_angle", libclutter.}
proc setScale*(self: Actor; scale_x: cdouble; scale_y: cdouble)  {.importc:"clutter_actor_set_scale", libclutter.}
proc setScaleZ*(self: Actor; scale_z: cdouble)  {.importc:"clutter_actor_set_scale_z", libclutter.}
proc setSize*(self: Actor; width: cfloat; height: cfloat)  {.importc:"clutter_actor_set_size", libclutter.}
proc setTextDirection*(self: Actor; text_dir: TextDirection)  {.importc:"clutter_actor_set_text_direction", libclutter.}
proc setTransform*(self: Actor; transform: ptr Matrix)  {.importc:"clutter_actor_set_transform", libclutter.}
proc setTranslation*(self: Actor; translate_x: cfloat; translate_y: cfloat; translate_z: cfloat)  {.importc:"clutter_actor_set_translation", libclutter.}
proc setWidth*(self: Actor; width: cfloat)  {.importc:"clutter_actor_set_width", libclutter.}
proc setX*(self: Actor; x: cfloat)  {.importc:"clutter_actor_set_x", libclutter.}
proc setXAlign*(self: Actor; x_align: ActorAlign)  {.importc:"clutter_actor_set_x_align", libclutter.}
proc setXExpand*(self: Actor; expand: Gboolean)  {.importc:"clutter_actor_set_x_expand", libclutter.}
proc setY*(self: Actor; y: cfloat)  {.importc:"clutter_actor_set_y", libclutter.}
proc setYAlign*(self: Actor; y_align: ActorAlign)  {.importc:"clutter_actor_set_y_align", libclutter.}
proc setYExpand*(self: Actor; expand: Gboolean)  {.importc:"clutter_actor_set_y_expand", libclutter.}
proc setZPosition*(self: Actor; z_position: cfloat)  {.importc:"clutter_actor_set_z_position", libclutter.}
proc shouldPickPaint*(self: Actor): Gboolean  {.importc:"clutter_actor_should_pick_paint", libclutter.}
proc transformStagePoint*(self: Actor; x: cfloat; y: cfloat; x_out: ptr cfloat; y_out: ptr cfloat): Gboolean  {.importc:"clutter_actor_transform_stage_point", libclutter.}
proc getAlignAxis*(align: AlignConstraint): AlignAxis  {.importc:"clutter_align_constraint_get_align_axis", libclutter.}
proc getFactor*(align: AlignConstraint): cfloat  {.importc:"clutter_align_constraint_get_factor", libclutter.}
proc getSource*(align: AlignConstraint): Actor  {.importc:"clutter_align_constraint_get_source", libclutter.}
proc getAlignConstraintType*(): GType  {.importc:"clutter_align_constraint_get_type", libclutter.}
proc newAlignConstraint*(source: Actor; axis: AlignAxis; factor: cfloat): Constraint  {.importc:"clutter_align_constraint_new", libclutter.}
proc setAlignAxis*(align: AlignConstraint; axis: AlignAxis)  {.importc:"clutter_align_constraint_set_align_axis", libclutter.}
proc setFactor*(align: AlignConstraint; factor: cfloat)  {.importc:"clutter_align_constraint_set_factor", libclutter.}
proc setSource*(align: AlignConstraint; source: Actor)  {.importc:"clutter_align_constraint_set_source", libclutter.}
proc findProperty*(animatable: Animatable; property_name: cstring): ptr GParamSpec  {.importc:"clutter_animatable_find_property", libclutter.}
proc getInitialState*(animatable: Animatable; property_name: cstring; value: ptr GValue)  {.importc:"clutter_animatable_get_initial_state", libclutter.}
proc getAnimatableType*(): GType  {.importc:"clutter_animatable_get_type", libclutter.}
proc interpolateValue*(animatable: Animatable; property_name: cstring; interval: Interval; progress: cdouble; value: ptr GValue): Gboolean  {.importc:"clutter_animatable_interpolate_value", libclutter.}
proc setFinalState*(animatable: Animatable; property_name: cstring; value: ptr GValue)  {.importc:"clutter_animatable_set_final_state", libclutter.}
proc getFontOptions*(backend: Backend): FontOptions  {.importc:"clutter_backend_get_font_options", libclutter.}
proc getResolution*(backend: Backend): cdouble  {.importc:"clutter_backend_get_resolution", libclutter.}
proc getBackendType*(): GType  {.importc:"clutter_backend_get_type", libclutter.}
proc setFontOptions*(backend: Backend; options: FontOptions)  {.importc:"clutter_backend_set_font_options", libclutter.}
proc initBase*()  {.importc:"clutter_base_init", libclutter.}
proc getBinLayoutType*(): GType  {.importc:"clutter_bin_layout_get_type", libclutter.}
proc newBinLayout*(x_align: BinAlignment; y_align: BinAlignment): LayoutManager  {.importc:"clutter_bin_layout_new", libclutter.}
proc getCoordinate*(constraint: BindConstraint): BindCoordinate  {.importc:"clutter_bind_constraint_get_coordinate", libclutter.}
proc getOffset*(constraint: BindConstraint): cfloat  {.importc:"clutter_bind_constraint_get_offset", libclutter.}
proc getSource*(constraint: BindConstraint): Actor  {.importc:"clutter_bind_constraint_get_source", libclutter.}
proc getBindConstraintType*(): GType  {.importc:"clutter_bind_constraint_get_type", libclutter.}
proc newBindConstraint*(source: Actor; coordinate: BindCoordinate; offset: cfloat): Constraint  {.importc:"clutter_bind_constraint_new", libclutter.}
proc setCoordinate*(constraint: BindConstraint; coordinate: BindCoordinate)  {.importc:"clutter_bind_constraint_set_coordinate", libclutter.}
proc setOffset*(constraint: BindConstraint; offset: cfloat)  {.importc:"clutter_bind_constraint_set_offset", libclutter.}
proc setSource*(constraint: BindConstraint; source: Actor)  {.importc:"clutter_bind_constraint_set_source", libclutter.}
proc activate*(pool: BindingPool; key_val: cuint; modifiers: ModifierType; gobject: ptr GObject): Gboolean  {.importc:"clutter_binding_pool_activate", libclutter.}
proc blockAction*(pool: BindingPool; action_name: cstring)  {.importc:"clutter_binding_pool_block_action", libclutter.}
proc find*(name: cstring): BindingPool  {.importc:"clutter_binding_pool_find", libclutter.}
proc findAction*(pool: BindingPool; key_val: cuint; modifiers: ModifierType): cstring  {.importc:"clutter_binding_pool_find_action", libclutter.}
proc getForClass*(klass: Gpointer): BindingPool  {.importc:"clutter_binding_pool_get_for_class", libclutter.}
proc getBindingBoolType*(): GType  {.importc:"clutter_binding_pool_get_type", libclutter.}
proc installAction*(pool: BindingPool; action_name: cstring; key_val: cuint; modifiers: ModifierType; callback: GCallback; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_binding_pool_install_action", libclutter.}
proc installClosure*(pool: BindingPool; action_name: cstring; key_val: cuint; modifiers: ModifierType; closure: ptr GClosure)  {.importc:"clutter_binding_pool_install_closure", libclutter.}
proc newBindingPool*(name: cstring): BindingPool  {.importc:"clutter_binding_pool_new", libclutter.}
proc overrideAction*(pool: BindingPool; key_val: cuint; modifiers: ModifierType; callback: GCallback; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_binding_pool_override_action", libclutter.}
proc overrideClosure*(pool: BindingPool; key_val: cuint; modifiers: ModifierType; closure: ptr GClosure)  {.importc:"clutter_binding_pool_override_closure", libclutter.}
proc removeAction*(pool: BindingPool; key_val: cuint; modifiers: ModifierType)  {.importc:"clutter_binding_pool_remove_action", libclutter.}
proc unblockAction*(pool: BindingPool; action_name: cstring)  {.importc:"clutter_binding_pool_unblock_action", libclutter.}
proc getBlurEffectType*(): GType  {.importc:"clutter_blur_effect_get_type", libclutter.}
proc newBlurEffect*(): Effect  {.importc:"clutter_blur_effect_new", libclutter.}
proc continueAccumulator*(ihint: ptr GSignalInvocationHint; return_accu: ptr GValue; handler_return: ptr GValue; dummy: Gpointer): Gboolean  {.importc:"clutter_boolean_continue_accumulator", libclutter.}
proc handledAccumulator*(ihint: ptr GSignalInvocationHint; return_accu: ptr GValue; handler_return: ptr GValue; dummy: Gpointer): Gboolean  {.importc:"clutter_boolean_handled_accumulator", libclutter.}
proc getAlignment*(layout: BoxLayout; actor: Actor; x_align: ptr BoxAlignment; y_align: ptr BoxAlignment)  {.importc:"clutter_box_layout_get_alignment", libclutter.}
proc getEasingDuration*(layout: BoxLayout): cuint  {.importc:"clutter_box_layout_get_easing_duration", libclutter.}
proc getEasingMode*(layout: BoxLayout): Gulong  {.importc:"clutter_box_layout_get_easing_mode", libclutter.}
proc getExpand*(layout: BoxLayout; actor: Actor): Gboolean  {.importc:"clutter_box_layout_get_expand", libclutter.}
proc getFill*(layout: BoxLayout; actor: Actor; x_fill: ptr Gboolean; y_fill: ptr Gboolean)  {.importc:"clutter_box_layout_get_fill", libclutter.}
proc getHomogeneous*(layout: BoxLayout): Gboolean  {.importc:"clutter_box_layout_get_homogeneous", libclutter.}
proc getOrientation*(layout: BoxLayout): Orientation  {.importc:"clutter_box_layout_get_orientation", libclutter.}
proc getPackStart*(layout: BoxLayout): Gboolean  {.importc:"clutter_box_layout_get_pack_start", libclutter.}
proc getSpacing*(layout: BoxLayout): cuint  {.importc:"clutter_box_layout_get_spacing", libclutter.}
proc getBoxLayoutType*(): GType  {.importc:"clutter_box_layout_get_type", libclutter.}
proc getUseAnimations*(layout: BoxLayout): Gboolean  {.importc:"clutter_box_layout_get_use_animations", libclutter.}
proc getVertical*(layout: BoxLayout): Gboolean  {.importc:"clutter_box_layout_get_vertical", libclutter.}
proc newBoxLayout*(): LayoutManager  {.importc:"clutter_box_layout_new", libclutter.}
proc pack*(layout: BoxLayout; actor: Actor; expand: Gboolean; x_fill: Gboolean; y_fill: Gboolean; x_align: BoxAlignment; y_align: BoxAlignment)  {.importc:"clutter_box_layout_pack", libclutter.}
proc setAlignment*(layout: BoxLayout; actor: Actor; x_align: BoxAlignment; y_align: BoxAlignment)  {.importc:"clutter_box_layout_set_alignment", libclutter.}
proc setEasingDuration*(layout: BoxLayout; msecs: cuint)  {.importc:"clutter_box_layout_set_easing_duration", libclutter.}
proc setEasingMode*(layout: BoxLayout; mode: Gulong)  {.importc:"clutter_box_layout_set_easing_mode", libclutter.}
proc setExpand*(layout: BoxLayout; actor: Actor; expand: Gboolean)  {.importc:"clutter_box_layout_set_expand", libclutter.}
proc setFill*(layout: BoxLayout; actor: Actor; x_fill: Gboolean; y_fill: Gboolean)  {.importc:"clutter_box_layout_set_fill", libclutter.}
proc setHomogeneous*(layout: BoxLayout; homogeneous: Gboolean)  {.importc:"clutter_box_layout_set_homogeneous", libclutter.}
proc setOrientation*(layout: BoxLayout; orientation: Orientation)  {.importc:"clutter_box_layout_set_orientation", libclutter.}
proc setPackStart*(layout: BoxLayout; pack_start: Gboolean)  {.importc:"clutter_box_layout_set_pack_start", libclutter.}
proc setSpacing*(layout: BoxLayout; spacing: cuint)  {.importc:"clutter_box_layout_set_spacing", libclutter.}
proc setUseAnimations*(layout: BoxLayout; animate: Gboolean)  {.importc:"clutter_box_layout_set_use_animations", libclutter.}
proc setVertical*(layout: BoxLayout; vertical: Gboolean)  {.importc:"clutter_box_layout_set_vertical", libclutter.}
proc getBrightness*(effect: BrightnessContrastEffect; red: ptr cfloat; green: ptr cfloat; blue: ptr cfloat)  {.importc:"clutter_brightness_contrast_effect_get_brightness", libclutter.}
proc getContrast*(effect: BrightnessContrastEffect; red: ptr cfloat; green: ptr cfloat; blue: ptr cfloat)  {.importc:"clutter_brightness_contrast_effect_get_contrast", libclutter.}
proc getBrightnessContrastEffectType*(): GType  {.importc:"clutter_brightness_contrast_effect_get_type", libclutter.}
proc newBrightnessContrastEffect*(): Effect  {.importc:"clutter_brightness_contrast_effect_new", libclutter.}
proc setBrightness*(effect: BrightnessContrastEffect; brightness: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_brightness", libclutter.}
proc setBrightness*(effect: BrightnessContrastEffect; red: cfloat; green: cfloat; blue: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_brightness_full", libclutter.}
proc setContrast*(effect: BrightnessContrastEffect; contrast: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_contrast", libclutter.}
proc setContrast*(effect: BrightnessContrastEffect; red: cfloat; green: cfloat; blue: cfloat)  {.importc:"clutter_brightness_contrast_effect_set_contrast_full", libclutter.}
proc clear*(cr: cairo.Context)  {.importc:"clutter_cairo_clear", libclutter.}
proc setSourceColor*(cr: cairo.Context; color: Color)  {.importc:"clutter_cairo_set_source_color", libclutter.}
proc getScaleFactor*(canvas: Canvas): cint  {.importc:"clutter_canvas_get_scale_factor", libclutter.}
proc getCanvasType*(): GType  {.importc:"clutter_canvas_get_type", libclutter.}
proc newCanvas*(): Content  {.importc:"clutter_canvas_new", libclutter.}
proc setScaleFactor*(canvas: Canvas; scale: cint)  {.importc:"clutter_canvas_set_scale_factor", libclutter.}
proc setSize*(canvas: Canvas; width: cint; height: cint): Gboolean  {.importc:"clutter_canvas_set_size", libclutter.}
proc checkVersion*(major: cuint; minor: cuint; micro: cuint): Gboolean  {.importc:"clutter_check_version", libclutter.}
proc checkWindowingBackend*(backend_type: cstring): Gboolean  {.importc:"clutter_check_windowing_backend", libclutter.}
proc getActor*(data: ChildMeta): Actor  {.importc:"clutter_child_meta_get_actor", libclutter.}
proc getContainer*(data: ChildMeta): Container  {.importc:"clutter_child_meta_get_container", libclutter.}
proc getChildMetaType*(): GType  {.importc:"clutter_child_meta_get_type", libclutter.}
proc getButton*(action: ClickAction): cuint  {.importc:"clutter_click_action_get_button", libclutter.}
proc getCoords*(action: ClickAction; press_x: ptr cfloat; press_y: ptr cfloat)  {.importc:"clutter_click_action_get_coords", libclutter.}
proc getState*(action: ClickAction): ModifierType  {.importc:"clutter_click_action_get_state", libclutter.}
proc getClickActionType*(): GType  {.importc:"clutter_click_action_get_type", libclutter.}
proc newClickAction*(): Action  {.importc:"clutter_click_action_new", libclutter.}
proc release*(action: ClickAction)  {.importc:"clutter_click_action_release", libclutter.}
proc getClipNodeType*(): GType  {.importc:"clutter_clip_node_get_type", libclutter.}
proc newClipNode*(): PaintNode  {.importc:"clutter_clip_node_new", libclutter.}
proc getSource*(self: Clone): Actor  {.importc:"clutter_clone_get_source", libclutter.}
proc getCloneType*(): GType  {.importc:"clutter_clone_get_type", libclutter.}
proc newClone*(source: Actor): Actor  {.importc:"clutter_clone_new", libclutter.}
proc setSource*(self: Clone; source: Actor)  {.importc:"clutter_clone_set_source", libclutter.}
proc add*(a: Color; b: Color; result: Color)  {.importc:"clutter_color_add", libclutter.}
proc alloc*(): Color  {.importc:"clutter_color_alloc", libclutter.}
proc copy*(color: Color): Color  {.importc:"clutter_color_copy", libclutter.}
proc darken*(color: Color; result: Color)  {.importc:"clutter_color_darken", libclutter.}
proc equal*(v1: Gconstpointer; v2: Gconstpointer): Gboolean  {.importc:"clutter_color_equal", libclutter.}
proc free*(color: Color)  {.importc:"clutter_color_free", libclutter.}
proc fromHls*(color: Color; hue: cfloat; luminance: cfloat; saturation: cfloat)  {.importc:"clutter_color_from_hls", libclutter.}
proc fromPixel*(color: Color; pixel: cuint)  {.importc:"clutter_color_from_pixel", libclutter.}
proc fromString*(color: Color; str: cstring): Gboolean  {.importc:"clutter_color_from_string", libclutter.}
proc getStatic*(color: StaticColor): Color  {.importc:"clutter_color_get_static", libclutter.}
proc getColorType*(): GType  {.importc:"clutter_color_get_type", libclutter.}
proc hash*(v: Gconstpointer): cuint  {.importc:"clutter_color_hash", libclutter.}
proc init*(color: Color; red: cuchar; green: cuchar; blue: cuchar; alpha: cuchar): Color  {.importc:"clutter_color_init", libclutter.}
proc interpolate*(initial: Color; final: Color; progress: cdouble; result: Color)  {.importc:"clutter_color_interpolate", libclutter.}
proc lighten*(color: Color; result: Color)  {.importc:"clutter_color_lighten", libclutter.}
proc newColor*(red: cuchar; green: cuchar; blue: cuchar; alpha: cuchar): Color  {.importc:"clutter_color_new", libclutter.}
proc getNodeType*(): GType  {.importc:"clutter_color_node_get_type", libclutter.}
proc nodeew*(color: Color): PaintNode  {.importc:"clutter_color_nodeew", libclutter.}
proc shade*(color: Color; factor: cdouble; result: Color)  {.importc:"clutter_color_shade", libclutter.}
proc subtract*(a: Color; b: Color; result: Color)  {.importc:"clutter_color_subtract", libclutter.}
proc toHls*(color: Color; hue: ptr cfloat; luminance: ptr cfloat; saturation: ptr cfloat)  {.importc:"clutter_color_to_hls", libclutter.}
proc toPixel*(color: Color): cuint  {.importc:"clutter_color_to_pixel", libclutter.}
proc toString*(color: Color): cstring  {.importc:"clutter_color_to_string", libclutter.}
proc getTint*(effect: ColorizeEffect; tint: Color)  {.importc:"clutter_colorize_effect_get_tint", libclutter.}
proc getColorizeEffectType*(): GType  {.importc:"clutter_colorize_effect_get_type", libclutter.}
proc newColorizeEffect*(tint: Color): Effect  {.importc:"clutter_colorize_effect_new", libclutter.}
proc setTint*(effect: ColorizeEffect; tint: Color)  {.importc:"clutter_colorize_effect_set_tint", libclutter.}
proc getConstraintType*(): GType  {.importc:"clutter_constraint_get_type", libclutter.}
proc updateAllocation*(constraint: Constraint; actor: Actor; allocation: ActorBox): Gboolean  {.importc:"clutter_constraint_update_allocation", libclutter.}
proc updatePreferredSize*(constraint: Constraint; actor: Actor; direction: Orientation; for_size: cfloat; minimum_size: ptr cfloat; natural_size: ptr cfloat)  {.importc:"clutter_constraint_update_preferred_size", libclutter.}
proc childGet*(container: Container; actor: Actor; first_prop: cstring)  {.varargs, importc:"clutter_container_child_get", libclutter.}
proc childGetProperty*(container: Container; child: Actor; property: cstring; value: ptr GValue)  {.importc:"clutter_container_child_get_property", libclutter.}
proc childNotify*(container: Container; child: Actor; pspec: ptr GParamSpec)  {.importc:"clutter_container_child_notify", libclutter.}
proc childSet*(container: Container; actor: Actor; first_prop: cstring)  {.varargs, importc:"clutter_container_child_set", libclutter.}
proc childSetProperty*(container: Container; child: Actor; property: cstring; value: ptr GValue)  {.importc:"clutter_container_child_set_property", libclutter.}
proc findChildProperty*(klass: ptr GObjectClass; property_name: cstring): ptr GParamSpec  {.importc:"clutter_container_class_find_child_property", libclutter.}
proc listChildProperties*(klass: ptr GObjectClass; n_properties: ptr cuint): ptr ptr GParamSpec  {.importc:"clutter_container_class_list_child_properties", libclutter.}
proc createChildMeta*(container: Container; actor: Actor)  {.importc:"clutter_container_create_child_meta", libclutter.}
proc destroyChildMeta*(container: Container; actor: Actor)  {.importc:"clutter_container_destroy_child_meta", libclutter.}
proc findChildByName*(container: Container; child_name: cstring): Actor  {.importc:"clutter_container_find_child_by_name", libclutter.}
proc getChildMeta*(container: Container; actor: Actor): ChildMeta  {.importc:"clutter_container_get_child_meta", libclutter.}
proc getContainerType*(): GType  {.importc:"clutter_container_get_type", libclutter.}
proc getPreferredSize*(content: Content; width: ptr cfloat; height: ptr cfloat): Gboolean  {.importc:"clutter_content_get_preferred_size", libclutter.}
proc getContentType*(): GType  {.importc:"clutter_content_get_type", libclutter.}
proc invalidate*(content: Content)  {.importc:"clutter_content_invalidate", libclutter.}
proc getDefaultContext*(): MainContext  {.importc:"clutter_context_get_default", libclutter.}
proc getMotionEventsEnabled*(): Gboolean  {.importc:"clutter_context_get_motion_events_enabled", libclutter.}
proc getContextPickMode*(): PickMode  {.importc:"clutter_context_get_pick_mode", libclutter.}
proc getContextShowFps*(): Gboolean  {.importc:"clutter_context_get_show_fps", libclutter.}
proc isContextInitialized*(): Gboolean  {.importc:"clutter_context_is_initialized", libclutter.}
proc lockContext*()  {.importc:"clutter_context_lock", libclutter.}
proc peekContextShaderStack*(): Actor  {.importc:"clutter_context_peek_shader_stack", libclutter.}
proc popContextShaderStack*(actor: Actor): Actor  {.importc:"clutter_context_pop_shader_stack", libclutter.}
proc pushContextShaderStack*(actor: Actor)  {.importc:"clutter_context_push_shader_stack", libclutter.}
proc unlockContext*()  {.importc:"clutter_context_unlock", libclutter.}
proc getBackMaterial*(effect: DeformEffect): CoglHandle  {.importc:"clutter_deform_effect_get_back_material", libclutter.}
proc getNTiles*(effect: DeformEffect; x_tiles: ptr cuint; y_tiles: ptr cuint)  {.importc:"clutter_deform_effect_get_n_tiles", libclutter.}
proc getDeformEffectType*(): GType  {.importc:"clutter_deform_effect_get_type", libclutter.}
proc invalidate*(effect: DeformEffect)  {.importc:"clutter_deform_effect_invalidate", libclutter.}
proc setBackMaterial*(effect: DeformEffect; material: CoglHandle)  {.importc:"clutter_deform_effect_set_back_material", libclutter.}
proc setNTiles*(effect: DeformEffect; x_tiles: cuint; y_tiles: cuint)  {.importc:"clutter_deform_effect_set_n_tiles", libclutter.}
proc getFactor*(effect: DesaturateEffect): cdouble  {.importc:"clutter_desaturate_effect_get_factor", libclutter.}
proc getDesaturateEffectType*(): GType  {.importc:"clutter_desaturate_effect_get_type", libclutter.}
proc newDesaturateEffect*(factor: cdouble): Effect  {.importc:"clutter_desaturate_effect_new", libclutter.}
proc setFactor*(effect: DesaturateEffect; factor: cdouble)  {.importc:"clutter_desaturate_effect_set_factor", libclutter.}
proc addDevice*(device_manager: DeviceManager; device: InputDevice)  {.importc:"clutter_device_manager_add_device", libclutter.}
proc getBackend*(device_manager: DeviceManager): Backend  {.importc:"clutter_device_manager_get_backend", libclutter.}
proc getCoreDevice*(device_manager: DeviceManager; device_type: InputDeviceType): InputDevice  {.importc:"clutter_device_manager_get_core_device", libclutter.}
proc getDefaultDeviceManager*(): DeviceManager  {.importc:"clutter_device_manager_get_default", libclutter.}
proc getDevice*(device_manager: DeviceManager; device_id: cint): InputDevice  {.importc:"clutter_device_manager_get_device", libclutter.}
proc getDeviceManagerType*(): GType  {.importc:"clutter_device_manager_get_type", libclutter.}
proc listDevices*(device_manager: DeviceManager): ptr GSList  {.importc:"clutter_device_manager_list_devices", libclutter.}
proc peekDevices*(device_manager: DeviceManager): ptr GSList  {.importc:"clutter_device_manager_peek_devices", libclutter.}
proc removeDevice*(device_manager: DeviceManager; device: InputDevice)  {.importc:"clutter_device_manager_remove_device", libclutter.}
proc selectStageEvents*(device_manager: DeviceManager; stage: Stage)  {.importc:"clutter_device_manager_select_stage_events", libclutter.}
proc updateDevices*(device_manager: DeviceManager)  {.importc:"clutter_device_manager_update_devices", libclutter.}
proc diagnosticEnabled*(): Gboolean  {.importc:"clutter_diagnostic_enabled", libclutter.}
proc diagnosticMessage*(fmt: cstring)  {.varargs, importc:"clutter_diagnostic_message", libclutter.} 
proc disableAccessibility*()  {.importc:"clutter_disable_accessibility", libclutter.}
proc doEvent*(event: Event)  {.importc:"clutter_do_event", libclutter.}
proc getDragArea*(action: DragAction; drag_area: Rect): Gboolean  {.importc:"clutter_drag_action_get_drag_area", libclutter.}
proc getDragAxis*(action: DragAction): DragAxis  {.importc:"clutter_drag_action_get_drag_axis", libclutter.}
proc getDragHandle*(action: DragAction): Actor  {.importc:"clutter_drag_action_get_drag_handle", libclutter.}
proc getDragThreshold*(action: DragAction; x_threshold: ptr cuint; y_threshold: ptr cuint)  {.importc:"clutter_drag_action_get_drag_threshold", libclutter.}
proc getMotioncoords*(action: DragAction; motion_x: ptr cfloat; motion_y: ptr cfloat)  {.importc:"clutter_drag_action_get_motioncoords", libclutter.}
proc getPresscoords*(action: DragAction; press_x: ptr cfloat; press_y: ptr cfloat)  {.importc:"clutter_drag_action_get_presscoords", libclutter.}
proc getDragActionType*(): GType  {.importc:"clutter_drag_action_get_type", libclutter.}
proc newDragAction*(): Action  {.importc:"clutter_drag_action_new", libclutter.}
proc setDragArea*(action: DragAction; drag_area: Rect)  {.importc:"clutter_drag_action_set_drag_area", libclutter.}
proc setDragAxis*(action: DragAction; axis: DragAxis)  {.importc:"clutter_drag_action_set_drag_axis", libclutter.}
proc setDragHandle*(action: DragAction; handle: Actor)  {.importc:"clutter_drag_action_set_drag_handle", libclutter.}
proc setDragThreshold*(action: DragAction; x_threshold: cint; y_threshold: cint)  {.importc:"clutter_drag_action_set_drag_threshold", libclutter.}
proc getDropActionType*(): GType  {.importc:"clutter_drop_action_get_type", libclutter.}
proc newDropAction*(): Action  {.importc:"clutter_drop_action_new", libclutter.}
proc easeCubicBezier*(t: cdouble; d: cdouble; x_1: cdouble; y_1: cdouble; x_2: cdouble; y_2: cdouble): cdouble  {.importc:"clutter_ease_cubic_bezier", libclutter.}
proc easeInBack*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_back", libclutter.}
proc easeInBounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_bounce", libclutter.}
proc easeInCirc*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_circ", libclutter.}
proc easeInCubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_cubic", libclutter.}
proc easeInElastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_elastic", libclutter.}
proc easeInExpo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_expo", libclutter.}
proc easeInOutBack*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_back", libclutter.}
proc easeInOutBounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_bounce", libclutter.}
proc easeInOutCirc*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_circ", libclutter.}
proc easeInOutCubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_cubic", libclutter.}
proc easeInOutElastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_elastic", libclutter.}
proc easeInOutExpo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_expo", libclutter.}
proc easeInOutQuad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quad", libclutter.}
proc easeInOutQuart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quart", libclutter.}
proc easeInOutQuint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_quint", libclutter.}
proc easeInOutSine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_out_sine", libclutter.}
proc easeInQuad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quad", libclutter.}
proc easeInQuart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quart", libclutter.}
proc easeInQuint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_quint", libclutter.}
proc easeInSine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_in_sine", libclutter.}
proc easeOutBack*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_back", libclutter.}
proc easeOutBounce*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_bounce", libclutter.}
proc easeOutCirc*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_circ", libclutter.}
proc easeOutCubic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_cubic", libclutter.}
proc easeOutElastic*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_elastic", libclutter.}
proc easeOutExpo*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_expo", libclutter.}
proc easeOutQuad*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quad", libclutter.}
proc easeOutQuart*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quart", libclutter.}
proc easeOutQuint*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_quint", libclutter.}
proc easeOutSine*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_ease_out_sine", libclutter.}
proc easeStepsEnd*(t: cdouble; d: cdouble; steps: cint): cdouble  {.importc:"clutter_ease_steps_end", libclutter.}
proc easeStepsStart*(t: cdouble; d: cdouble; steps: cint): cdouble  {.importc:"clutter_ease_steps_start", libclutter.}
proc easingForMode*(mode: AnimationMode; t: cdouble; d: cdouble): cdouble  {.importc:"clutter_easing_for_mode", libclutter.}
proc getEffectType*(): GType  {.importc:"clutter_effect_get_type", libclutter.}
proc queueRepaint*(effect: Effect)  {.importc:"clutter_effect_queue_repaint", libclutter.}
proc addFilter*(stage: Stage; `func`: EventFilterFunc; notify: GDestroyNotify; user_data: Gpointer): cuint  {.importc:"clutter_event_add_filter", libclutter.}
proc copy*(event: Event): Event  {.importc:"clutter_event_copy", libclutter.}
proc free*(event: Event)  {.importc:"clutter_event_free", libclutter.}
proc get*(): Event  {.importc:"clutter_event_get", libclutter.}
proc getAngle*(source: Event; target: Event): cdouble  {.importc:"clutter_event_get_angle", libclutter.}
proc getAxes*(event: Event; n_axes: ptr cuint): ptr cdouble  {.importc:"clutter_event_get_axes", libclutter.}
proc getButton*(event: Event): cuint  {.importc:"clutter_event_get_button", libclutter.}
proc getClickCount*(event: Event): cuint  {.importc:"clutter_event_get_click_count", libclutter.}
proc getCoords*(event: Event; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_event_get_coords", libclutter.}
proc getDevice*(event: Event): InputDevice  {.importc:"clutter_event_get_device", libclutter.}
proc getDeviceId*(event: Event): cint  {.importc:"clutter_event_get_device_id", libclutter.}
proc getDeviceType*(event: Event): InputDeviceType  {.importc:"clutter_event_get_device_type", libclutter.}
proc getDistance*(source: Event; target: Event): cfloat  {.importc:"clutter_event_get_distance", libclutter.}
proc getEventSequence*(event: Event): EventSequence  {.importc:"clutter_event_get_event_sequence", libclutter.}
proc getFlags*(event: Event): EventFlags  {.importc:"clutter_event_get_flags", libclutter.}
proc getKeyCode*(event: Event): cushort  {.importc:"clutter_event_get_key_code", libclutter.}
proc getKeySymbol*(event: Event): cuint  {.importc:"clutter_event_get_key_symbol", libclutter.}
proc getKeyUnicode*(event: Event): Gunichar  {.importc:"clutter_event_get_key_unicode", libclutter.}
proc getPosition*(event: Event; position: Point)  {.importc:"clutter_event_get_position", libclutter.}
proc getRelated*(event: Event): Actor  {.importc:"clutter_event_get_related", libclutter.}
proc getScrollDelta*(event: Event; dx: ptr cdouble; dy: ptr cdouble)  {.importc:"clutter_event_get_scroll_delta", libclutter.}
proc getScrollDirection*(event: Event): ScrollDirection  {.importc:"clutter_event_get_scroll_direction", libclutter.}
proc getSource*(event: Event): Actor  {.importc:"clutter_event_get_source", libclutter.}
proc getSourceDevice*(event: Event): InputDevice  {.importc:"clutter_event_get_source_device", libclutter.}
proc getStage*(event: Event): Stage  {.importc:"clutter_event_get_stage", libclutter.}
proc getState*(event: Event): ModifierType  {.importc:"clutter_event_get_state", libclutter.}
proc getstate*(event: Event; button_state: ptr ModifierType; base_state: ptr ModifierType; latched_state: ptr ModifierType; locked_state: ptr ModifierType; effective_state: ptr ModifierType)  {.importc:"clutter_event_get_state_full", libclutter.}
proc getTime*(event: Event): cuint  {.importc:"clutter_event_get_time", libclutter.}
proc getEventType*(): GType  {.importc:"clutter_event_get_type", libclutter.}
proc hasControlModifier*(event: Event): Gboolean  {.importc:"clutter_event_has_control_modifier", libclutter.}
proc hasShiftModifier*(event: Event): Gboolean  {.importc:"clutter_event_has_shift_modifier", libclutter.}
proc isPointerEmulated*(event: Event): Gboolean  {.importc:"clutter_event_is_pointer_emulated", libclutter.}
proc newEvent*(`type`: EventType): Event  {.importc:"clutter_event_new", libclutter.}
proc peek*(): Event  {.importc:"clutter_event_peek", libclutter.}
proc put*(event: Event)  {.importc:"clutter_event_put", libclutter.}
proc removeFilter*(id: cuint)  {.importc:"clutter_event_remove_filter", libclutter.}
proc getEventSequenceType*(): GType  {.importc:"clutter_event_sequence_get_type", libclutter.}
proc setButton*(event: Event; button: cuint)  {.importc:"clutter_event_set_button", libclutter.}
proc setCoords*(event: Event; x: cfloat; y: cfloat)  {.importc:"clutter_event_set_coords", libclutter.}
proc setDevice*(event: Event; device: InputDevice)  {.importc:"clutter_event_set_device", libclutter.}
proc setFlags*(event: Event; flags: EventFlags)  {.importc:"clutter_event_set_flags", libclutter.}
proc setKeyCode*(event: Event; key_code: cushort)  {.importc:"clutter_event_set_key_code", libclutter.}
proc setKeySymbol*(event: Event; key_sym: cuint)  {.importc:"clutter_event_set_key_symbol", libclutter.}
proc setKeyUnicode*(event: Event; key_unicode: Gunichar)  {.importc:"clutter_event_set_key_unicode", libclutter.}
proc setRelated*(event: Event; actor: Actor)  {.importc:"clutter_event_set_related", libclutter.}
proc setScrollDelta*(event: Event; dx: cdouble; dy: cdouble)  {.importc:"clutter_event_set_scroll_delta", libclutter.}
proc setScrollDirection*(event: Event; direction: ScrollDirection)  {.importc:"clutter_event_set_scroll_direction", libclutter.}
proc setSource*(event: Event; actor: Actor)  {.importc:"clutter_event_set_source", libclutter.}
proc setSourceDevice*(event: Event; device: InputDevice)  {.importc:"clutter_event_set_source_device", libclutter.}
proc setStage*(event: Event; stage: Stage)  {.importc:"clutter_event_set_stage", libclutter.}
proc setState*(event: Event; state: ModifierType)  {.importc:"clutter_event_set_state", libclutter.}
proc setTime*(event: Event; time: cuint)  {.importc:"clutter_event_set_time", libclutter.}
proc getEventTranslatorType*(): GType  {.importc:"clutter_event_translator_get_type", libclutter.}
proc translateEvent*(translator: EventTranslator; native: Gpointer; translated: Event): TranslateReturn  {.importc:"clutter_event_translator_translate_event", libclutter.}
proc type*(event: Event): EventType  {.importc:"clutter_event_type", libclutter.}
proc eventsPending*(): Gboolean  {.importc:"clutter_events_pending", libclutter.}
proc featureAvailable*(feature: FeatureFlags): Gboolean  {.importc:"clutter_feature_available", libclutter.}
proc getFeatureAll*(): FeatureFlags  {.importc:"clutter_feature_get_all", libclutter.}
proc initFeature*(error: ptr ptr GError): Gboolean  {.importc:"clutter_feature_init", libclutter.}
proc getFixedLayoutType*(): GType  {.importc:"clutter_fixed_layout_get_type", libclutter.}
proc newFixedLayout*(): LayoutManager  {.importc:"clutter_fixed_layout_new", libclutter.}
proc getFlattenEffectType*(): GType  {.importc:"clutter_flatten_effect_get_type", libclutter.}
proc newFlattenEffect*(): Effect  {.importc:"clutter_flatten_effect_new", libclutter.}
proc getColumnSpacing*(layout: FlowLayout): cfloat  {.importc:"clutter_flow_layout_get_column_spacing", libclutter.}
proc getColumnWidth*(layout: FlowLayout; min_width: ptr cfloat; max_width: ptr cfloat)  {.importc:"clutter_flow_layout_get_column_width", libclutter.}
proc getHomogeneous*(layout: FlowLayout): Gboolean  {.importc:"clutter_flow_layout_get_homogeneous", libclutter.}
proc getOrientation*(layout: FlowLayout): FlowOrientation  {.importc:"clutter_flow_layout_get_orientation", libclutter.}
proc getRowHeight*(layout: FlowLayout; min_height: ptr cfloat; max_height: ptr cfloat)  {.importc:"clutter_flow_layout_get_row_height", libclutter.}
proc getRowSpacing*(layout: FlowLayout): cfloat  {.importc:"clutter_flow_layout_get_row_spacing", libclutter.}
proc getSnapToGrid*(layout: FlowLayout): Gboolean  {.importc:"clutter_flow_layout_get_snap_to_grid", libclutter.}
proc getFlowLayoutType*(): GType  {.importc:"clutter_flow_layout_get_type", libclutter.}
proc newFlowLayout*(orientation: FlowOrientation): LayoutManager  {.importc:"clutter_flow_layout_new", libclutter.}
proc setColumnSpacing*(layout: FlowLayout; spacing: cfloat)  {.importc:"clutter_flow_layout_set_column_spacing", libclutter.}
proc setColumnWidth*(layout: FlowLayout; min_width: cfloat; max_width: cfloat)  {.importc:"clutter_flow_layout_set_column_width", libclutter.}
proc setHomogeneous*(layout: FlowLayout; homogeneous: Gboolean)  {.importc:"clutter_flow_layout_set_homogeneous", libclutter.}
proc setOrientation*(layout: FlowLayout; orientation: FlowOrientation)  {.importc:"clutter_flow_layout_set_orientation", libclutter.}
proc setRowHeight*(layout: FlowLayout; min_height: cfloat; max_height: cfloat)  {.importc:"clutter_flow_layout_set_row_height", libclutter.}
proc setRowSpacing*(layout: FlowLayout; spacing: cfloat)  {.importc:"clutter_flow_layout_set_row_spacing", libclutter.}
proc setSnapToGrid*(layout: FlowLayout; snap_to_grid: Gboolean)  {.importc:"clutter_flow_layout_set_snap_to_grid", libclutter.}
proc getFogType*(): GType  {.importc:"clutter_fog_get_type", libclutter.}
proc getGeometryType*(): GType  {.importc:"clutter_geometry_get_type", libclutter.}
proc intersects*(geometry0: Geometry; geometry1: Geometry): Gboolean  {.importc:"clutter_geometry_intersects", libclutter.}
proc union*(geometry_a: Geometry; geometry_b: Geometry; result: Geometry)  {.importc:"clutter_geometry_union", libclutter.}
proc cancel*(action: GestureAction)  {.importc:"clutter_gesture_action_cancel", libclutter.}
proc getDevice*(action: GestureAction; point: cuint): InputDevice  {.importc:"clutter_gesture_action_get_device", libclutter.}
proc getLastEvent*(action: GestureAction; point: cuint): Event  {.importc:"clutter_gesture_action_get_last_event", libclutter.}
proc getMotionCoords*(action: GestureAction; point: cuint; motion_x: ptr cfloat; motion_y: ptr cfloat)  {.importc:"clutter_gesture_action_get_motion_coords", libclutter.}
proc getMotionDelta*(action: GestureAction; point: cuint; delta_x: ptr cfloat; delta_y: ptr cfloat): cfloat  {.importc:"clutter_gesture_action_get_motion_delta", libclutter.}
proc getNCurrentPoints*(action: GestureAction): cuint  {.importc:"clutter_gesture_action_get_n_current_points", libclutter.}
proc getNTouchPoints*(action: GestureAction): cint  {.importc:"clutter_gesture_action_get_n_touch_points", libclutter.}
proc getPressCoords*(action: GestureAction; point: cuint; press_x: ptr cfloat; press_y: ptr cfloat)  {.importc:"clutter_gesture_action_get_press_coords", libclutter.}
proc getReleaseCoords*(action: GestureAction; point: cuint; release_x: ptr cfloat; release_y: ptr cfloat)  {.importc:"clutter_gesture_action_get_release_coords", libclutter.}
proc getSequence*(action: GestureAction; point: cuint): EventSequence  {.importc:"clutter_gesture_action_get_sequence", libclutter.}
proc getThresholdTriggerDistance*(action: GestureAction; x: ptr cfloat; y: ptr cfloat)  {.importc:"clutter_gesture_action_get_threshold_trigger_distance", libclutter.}
proc getThresholdTriggerEdge*(action: GestureAction): GestureTriggerEdge  {.importc:"clutter_gesture_action_get_threshold_trigger_edge", libclutter.}
proc getThresholdTriggerEgde*(action: GestureAction): GestureTriggerEdge  {.importc:"clutter_gesture_action_get_threshold_trigger_egde", libclutter.}
proc getGestureActionType*(): GType  {.importc:"clutter_gesture_action_get_type", libclutter.}
proc getVelocity*(action: GestureAction; point: cuint; velocity_x: ptr cfloat; velocity_y: ptr cfloat): cfloat  {.importc:"clutter_gesture_action_get_velocity", libclutter.}
proc newGestureAction*(): Action  {.importc:"clutter_gesture_action_new", libclutter.}
proc setNTouchPoints*(action: GestureAction; nb_points: cint)  {.importc:"clutter_gesture_action_set_n_touch_points", libclutter.}
proc setThresholdTriggerDistance*(action: GestureAction; x: cfloat; y: cfloat)  {.importc:"clutter_gesture_action_set_threshold_trigger_distance", libclutter.}
proc setThresholdTriggerEdge*(action: GestureAction; edge: GestureTriggerEdge)  {.importc:"clutter_gesture_action_set_threshold_trigger_edge", libclutter.}
proc getAccessibilityEnabled*(): Gboolean  {.importc:"clutter_get_accessibility_enabled", libclutter.}
proc getCurrentEvent*(): Event  {.importc:"clutter_get_current_event", libclutter.}
proc getCurrentEventTime*(): cuint  {.importc:"clutter_get_current_event_time", libclutter.}
proc getDefaultBackend*(): Backend  {.importc:"clutter_get_default_backend", libclutter.}
proc getDefaultFrameRate*(): cuint  {.importc:"clutter_get_default_frame_rate", libclutter.}
proc getDefaultTextDirection*(): TextDirection  {.importc:"clutter_get_default_text_direction", libclutter.}
proc getEasingFuncForMode*(mode: AnimationMode): EasingFunc  {.importc:"clutter_get_easing_func_for_mode", libclutter.}
proc getEasingNameForMode*(mode: AnimationMode): cstring  {.importc:"clutter_get_easing_name_for_mode", libclutter.}
proc getFontMap*(): pango.FontMap  {.importc:"clutter_get_font_map", libclutter.}
proc getKeyboardGrab*(): Actor  {.importc:"clutter_get_keyboard_grab", libclutter.}
proc getOptionGroup*(): ptr GOptionGroup  {.importc:"clutter_get_option_group", libclutter.}
proc getOptionGroupWithoutInit*(): ptr GOptionGroup  {.importc:"clutter_get_option_group_without_init", libclutter.}
proc getPointerGrab*(): Actor  {.importc:"clutter_get_pointer_grab", libclutter.}
proc getScriptId*(gobject: ptr GObject): cstring  {.importc:"clutter_get_script_id", libclutter.}
proc getSyncToVblank*(): Gboolean  {.importc:"clutter_get_sync_to_vblank", libclutter.}
proc gettext*(str: cstring): cstring  {.importc:"clutter_gettext", libclutter.}
proc grabKeyboard*(actor: Actor)  {.importc:"clutter_grab_keyboard", libclutter.}
proc grabPointer*(actor: Actor)  {.importc:"clutter_grab_pointer", libclutter.}
proc attach*(layout: GridLayout; child: Actor; left: cint; top: cint; width: cint; height: cint)  {.importc:"clutter_grid_layout_attach", libclutter.}
proc attachNextTo*(layout: GridLayout; child: Actor; sibling: Actor; side: GridPosition; width: cint; height: cint)  {.importc:"clutter_grid_layout_attach_next_to", libclutter.}
proc getChildAt*(layout: GridLayout; left: cint; top: cint): Actor  {.importc:"clutter_grid_layout_get_child_at", libclutter.}
proc getColumnHomogeneous*(layout: GridLayout): Gboolean  {.importc:"clutter_grid_layout_get_column_homogeneous", libclutter.}
proc getColumnSpacing*(layout: GridLayout): cuint  {.importc:"clutter_grid_layout_get_column_spacing", libclutter.}
proc getOrientation*(layout: GridLayout): Orientation  {.importc:"clutter_grid_layout_get_orientation", libclutter.}
proc getRowHomogeneous*(layout: GridLayout): Gboolean  {.importc:"clutter_grid_layout_get_row_homogeneous", libclutter.}
proc getRowSpacing*(layout: GridLayout): cuint  {.importc:"clutter_grid_layout_get_row_spacing", libclutter.}
proc getGridLayoutType*(): GType  {.importc:"clutter_grid_layout_get_type", libclutter.}
proc insertColumn*(layout: GridLayout; position: cint)  {.importc:"clutter_grid_layout_insert_column", libclutter.}
proc insertNextTo*(layout: GridLayout; sibling: Actor; side: GridPosition)  {.importc:"clutter_grid_layout_insert_next_to", libclutter.}
proc insertRow*(layout: GridLayout; position: cint)  {.importc:"clutter_grid_layout_insert_row", libclutter.}
proc newGridLayout*(): LayoutManager  {.importc:"clutter_grid_layout_new", libclutter.}
proc setColumnHomogeneous*(layout: GridLayout; homogeneous: Gboolean)  {.importc:"clutter_grid_layout_set_column_homogeneous", libclutter.}
proc setColumnSpacing*(layout: GridLayout; spacing: cuint)  {.importc:"clutter_grid_layout_set_column_spacing", libclutter.}
proc setOrientation*(layout: GridLayout; orientation: Orientation)  {.importc:"clutter_grid_layout_set_orientation", libclutter.}
proc setRowHomogeneous*(layout: GridLayout; homogeneous: Gboolean)  {.importc:"clutter_grid_layout_set_row_homogeneous", libclutter.}
proc setRowSpacing*(layout: GridLayout; spacing: cuint)  {.importc:"clutter_grid_layout_set_row_spacing", libclutter.}
proc getGroupType*(): GType  {.importc:"clutter_group_get_type", libclutter.}
proc hasProgressFunction*(gtype: GType): Gboolean  {.importc:"clutter_has_progress_function", libclutter.}
proc add*(id_pool: IDPool; `ptr`: Gpointer): cuint  {.importc:"clutter_id_pool_add", libclutter.}
proc free*(id_pool: IDPool)  {.importc:"clutter_id_pool_free", libclutter.}
proc lookup*(id_pool: IDPool; id: cuint): Gpointer  {.importc:"clutter_id_pool_lookup", libclutter.}
proc newClutterIdPool*(initial_size: cuint): IDPool  {.importc:"clutter_id_pool_new", libclutter.}
proc remove*(id_pool: IDPool; id: cuint)  {.importc:"clutter_id_pool_remove", libclutter.}
proc clutter_id_to_color*(id: cuint; col: Color)  {.importc:"clutter_id_to_color", libclutter.}
proc clutter_image_error_quark*(): GQuark  {.importc:"clutter_image_error_quark", libclutter.}
proc getImageType*(): GType  {.importc:"clutter_image_get_type", libclutter.}
proc newClutterImage*(): Content  {.importc:"clutter_image_new", libclutter.}
proc setArea*(image: Image; data: ptr cuchar; pixel_format: CoglPixelFormat; rect: cairo.RectangleInt; row_stride: cuint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_area", libclutter.}
proc setBytes*(image: Image; data: ptr GBytes; pixel_format: CoglPixelFormat; width: cuint; height: cuint; row_stride: cuint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_bytes", libclutter.}
proc setData*(image: Image; data: ptr cuchar; pixel_format: CoglPixelFormat; width: cuint; height: cuint; row_stride: cuint; error: ptr ptr GError): Gboolean  {.importc:"clutter_image_set_data", libclutter.}
proc initClutter*(argc: ptr cint; argv: ptr cstringArray): InitError  {.importc:"clutter_init", libclutter.}
proc initClutterErrorQuark*(): GQuark  {.importc:"clutter_init_error_quark", libclutter.}
proc initClutter*(argc: ptr cint; argv: ptr cstringArray; parameter_string: cstring; entries: ptr GOptionEntry; translation_domain: cstring; error: ptr ptr GError): InitError  {.importc:"clutter_init_with_args", libclutter.}
template initClutter*(): untyped =
  var count: cint
  var args: cstringArray
  when declared(paramCount):
    count = paramCount().cint
  else:
    count = 0
  when declared(commandLineParams):
    args = allocCStringArray(commandLineParams())
  else:
    args = nil
  initClutter(addr(count), addr(args))
proc addAxis*(device: InputDevice; axis: InputAxis; min_value: cdouble; max_value: cdouble; resolution: cdouble): cuint  {.importc:"clutter_input_device_add_axis", libclutter.}
proc addEventSequence*(device: InputDevice; event: Event)  {.importc:"clutter_input_device_add_event_sequence", libclutter.}
proc addScrollInfo*(device: InputDevice; index: cuint; direction: ScrollDirection; increment: cdouble)  {.importc:"clutter_input_device_add_scroll_info", libclutter.}
proc addSlave*(master: InputDevice; slave: InputDevice)  {.importc:"clutter_input_device_add_slave", libclutter.}
proc getAssociatedDevice*(device: InputDevice): InputDevice  {.importc:"clutter_input_device_get_associated_device", libclutter.}
proc getAxis*(device: InputDevice; index: cuint): InputAxis  {.importc:"clutter_input_device_get_axis", libclutter.}
proc getAxisValue*(device: InputDevice; axes: ptr cdouble; axis: InputAxis; value: ptr cdouble): Gboolean  {.importc:"clutter_input_device_get_axis_value", libclutter.}
proc getCoords*(device: InputDevice; sequence: EventSequence; point: Point): Gboolean  {.importc:"clutter_input_device_get_coords", libclutter.}
proc getDeviceId*(device: InputDevice): cint  {.importc:"clutter_input_device_get_device_id", libclutter.}
proc getDeviceMode*(device: InputDevice): InputMode  {.importc:"clutter_input_device_get_device_mode", libclutter.}
proc getDeviceName*(device: InputDevice): cstring  {.importc:"clutter_input_device_get_device_name", libclutter.}
proc getDeviceType*(device: InputDevice): InputDeviceType  {.importc:"clutter_input_device_get_device_type", libclutter.}
proc getEnabled*(device: InputDevice): Gboolean  {.importc:"clutter_input_device_get_enabled", libclutter.}
proc getGrabbedActor*(device: InputDevice): Actor  {.importc:"clutter_input_device_get_grabbed_actor", libclutter.}
proc getHasCursor*(device: InputDevice): Gboolean  {.importc:"clutter_input_device_get_has_cursor", libclutter.}
proc getKey*(device: InputDevice; index: cuint; keyval: ptr cuint; modifiers: ptr ModifierType): Gboolean  {.importc:"clutter_input_device_get_key", libclutter.}
proc getModifierState*(device: InputDevice): ModifierType  {.importc:"clutter_input_device_get_modifier_state", libclutter.}
proc getNAxes*(device: InputDevice): cuint  {.importc:"clutter_input_device_get_n_axes", libclutter.}
proc getNKeys*(device: InputDevice): cuint  {.importc:"clutter_input_device_get_n_keys", libclutter.}
proc getPointerActor*(device: InputDevice): Actor  {.importc:"clutter_input_device_get_pointer_actor", libclutter.}
proc getPointerStage*(device: InputDevice): Stage  {.importc:"clutter_input_device_get_pointer_stage", libclutter.}
proc getScrollDelta*(device: InputDevice; index: cuint; value: cdouble; direction_p: ptr ScrollDirection; delta_p: ptr cdouble): Gboolean  {.importc:"clutter_input_device_get_scroll_delta", libclutter.}
proc getSlaveDevices*(device: InputDevice): ptr GList  {.importc:"clutter_input_device_get_slave_devices", libclutter.}
proc getStage*(device: InputDevice): Stage  {.importc:"clutter_input_device_get_stage", libclutter.}
proc getInputDeviceType*(): GType  {.importc:"clutter_input_device_get_type", libclutter.}
proc grab*(device: InputDevice; actor: Actor)  {.importc:"clutter_input_device_grab", libclutter.}
proc hasHequence*(device: InputDevice; sequence: EventSequence): Gboolean  {.importc:"clutter_input_device_has_sequence", libclutter.}
proc keycodeToEvdev*(device: InputDevice; hardware_keycode: cuint; evdev_keycode: ptr cuint): Gboolean  {.importc:"clutter_input_device_keycode_to_evdev", libclutter.}
proc removeEventSequence*(device: InputDevice; event: Event)  {.importc:"clutter_input_device_remove_event_sequence", libclutter.}
proc removeSlave*(master: InputDevice; slave: InputDevice)  {.importc:"clutter_input_device_remove_slave", libclutter.}
proc resetAxes*(device: InputDevice)  {.importc:"clutter_input_device_reset_axes", libclutter.}
proc resetScrollInfo*(device: InputDevice)  {.importc:"clutter_input_device_reset_scroll_info", libclutter.}
proc sequenceGetGrabbedActor*(device: InputDevice; sequence: EventSequence): Actor  {.importc:"clutter_input_device_sequence_get_grabbed_actor", libclutter.}
proc sequenceGrab*(device: InputDevice; sequence: EventSequence; actor: Actor)  {.importc:"clutter_input_device_sequence_grab", libclutter.}
proc sequenceUngrab*(device: InputDevice; sequence: EventSequence)  {.importc:"clutter_input_device_sequence_ungrab", libclutter.}
proc setActor*(device: InputDevice; sequence: EventSequence; actor: Actor; emit_crossing: Gboolean)  {.importc:"clutter_input_device_set_actor", libclutter.}
proc setAssociatedDevice*(device: InputDevice; associated: InputDevice)  {.importc:"clutter_input_device_set_associated_device", libclutter.}
proc setCoords*(device: InputDevice; sequence: EventSequence; x: cfloat; y: cfloat; stage: Stage)  {.importc:"clutter_input_device_set_coords", libclutter.}
proc setEnabled*(device: InputDevice; enabled: Gboolean)  {.importc:"clutter_input_device_set_enabled", libclutter.}
proc setKey*(device: InputDevice; index: cuint; keyval: cuint; modifiers: ModifierType)  {.importc:"clutter_input_device_set_key", libclutter.}
proc setNKeys*(device: InputDevice; n_keys: cuint)  {.importc:"clutter_input_device_set_n_keys", libclutter.}
proc setStage*(device: InputDevice; stage: Stage)  {.importc:"clutter_input_device_set_stage", libclutter.}
proc setState*(device: InputDevice; state: ModifierType)  {.importc:"clutter_input_device_set_state", libclutter.}
proc setTime*(device: InputDevice; time: cuint)  {.importc:"clutter_input_device_set_time", libclutter.}
proc translateAxis*(device: InputDevice; index: cuint; value: cdouble; axis_value: ptr cdouble): Gboolean  {.importc:"clutter_input_device_translate_axis", libclutter.}
proc ungrab*(device: InputDevice)  {.importc:"clutter_input_device_ungrab", libclutter.}
proc update*(device: InputDevice; sequence: EventSequence; emit_crossing: Gboolean): Actor  {.importc:"clutter_input_device_update", libclutter.}
proc update*(device: InputDevice; event: Event; update_stage: Gboolean)  {.importc:"clutter_input_device_update_from_event", libclutter.}
proc clone*(interval: Interval): Interval  {.importc:"clutter_interval_clone", libclutter.}
proc compute*(interval: Interval; factor: cdouble): ptr GValue  {.importc:"clutter_interval_compute", libclutter.}
proc computeValue*(interval: Interval; factor: cdouble; value: ptr GValue): Gboolean  {.importc:"clutter_interval_compute_value", libclutter.}
proc getFinalValue*(interval: Interval; value: ptr GValue)  {.importc:"clutter_interval_get_final_value", libclutter.}
proc getinitialValue*(interval: Interval; value: ptr GValue)  {.importc:"clutter_interval_get_initial_value", libclutter.}
proc getInterval*(interval: Interval)  {.varargs, importc:"clutter_interval_get_interval", libclutter.} 
proc getIntervalType*(): GType  {.importc:"clutter_interval_get_type", libclutter.}
proc getIntervalValueType*(interval: Interval): GType  {.importc:"clutter_interval_get_value_type", libclutter.}
proc isValid*(interval: Interval): Gboolean  {.importc:"clutter_interval_is_valid", libclutter.}
proc newInterval*(gtype: GType): Interval  {.varargs, importc:"clutter_interval_new", libclutter.} 
proc newInterval*(gtype: GType; initial: ptr GValue; final: ptr GValue): Interval  {.importc:"clutter_interval_new_with_values", libclutter.}
proc peekFinalValue*(interval: Interval): ptr GValue  {.importc:"clutter_interval_peek_final_value", libclutter.}
proc peekInitialValue*(interval: Interval): ptr GValue  {.importc:"clutter_interval_peek_initial_value", libclutter.}
proc registerProgressFunc*(value_type: GType; `func`: ProgressFunc)  {.importc:"clutter_interval_register_progress_func", libclutter.}
proc setFinal*(interval: Interval)  {.varargs, importc:"clutter_interval_set_final", libclutter.} 
proc setFinalValue*(interval: Interval; value: ptr GValue)  {.importc:"clutter_interval_set_final_value", libclutter.}
proc setInitial*(interval: Interval)  {.varargs, importc:"clutter_interval_set_initial", libclutter.} 
proc setInitialValue*(interval: Interval; value: ptr GValue)  {.importc:"clutter_interval_set_initial_value", libclutter.}
proc setInterval*(interval: Interval)  {.varargs, importc:"clutter_interval_set_interval", libclutter.} 
proc validate*(interval: Interval; pspec: ptr GParamSpec): Gboolean  {.importc:"clutter_interval_validate", libclutter.}
proc clear*(transition: KeyframeTransition)  {.importc:"clutter_keyframe_transition_clear", libclutter.}
proc getKeyframe*(transition: KeyframeTransition; index: cuint; key: ptr cdouble; mode: ptr AnimationMode; value: ptr GValue)  {.importc:"clutter_keyframe_transition_get_key_frame", libclutter.}
proc getNKeyframes*(transition: KeyframeTransition): cuint  {.importc:"clutter_keyframe_transition_get_n_key_frames", libclutter.}
proc getKeyframeType*(): GType  {.importc:"clutter_keyframe_transition_get_type", libclutter.}
proc newKeyframeTransition*(property_name: cstring): Transition  {.importc:"clutter_keyframe_transition_new", libclutter.}
proc set*(transition: KeyframeTransition; gtype: GType; n_key_frames: cuint)  {.varargs, importc:"clutter_keyframe_transition_set", libclutter.} 
proc setKeyframe*(transition: KeyframeTransition; index: cuint; key: cdouble; mode: AnimationMode; value: ptr GValue)  {.importc:"clutter_keyframe_transition_set_key_frame", libclutter.}
proc setKeyframes*(transition: KeyframeTransition; n_key_frames: cuint; key_frames: ptr cdouble)  {.importc:"clutter_keyframe_transition_set_key_frames", libclutter.}
proc setModes*(transition: KeyframeTransition; n_modes: cuint; modes: ptr AnimationMode)  {.importc:"clutter_keyframe_transition_set_modes", libclutter.}
proc setValues*(transition: KeyframeTransition; n_values: cuint; values: ptr GValue)  {.importc:"clutter_keyframe_transition_set_values", libclutter.}
proc keysymToUnicode*(keyval: cuint): cuint  {.importc:"clutter_keysym_to_unicode", libclutter.}
proc copy*(knot: Knot): Knot  {.importc:"clutter_knot_copy", libclutter.}
proc equal*(knot_a: Knot; knot_b: Knot): Gboolean  {.importc:"clutter_knot_equal", libclutter.}
proc free*(knot: Knot)  {.importc:"clutter_knot_free", libclutter.}
proc getKnotType*(): GType  {.importc:"clutter_knot_get_type", libclutter.}
proc getLayerNodeType*(): GType  {.importc:"clutter_layer_node_get_type", libclutter.}
proc newLayerNode*(projection: CoglMatrix; viewport: cairo.Rectangle; width: cfloat; height: cfloat; opacity: cuchar): PaintNode  {.importc:"clutter_layer_node_new", libclutter.}
proc allocate*(manager: LayoutManager; container: Container; allocation: ActorBox; flags: AllocationFlags)  {.importc:"clutter_layout_manager_allocate", libclutter.}
proc beginAnimation*(manager: LayoutManager; duration: cuint; mode: Gulong): Alpha  {.importc:"clutter_layout_manager_begin_animation", libclutter.}
proc childGet*(manager: LayoutManager; container: Container; actor: Actor; first_property: cstring)  {.varargs, importc:"clutter_layout_manager_child_get", libclutter.}  
proc childGetProperty*(manager: LayoutManager; container: Container; actor: Actor; property_name: cstring; value: ptr GValue)  {.importc:"clutter_layout_manager_child_get_property", libclutter.}
proc childSet*(manager: LayoutManager; container: Container; actor: Actor; first_property: cstring)  {.varargs, importc:"clutter_layout_manager_child_set", libclutter.} 
proc childSetProperty*(manager: LayoutManager; container: Container; actor: Actor; property_name: cstring; value: ptr GValue)  {.importc:"clutter_layout_manager_child_set_property", libclutter.}
proc endAnimation*(manager: LayoutManager)  {.importc:"clutter_layout_manager_end_animation", libclutter.}
proc findChildProperty*(manager: LayoutManager; name: cstring): ptr GParamSpec  {.importc:"clutter_layout_manager_find_child_property", libclutter.}
proc getAnimationProgress*(manager: LayoutManager): cdouble  {.importc:"clutter_layout_manager_get_animation_progress", libclutter.}
proc getChildMeta*(manager: LayoutManager; container: Container; actor: Actor): LayoutMeta  {.importc:"clutter_layout_manager_get_child_meta", libclutter.}
proc getChildMetaType*(manager: LayoutManager): GType  {.importc:"clutter_layout_manager_get_child_meta_type", libclutter.}
proc getPreferredHeight*(manager: LayoutManager; container: Container; for_width: cfloat; min_height_p: ptr cfloat; nat_height_p: ptr cfloat)  {.importc:"clutter_layout_manager_get_preferred_height", libclutter.}
proc getPreferredWidth*(manager: LayoutManager; container: Container; for_height: cfloat; min_width_p: ptr cfloat; nat_width_p: ptr cfloat)  {.importc:"clutter_layout_manager_get_preferred_width", libclutter.}
proc getLayoutManagerType*(): GType  {.importc:"clutter_layout_manager_get_type", libclutter.}
proc layoutChanged*(manager: LayoutManager)  {.importc:"clutter_layout_manager_layout_changed", libclutter.}
proc listChildProperties*(manager: LayoutManager; n_pspecs: ptr cuint): ptr ptr GParamSpec  {.importc:"clutter_layout_manager_list_child_properties", libclutter.}
proc setContainer*(manager: LayoutManager; container: Container)  {.importc:"clutter_layout_manager_set_container", libclutter.}
proc getManager*(data: LayoutMeta): LayoutManager  {.importc:"clutter_layout_meta_get_manager", libclutter.}
proc getLayoutMetaType*(): GType  {.importc:"clutter_layout_meta_get_type", libclutter.}
proc linear*(t: cdouble; d: cdouble): cdouble  {.importc:"clutter_linear", libclutter.}
proc getListModelType*(): GType  {.importc:"clutter_list_model_get_type", libclutter.}
proc newListModel*(n_columns: cuint): Model  {.varargs, importc:"",   libclutter.}
proc newListModel*(n_columns: cuint; types: ptr GType; names: ptr cstring): Model  {.importc:"clutter_list_model_newv", libclutter.}
proc clutterMain*()  {.importc:"clutter_main", libclutter.}
proc clutterMainLevel*(): cint  {.importc:"clutter_main_level", libclutter.}
proc clutterMainQuit*()  {.importc:"clutter_main_quit", libclutter.}
proc copy*(margin: Margin): Margin  {.importc:"clutter_margin_copy", libclutter.}
proc free*(margin: Margin)  {.importc:"clutter_margin_free", libclutter.}
proc getMarginType*(): GType  {.importc:"clutter_margin_get_type", libclutter.}
proc newMargin*(): Margin  {.importc:"clutter_margin_new", libclutter.}
proc addTimeline*(master_clock: MasterClock; timeline: Timeline)  {.importc:"clutter_master_clock_add_timeline", libclutter.}
proc ensureNextIteration*(master_clock: MasterClock)  {.importc:"clutter_master_clock_ensure_next_iteration", libclutter.}
proc getMasterClockDefault*(): MasterClock  {.importc:"clutter_master_clock_get_default", libclutter.}
proc getMasterClockType*(): GType  {.importc:"clutter_master_clock_get_type", libclutter.}
proc removeTimeline*(master_clock: MasterClock; timeline: Timeline)  {.importc:"clutter_master_clock_remove_timeline", libclutter.}
proc setPaused*(master_clock: MasterClock; paused: Gboolean)  {.importc:"clutter_master_clock_set_paused", libclutter.}
proc startRunning*(master_clock: MasterClock)  {.importc:"clutter_master_clock_start_running", libclutter.}
proc allocMatrix*(): ptr Matrix  {.importc:"clutter_matrix_alloc", libclutter.}
proc getMatrixType*(): GType  {.importc:"clutter_matrix_get_type", libclutter.}
proc copy*(iter: ModelIter): ModelIter  {.importc:"clutter_model_iter_copy", libclutter.}
proc get*(iter: ModelIter)  {.varargs, importc:"clutter_model_iter_get",   libclutter.}
proc getModel*(iter: ModelIter): Model  {.importc:"clutter_model_iter_get_model", libclutter.}
proc getRow*(iter: ModelIter): cuint  {.importc:"clutter_model_iter_get_row", libclutter.}
proc getModelIterType*(): GType  {.importc:"clutter_model_iter_get_type", libclutter.}
proc getValue*(iter: ModelIter; column: cuint; value: ptr GValue)  {.importc:"clutter_model_iter_get_value", libclutter.}
proc isFirst*(iter: ModelIter): Gboolean  {.importc:"clutter_model_iter_is_first", libclutter.}
proc isLast*(iter: ModelIter): Gboolean  {.importc:"clutter_model_iter_is_last", libclutter.}
proc next*(iter: ModelIter): ModelIter  {.importc:"clutter_model_iter_next", libclutter.}
proc prev*(iter: ModelIter): ModelIter  {.importc:"clutter_model_iter_prev", libclutter.}
proc set*(iter: ModelIter)  {.varargs, importc:"clutter_model_iter_set",  libclutter.}
proc setValue*(iter: ModelIter; column: cuint; value: ptr GValue)  {.importc:"clutter_model_iter_set_value", libclutter.}
proc createTexture*(effect: OffscreenEffect; width: cfloat; height: cfloat): CoglHandle  {.importc:"clutter_offscreen_effect_create_texture", libclutter.}
proc getTarget*(effect: OffscreenEffect): CoglMaterial  {.importc:"clutter_offscreen_effect_get_target", libclutter.}
proc getTargetRect*(effect: OffscreenEffect; rect: Rect): Gboolean  {.importc:"clutter_offscreen_effect_get_target_rect", libclutter.}
proc getTargetSize*(effect: OffscreenEffect; width: ptr cfloat; height: ptr cfloat): Gboolean  {.importc:"clutter_offscreen_effect_get_target_size", libclutter.}
proc getTexture*(effect: OffscreenEffect): CoglHandle  {.importc:"clutter_offscreen_effect_get_texture", libclutter.}
proc getOffscreenEffectType*(): GType  {.importc:"clutter_offscreen_effect_get_type", libclutter.}
proc paintTarget*(effect: OffscreenEffect)  {.importc:"clutter_offscreen_effect_paint_target", libclutter.}
proc getAngle*(effect: PageTurnEffect): cdouble  {.importc:"clutter_page_turn_effect_get_angle", libclutter.}
proc getPeriod*(effect: PageTurnEffect): cdouble  {.importc:"clutter_page_turn_effect_get_period", libclutter.}
proc getRadius*(effect: PageTurnEffect): cfloat  {.importc:"clutter_page_turn_effect_get_radius", libclutter.}
proc getPageTurnEffectType*(): GType  {.importc:"clutter_page_turn_effect_get_type", libclutter.}
proc newPageTurnEffect*(period: cdouble; angle: cdouble; radius: cfloat): Effect  {.importc:"clutter_page_turn_effect_new", libclutter.}
proc setAngle*(effect: PageTurnEffect; angle: cdouble)  {.importc:"clutter_page_turn_effect_set_angle", libclutter.}
proc setPeriod*(effect: PageTurnEffect; period: cdouble)  {.importc:"clutter_page_turn_effect_set_period", libclutter.}
proc setRadius*(effect: PageTurnEffect; radius: cfloat)  {.importc:"clutter_page_turn_effect_set_radius", libclutter.}
proc addChild*(node: PaintNode; child: PaintNode)  {.importc:"clutter_paint_node_add_child", libclutter.}
proc addRectangle*(node: PaintNode; rect: ActorBox)  {.importc:"clutter_paint_node_add_rectangle", libclutter.}
proc addTextureRectangle*(node: PaintNode; rect: ActorBox; x_1: cfloat; y_1: cfloat; x_2: cfloat; y_2: cfloat)  {.importc:"clutter_paint_node_add_texture_rectangle", libclutter.}
proc getFirstChild*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_get_first_child", libclutter.}
proc getFramebuffer*(node: PaintNode): CoglFramebuffer  {.importc:"clutter_paint_node_get_framebuffer", libclutter.}
proc getLastChild*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_get_last_child", libclutter.}
proc getNChildren*(node: PaintNode): cuint  {.importc:"clutter_paint_node_get_n_children", libclutter.}
proc getNextSibling*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_get_next_sibling", libclutter.}
proc getParent*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_get_parent", libclutter.}
proc getPreviousSibling*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_get_previous_sibling", libclutter.}
proc getPaintNodeType*(): GType  {.importc:"clutter_paint_node_get_type", libclutter.}
proc Ref*(node: PaintNode): PaintNode  {.importc:"clutter_paint_node_ref", libclutter.}
proc RemoveAll*(node: PaintNode)  {.importc:"clutter_paint_node_remove_all", libclutter.}
proc RemoveChild*(node: PaintNode; child: PaintNode)  {.importc:"clutter_paint_node_remove_child", libclutter.}
proc ReplaceChild*(node: PaintNode; old_child: PaintNode; new_child: PaintNode)  {.importc:"clutter_paint_node_replace_child", libclutter.}
proc SetName*(node: PaintNode; name: cstring)  {.importc:"clutter_paint_node_set_name", libclutter.}
proc Unref*(node: PaintNode)  {.importc:"clutter_paint_node_unref", libclutter.}
proc copy*(pv: PaintVolume): PaintVolume  {.importc:"clutter_paint_volume_copy", libclutter.}
proc free*(pv: PaintVolume)  {.importc:"clutter_paint_volume_free", libclutter.}
proc getDepth*(pv: PaintVolume): cfloat  {.importc:"clutter_paint_volume_get_depth", libclutter.}
proc getHeight*(pv: PaintVolume): cfloat  {.importc:"clutter_paint_volume_get_height", libclutter.}
proc getOrigin*(pv: PaintVolume; vertex: Vertex)  {.importc:"clutter_paint_volume_get_origin", libclutter.}
proc getPaintVolumeType*(): GType  {.importc:"clutter_paint_volume_get_type", libclutter.}
proc clutter_paint_volume_get_width*(pv: PaintVolume): cfloat  {.importc:"clutter_paint_volume_get_width", libclutter.}
proc newPaintVolume*(actor: Actor): PaintVolume  {.importc:"clutter_paint_volume_new", libclutter.}
proc setDepth*(pv: PaintVolume; depth: cfloat)  {.importc:"clutter_paint_volume_set_depth", libclutter.}
proc setFromAllocation*(pv: PaintVolume; actor: Actor): Gboolean  {.importc:"clutter_paint_volume_set_from_allocation", libclutter.}
proc setHeight*(pv: PaintVolume; height: cfloat)  {.importc:"clutter_paint_volume_set_height", libclutter.}
proc setOrigin*(pv: PaintVolume; origin: Vertex)  {.importc:"clutter_paint_volume_set_origin", libclutter.}
proc setWidth*(pv: PaintVolume; width: cfloat)  {.importc:"clutter_paint_volume_set_width", libclutter.}
proc union*(pv: PaintVolume; another_pv: PaintVolume)  {.importc:"clutter_paint_volume_union", libclutter.}
proc unionBox*(pv: PaintVolume; box: ActorBox)  {.importc:"clutter_paint_volume_union_box", libclutter.}
proc getAccelerationFactor*(self: PanAction): cdouble  {.importc:"clutter_pan_action_get_acceleration_factor", libclutter.}
proc getDeceleration*(self: PanAction): cdouble  {.importc:"clutter_pan_action_get_deceleration", libclutter.}
proc getInterpolate*(self: PanAction): Gboolean  {.importc:"clutter_pan_action_get_interpolate", libclutter.}
proc getInterpolatedCoords*(self: PanAction; interpolated_x: ptr cfloat; interpolated_y: ptr cfloat)  {.importc:"clutter_pan_action_get_interpolated_coords", libclutter.}
proc getInterpolatedDelta*(self: PanAction; delta_x: ptr cfloat; delta_y: ptr cfloat): cfloat  {.importc:"clutter_pan_action_get_interpolated_delta", libclutter.}
proc getMotionCoords*(self: PanAction; point: cuint; motion_x: ptr cfloat; motion_y: ptr cfloat)  {.importc:"clutter_pan_action_get_motion_coords", libclutter.}
proc getMotionDelta*(self: PanAction; point: cuint; delta_x: ptr cfloat; delta_y: ptr cfloat): cfloat  {.importc:"clutter_pan_action_get_motion_delta", libclutter.}
proc getPanAxis*(self: PanAction): PanAxis  {.importc:"clutter_pan_action_get_pan_axis", libclutter.}
proc getPanActionType*(): GType  {.importc:"clutter_pan_action_get_type", libclutter.}
proc newPanAction*(): Action  {.importc:"clutter_pan_action_new", libclutter.}
proc setAccelerationFactor*(self: PanAction; factor: cdouble)  {.importc:"clutter_pan_action_set_acceleration_factor", libclutter.}
proc setDeceleration*(self: PanAction; rate: cdouble)  {.importc:"clutter_pan_action_set_deceleration", libclutter.}
proc setInterpolate*(self: PanAction; should_interpolate: Gboolean)  {.importc:"clutter_pan_action_set_interpolate", libclutter.}
proc setPanAxis*(self: PanAction; axis: PanAxis)  {.importc:"clutter_pan_action_set_pan_axis", libclutter.}
proc getParamColorType*(): GType  {.importc:"clutter_param_color_get_type", libclutter.}
proc clutter_param_spec_color*(name: cstring; nick: cstring; blurb: cstring; default_value: Color; flags: GParamFlags): ptr GParamSpec  {.importc:"clutter_param_spec_color", libclutter.}
proc addCairoPath*(path: Path; cpath: cairo.PathObj)  {.importc:"clutter_path_add_cairo_path", libclutter.}
proc addClose*(path: Path)  {.importc:"clutter_path_add_close", libclutter.}
proc addCurveTo*(path: Path; x_1: cint; y_1: cint; x_2: cint; y_2: cint; x_3: cint; y_3: cint)  {.importc:"clutter_path_add_curve_to", libclutter.}
proc addLineTo*(path: Path; x: cint; y: cint)  {.importc:"clutter_path_add_line_to", libclutter.}
proc addMoveTo*(path: Path; x: cint; y: cint)  {.importc:"clutter_path_add_move_to", libclutter.}
proc addNode*(path: Path; node: PathNode)  {.importc:"clutter_path_add_node", libclutter.}
proc addRelCurveTo*(path: Path; x_1: cint; y_1: cint; x_2: cint; y_2: cint; x_3: cint; y_3: cint)  {.importc:"clutter_path_add_rel_curve_to", libclutter.}
proc addRelLineTo*(path: Path; x: cint; y: cint)  {.importc:"clutter_path_add_rel_line_to", libclutter.}
proc addRelMoveTo*(path: Path; x: cint; y: cint)  {.importc:"clutter_path_add_rel_move_to", libclutter.}
proc addString*(path: Path; str: cstring): Gboolean  {.importc:"clutter_path_add_string", libclutter.}
proc clear*(path: Path)  {.importc:"clutter_path_clear", libclutter.}
proc getOffset*(constraint: PathConstraint): cfloat  {.importc:"clutter_path_constraint_get_offset", libclutter.}
proc getPath*(constraint: PathConstraint): Path  {.importc:"clutter_path_constraint_get_path", libclutter.}
proc getPathConstraintType*(): GType  {.importc:"clutter_path_constraint_get_type", libclutter.}
proc newPathConstraint*(path: Path; offset: cfloat): Constraint  {.importc:"clutter_path_constraint_new", libclutter.}
proc setOffset*(constraint: PathConstraint; offset: cfloat)  {.importc:"clutter_path_constraint_set_offset", libclutter.}
proc setPath*(constraint: PathConstraint; path: Path)  {.importc:"clutter_path_constraint_set_path", libclutter.}
proc foreach*(path: Path; callback: PathCallback; user_data: Gpointer)  {.importc:"clutter_path_foreach", libclutter.}
proc getDescription*(path: Path): cstring  {.importc:"clutter_path_get_description", libclutter.}
proc getLength*(path: Path): cuint  {.importc:"clutter_path_get_length", libclutter.}
proc getNNodes*(path: Path): cuint  {.importc:"clutter_path_get_n_nodes", libclutter.}
proc getNode*(path: Path; index: cuint; node: PathNode)  {.importc:"clutter_path_get_node", libclutter.}
proc getNodes*(path: Path): ptr GSList  {.importc:"clutter_path_get_nodes", libclutter.}
proc getPosition*(path: Path; progress: cdouble; position: Knot): cuint  {.importc:"clutter_path_get_position", libclutter.}
proc clutter_path_get_type*(): GType  {.importc:"clutter_path_get_type", libclutter.}
proc insertNode*(path: Path; index: cint; node: PathNode)  {.importc:"clutter_path_insert_node", libclutter.}
proc newPath*(): Path  {.importc:"clutter_path_new", libclutter.}
proc newPath*(desc: cstring): Path  {.importc:"clutter_path_new_with_description", libclutter.}
proc nodeCopy*(node: PathNode): PathNode  {.importc:"clutter_path_node_copy", libclutter.}
proc nodeEqual*(node_a: PathNode; node_b: PathNode): Gboolean  {.importc:"clutter_path_node_equal", libclutter.}
proc nodeFree*(node: PathNode)  {.importc:"clutter_path_node_free", libclutter.}
proc getPathNodeType*(): GType  {.importc:"clutter_path_node_get_type", libclutter.}
proc removeNode*(path: Path; index: cuint)  {.importc:"clutter_path_remove_node", libclutter.}
proc replaceNode*(path: Path; index: cuint; node: PathNode)  {.importc:"clutter_path_replace_node", libclutter.}
proc setDescription*(path: Path; str: cstring): Gboolean  {.importc:"clutter_path_set_description", libclutter.}
proc toCairoPath*(path: Path; cr: cairo.Context)  {.importc:"clutter_path_to_cairo_path", libclutter.}
proc getPerspectiveType*(): GType  {.importc:"clutter_perspective_get_type", libclutter.}
proc getPipelineType*(): GType  {.importc:"clutter_pipeline_node_get_type", libclutter.}
proc pixelToId*(pixel: array[4, Guchar]): cuint  {.importc:"clutter_pixel_to_id", libclutter.}
proc newPoint*(): Point  {.importc:"clutter_point_alloc", libclutter.}
proc copy*(point: Point): Point  {.importc:"clutter_point_copy", libclutter.}
proc distance*(a: Point; b: Point; x_distance: ptr cfloat; y_distance: ptr cfloat): cfloat  {.importc:"clutter_point_distance", libclutter.}
proc equals*(a: Point; b: Point): Gboolean  {.importc:"clutter_point_equals", libclutter.}
proc free*(point: Point)  {.importc:"clutter_point_free", libclutter.}
proc getPointType*(): GType  {.importc:"clutter_point_get_type", libclutter.}
proc init*(point: Point; x: cfloat; y: cfloat): Point  {.importc:"clutter_point_init", libclutter.}
proc newZeroPoint*(): Point  {.importc:"clutter_point_zero", libclutter.}
proc getPropertyName*(transition: PropertyTransition): cstring  {.importc:"clutter_property_transition_get_property_name", libclutter.}
proc getPropertyTransitionType*(): GType  {.importc:"clutter_property_transition_get_type", libclutter.}
proc newPropertyTransition*(property_name: cstring): Transition  {.importc:"clutter_property_transition_new", libclutter.}
proc setPropertyName*(transition: PropertyTransition; property_name: cstring)  {.importc:"clutter_property_transition_set_property_name", libclutter.}
proc newRect*(): Rect  {.importc:"clutter_rect_alloc", libclutter.}
proc clampToPixel*(rect: Rect)  {.importc:"clutter_rect_clamp_to_pixel", libclutter.}
proc containsPoint*(rect: Rect; point: Point): Gboolean  {.importc:"clutter_rect_contains_point", libclutter.}
proc containsRect*(a: Rect; b: Rect): Gboolean  {.importc:"clutter_rect_contains_rect", libclutter.}
proc copy*(rect: Rect): Rect  {.importc:"clutter_rect_copy", libclutter.}
proc equals*(a: Rect; b: Rect): Gboolean  {.importc:"clutter_rect_equals", libclutter.}
proc free*(rect: Rect)  {.importc:"clutter_rect_free", libclutter.}
proc getCenter*(rect: Rect; center: Point)  {.importc:"clutter_rect_get_center", libclutter.}
proc getHeight*(rect: Rect): cfloat  {.importc:"clutter_rect_get_height", libclutter.}
proc clutter_rect_get_type*(): GType  {.importc:"clutter_rect_get_type", libclutter.}
proc getWidth*(rect: Rect): cfloat  {.importc:"clutter_rect_get_width", libclutter.}
proc getX*(rect: Rect): cfloat  {.importc:"clutter_rect_get_x", libclutter.}
proc getY*(rect: Rect): cfloat  {.importc:"clutter_rect_get_y", libclutter.}
proc init*(rect: Rect; x: cfloat; y: cfloat; width: cfloat; height: cfloat): Rect  {.importc:"clutter_rect_init", libclutter.}
proc inset*(rect: Rect; d_x: cfloat; d_y: cfloat)  {.importc:"clutter_rect_inset", libclutter.}
proc intersection*(a: Rect; b: Rect; res: Rect): Gboolean  {.importc:"clutter_rect_intersection", libclutter.}
proc normalize*(rect: Rect): Rect  {.importc:"clutter_rect_normalize", libclutter.}
proc offset*(rect: Rect; d_x: cfloat; d_y: cfloat)  {.importc:"clutter_rect_offset", libclutter.}
proc union*(a: Rect; b: Rect; res: Rect)  {.importc:"clutter_rect_union", libclutter.}
proc newZeroRect*(): Rect  {.importc:"clutter_rect_zero", libclutter.}
proc getRotateActionType*(): GType  {.importc:"clutter_rotate_action_get_type", libclutter.}
proc newRotateAction*(): Action  {.importc:"clutter_rotate_action_new", libclutter.}
proc clutter_run_progress_function*(gtype: GType; initial: ptr GValue; final: ptr GValue; progress: cdouble; retval: ptr GValue): Gboolean  {.importc:"clutter_run_progress_function", libclutter.}
proc clutter_run_repaint_functions*(flags: RepaintFlags)  {.importc:"clutter_run_repaint_functions", libclutter.}
proc addSearchPaths*(script: Script; paths: ptr cstring; n_paths: Gsize)  {.importc:"clutter_script_add_search_paths", libclutter.}
proc addStates*(script: Script; name: cstring; state: State)  {.importc:"clutter_script_add_states", libclutter.}
proc connectSignals*(script: Script; user_data: Gpointer)  {.importc:"clutter_script_connect_signals", libclutter.}
proc connectSignals*(script: Script; `func`: ScriptConnectFunc; user_data: Gpointer)  {.importc:"clutter_script_connect_signals_full", libclutter.}
proc ensureObjects*(script: Script)  {.importc:"clutter_script_ensure_objects", libclutter.}
proc scriptErrorQuark*(): GQuark  {.importc:"clutter_script_error_quark", libclutter.}
proc getObject*(script: Script; name: cstring): ptr GObject  {.importc:"clutter_script_get_object", libclutter.}
proc getObjects*(script: Script; first_name: cstring): cint  {.varargs, importc:"", libclutter.}  
proc getStates*(script: Script; name: cstring): State  {.importc:"clutter_script_get_states", libclutter.}
proc getTranslationDomain*(script: Script): cstring  {.importc:"clutter_script_get_translation_domain", libclutter.}
proc clutter_script_get_type*(): GType  {.importc:"clutter_script_get_type", libclutter.}
proc getTypeFromName*(script: Script; type_name: cstring): GType  {.importc:"clutter_script_get_type_from_name", libclutter.}
proc listObjects*(script: Script): ptr GList  {.importc:"clutter_script_list_objects", libclutter.}
proc loadFromData*(script: Script; data: cstring; length: Gssize; error: ptr ptr GError): cuint  {.importc:"clutter_script_load_from_data", libclutter.}
proc loadFromFile*(script: Script; filename: cstring; error: ptr ptr GError): cuint  {.importc:"clutter_script_load_from_file", libclutter.}
proc loadFromResource*(script: Script; resource_path: cstring; error: ptr ptr GError): cuint  {.importc:"clutter_script_load_from_resource", libclutter.}
proc lookupFilename*(script: Script; filename: cstring): cstring  {.importc:"clutter_script_lookup_filename", libclutter.}
proc newScript*(): Script  {.importc:"clutter_script_new", libclutter.}
proc setTranslationDomain*(script: Script; domain: cstring)  {.importc:"clutter_script_set_translation_domain", libclutter.}
proc unmergeObjects*(script: Script; merge_id: cuint)  {.importc:"clutter_script_unmerge_objects", libclutter.}
proc getId*(scriptable: Scriptable): cstring  {.importc:"clutter_scriptable_get_id", libclutter.}
proc getScriptableType*(): GType  {.importc:"clutter_scriptable_get_type", libclutter.}
proc parseCustomNode*(scriptable: Scriptable; script: Script; value: ptr GValue; name: cstring; node: JsonNode): Gboolean  {.importc:"clutter_scriptable_parse_custom_node", libclutter.}
proc setCustomProperty*(scriptable: Scriptable; script: Script; name: cstring; value: ptr GValue)  {.importc:"clutter_scriptable_set_custom_property", libclutter.}
proc setId*(scriptable: Scriptable; id: cstring)  {.importc:"clutter_scriptable_set_id", libclutter.}
proc getScrollMode*(actor: ptr ScrollActor): ScrollMode  {.importc:"clutter_scroll_actor_get_scroll_mode", libclutter.}
proc getScrollActorType*(): GType  {.importc:"clutter_scroll_actor_get_type", libclutter.}
proc newScrollActor*(): Actor  {.importc:"clutter_scroll_actor_new", libclutter.}
proc scrollToPoint*(actor: ptr ScrollActor; point: Point)  {.importc:"clutter_scroll_actor_scroll_to_point", libclutter.}
proc scrollToRect*(actor: ptr ScrollActor; rect: Rect)  {.importc:"clutter_scroll_actor_scroll_to_rect", libclutter.}
proc setScrollMode*(actor: ptr ScrollActor; mode: ScrollMode)  {.importc:"clutter_scroll_actor_set_scroll_mode", libclutter.}
proc setSyncToVblank*(sync_to_vblank: Gboolean)  {.importc:"clutter_set_sync_to_vblank", libclutter.}
proc setWindowingBackend*(backend_type: cstring)  {.importc:"clutter_set_windowing_backend", libclutter.}
proc getDefaultSettings*(): Settings  {.importc:"clutter_settings_get_default", libclutter.}
proc getSettingsType*(): GType  {.importc:"clutter_settings_get_type", libclutter.}
proc setPropertyInternal*(settings: Settings; property: cstring; value: ptr GValue)  {.importc:"clutter_settings_set_property_internal", libclutter.}
proc getProgram*(effect: ShaderEffect): CoglHandle  {.importc:"clutter_shader_effect_get_program", libclutter.}
proc getShader*(effect: ShaderEffect): CoglHandle  {.importc:"clutter_shader_effect_get_shader", libclutter.}
proc getType*(): GType  {.importc:"clutter_shader_effect_get_type", libclutter.}
proc newShaderEffect*(shader_type: ShaderType): Effect  {.importc:"clutter_shader_effect_new", libclutter.}
proc setShaderSource*(effect: ShaderEffect; source: cstring): Gboolean  {.importc:"clutter_shader_effect_set_shader_source", libclutter.}
proc setUniform*(effect: ShaderEffect; name: cstring; gtype: GType; n_values: Gsize)  {.varargs, importc:"", libclutter.}  
proc setUniformValue*(effect: ShaderEffect; name: cstring; value: ptr GValue)  {.importc:"clutter_shader_effect_set_uniform_value", libclutter.}
proc getShaderFloatType*(): GType  {.importc:"clutter_shader_float_get_type", libclutter.}
proc getShaderIntType*(): GType  {.importc:"clutter_shader_int_get_type", libclutter.}
proc getShaderMatrixtype*(): GType  {.importc:"clutter_shader_matrix_get_type", libclutter.}
proc newSize*(): ptr Size  {.importc:"clutter_size_alloc", libclutter.}
proc copy*(size: ptr Size): ptr Size  {.importc:"clutter_size_copy", libclutter.}
proc equals*(a: ptr Size; b: ptr Size): Gboolean  {.importc:"clutter_size_equals", libclutter.}
proc free*(size: ptr Size)  {.importc:"clutter_size_free", libclutter.}
proc getSizeType*(): GType  {.importc:"clutter_size_get_type", libclutter.}
proc init*(size: ptr Size; width: cfloat; height: cfloat): ptr Size  {.importc:"clutter_size_init", libclutter.}
proc getEdges*(constraint: SnapConstraint; from_edge: ptr SnapEdge; to_edge: ptr SnapEdge)  {.importc:"clutter_snap_constraint_get_edges", libclutter.}
proc getOffset*(constraint: SnapConstraint): cfloat  {.importc:"clutter_snap_constraint_get_offset", libclutter.}
proc getSource*(constraint: SnapConstraint): Actor  {.importc:"clutter_snap_constraint_get_source", libclutter.}
proc getSnapConstraintType*(): GType  {.importc:"clutter_snap_constraint_get_type", libclutter.}
proc newSnapConstraint*(source: Actor; from_edge: SnapEdge; to_edge: SnapEdge; offset: cfloat): Constraint  {.importc:"clutter_snap_constraint_new", libclutter.}
proc setEdges*(constraint: SnapConstraint; from_edge: SnapEdge; to_edge: SnapEdge)  {.importc:"clutter_snap_constraint_set_edges", libclutter.}
proc setOffset*(constraint: SnapConstraint; offset: cfloat)  {.importc:"clutter_snap_constraint_set_offset", libclutter.}
proc setSource*(constraint: SnapConstraint; source: Actor)  {.importc:"clutter_snap_constraint_set_source", libclutter.}
proc ensureCurrent*(stage: Stage)  {.importc:"clutter_stage_ensure_current", libclutter.}
proc ensureRedraw*(stage: Stage)  {.importc:"clutter_stage_ensure_redraw", libclutter.}
proc ensureViewport*(stage: Stage)  {.importc:"clutter_stage_ensure_viewport", libclutter.}
proc event*(stage: Stage; event: Event): Gboolean  {.importc:"clutter_stage_event", libclutter.}
proc getAcceptFocus*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_accept_focus", libclutter.}
proc getActorAtPos*(stage: Stage; pick_mode: PickMode; x: cint; y: cint): Actor  {.importc:"clutter_stage_get_actor_at_pos", libclutter.}
proc getFullscreen*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_fullscreen", libclutter.}
proc getKeyFocus*(stage: Stage): Actor  {.importc:"clutter_stage_get_key_focus", libclutter.}
proc getMinimumSize*(stage: Stage; width: ptr cuint; height: ptr cuint)  {.importc:"clutter_stage_get_minimum_size", libclutter.}
proc getMotionEventsEnabled*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_motion_events_enabled", libclutter.}
proc getNoClearHint*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_no_clear_hint", libclutter.}
proc getPerspective*(stage: Stage; perspective: Perspective)  {.importc:"clutter_stage_get_perspective", libclutter.}
proc getRedrawClipBounds*(stage: Stage; clip: cairo.RectangleInt)  {.importc:"clutter_stage_get_redraw_clip_bounds", libclutter.}
proc getThrottleMotionEvents*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_throttle_motion_events", libclutter.}
proc getTitle*(stage: Stage): cstring  {.importc:"clutter_stage_get_title", libclutter.}
proc getStageType*(): GType  {.importc:"clutter_stage_get_type", libclutter.}
proc getUseAlpha*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_use_alpha", libclutter.}
proc getUserResizable*(stage: Stage): Gboolean  {.importc:"clutter_stage_get_user_resizable", libclutter.}
proc hideCursor*(stage: Stage)  {.importc:"clutter_stage_hide_cursor", libclutter.}
proc getDefaultStageManager*(): StageManager  {.importc:"clutter_stage_manager_get_default", libclutter.}
proc getDefaultStage*(stage_manager: StageManager): Stage  {.importc:"clutter_stage_manager_get_default_stage", libclutter.}
proc getStageManagerType*(): GType  {.importc:"clutter_stage_manager_get_type", libclutter.}
proc listStages*(stage_manager: StageManager): ptr GSList  {.importc:"clutter_stage_manager_list_stages", libclutter.}
proc peekStages*(stage_manager: StageManager): ptr GSList  {.importc:"clutter_stage_manager_peek_stages", libclutter.}
proc newStage*(): Actor  {.importc:"clutter_stage_new", libclutter.}
proc readPixels*(stage: Stage; x: cint; y: cint; width: cint; height: cint): ptr Guchar  {.importc:"clutter_stage_read_pixels", libclutter.}
proc setAcceptFocus*(stage: Stage; accept_focus: Gboolean)  {.importc:"clutter_stage_set_accept_focus", libclutter.}
proc setFullscreen*(stage: Stage; fullscreen: Gboolean)  {.importc:"clutter_stage_set_fullscreen", libclutter.}
proc setKeyFocus*(stage: Stage; actor: Actor)  {.importc:"clutter_stage_set_key_focus", libclutter.}
proc setMinimumSize*(stage: Stage; width: cuint; height: cuint)  {.importc:"clutter_stage_set_minimum_size", libclutter.}
proc setMotionEventsEnabled*(stage: Stage; enabled: Gboolean)  {.importc:"clutter_stage_set_motion_events_enabled", libclutter.}
proc setNoClearHint*(stage: Stage; no_clear: Gboolean)  {.importc:"clutter_stage_set_no_clear_hint", libclutter.}
proc setPerspective*(stage: Stage; perspective: Perspective)  {.importc:"clutter_stage_set_perspective", libclutter.}
proc setThrottleMotionEvents*(stage: Stage; throttle: Gboolean)  {.importc:"clutter_stage_set_throttle_motion_events", libclutter.}
proc setTitle*(stage: Stage; title: cstring)  {.importc:"clutter_stage_set_title", libclutter.}
proc setUseAlpha*(stage: Stage; use_alpha: Gboolean)  {.importc:"clutter_stage_set_use_alpha", libclutter.}
proc setUserResizable*(stage: Stage; resizable: Gboolean)  {.importc:"clutter_stage_set_user_resizable", libclutter.}
proc showCursor*(stage: Stage)  {.importc:"clutter_stage_show_cursor", libclutter.}
proc addRedrawClip*(window: StageWindow; stage_clip: cairo.RectangleInt)  {.importc:"clutter_stage_window_add_redraw_clip", libclutter.}
proc canClipRedraws*(window: StageWindow): Gboolean  {.importc:"clutter_stage_window_can_clip_redraws", libclutter.}
proc clearUpdateTime*(window: StageWindow)  {.importc:"clutter_stage_window_clear_update_time", libclutter.}
proc dirtyBackBuffer*(window: StageWindow)  {.importc:"clutter_stage_window_dirty_back_buffer", libclutter.}
proc getActiveFramebuffer*(window: StageWindow): CoglFramebuffer  {.importc:"clutter_stage_window_get_active_framebuffer", libclutter.}
proc getDirtyPixel*(window: StageWindow; x: ptr cint; y: ptr cint)  {.importc:"clutter_stage_window_get_dirty_pixel", libclutter.}
proc getGeometry*(window: StageWindow; geometry: cairo.RectangleInt)  {.importc:"clutter_stage_window_get_geometry", libclutter.}
proc getRedrawClipBounds*(window: StageWindow; clip: cairo.RectangleInt): Gboolean  {.importc:"clutter_stage_window_get_redraw_clip_bounds", libclutter.}
proc getScaleFactor*(window: StageWindow): cint  {.importc:"clutter_stage_window_get_scale_factor", libclutter.}
proc clutter_stage_window_get_type*(): GType  {.importc:"clutter_stage_window_get_type", libclutter.}
proc getUpdateTime*(window: StageWindow): int64  {.importc:"clutter_stage_window_get_update_time", libclutter.}
proc getWrapper*(window: StageWindow): Actor  {.importc:"clutter_stage_window_get_wrapper", libclutter.}
proc hasRedrawClips*(window: StageWindow): Gboolean  {.importc:"clutter_stage_window_has_redraw_clips", libclutter.}
proc hide*(window: StageWindow)  {.importc:"clutter_stage_window_hide", libclutter.}
proc ignoringRedrawClips*(window: StageWindow): Gboolean  {.importc:"clutter_stage_window_ignoring_redraw_clips", libclutter.}
proc realize*(window: StageWindow): Gboolean  {.importc:"clutter_stage_window_realize", libclutter.}
proc redraw*(window: StageWindow)  {.importc:"clutter_stage_window_redraw", libclutter.}
proc resize*(window: StageWindow; width: cint; height: cint)  {.importc:"clutter_stage_window_resize", libclutter.}
proc scheduleUpdate*(window: StageWindow; sync_delay: cint)  {.importc:"clutter_stage_window_schedule_update", libclutter.}
proc setAcceptFocus*(window: StageWindow; accept_focus: Gboolean)  {.importc:"clutter_stage_window_set_accept_focus", libclutter.}
proc setCursorVisible*(window: StageWindow; is_visible: Gboolean)  {.importc:"clutter_stage_window_set_cursor_visible", libclutter.}
proc setFullscreen*(window: StageWindow; is_fullscreen: Gboolean)  {.importc:"clutter_stage_window_set_fullscreen", libclutter.}
proc setScaleFactor*(window: StageWindow; factor: cint)  {.importc:"clutter_stage_window_set_scale_factor", libclutter.}
proc setTitle*(window: StageWindow; title: cstring)  {.importc:"clutter_stage_window_set_title", libclutter.}
proc setUserResizable*(window: StageWindow; is_resizable: Gboolean)  {.importc:"clutter_stage_window_set_user_resizable", libclutter.}
proc show*(window: StageWindow; do_raise: Gboolean)  {.importc:"clutter_stage_window_show", libclutter.}
proc unrealize*(window: StageWindow)  {.importc:"clutter_stage_window_unrealize", libclutter.}
proc getSwipeActionType*(): GType  {.importc:"clutter_swipe_action_get_type", libclutter.}
proc newSwipeAction*(): Action  {.importc:"clutter_swipe_action_new", libclutter.}
proc getTapActiontype*(): GType  {.importc:"clutter_tap_action_get_type", libclutter.}
proc newTapAction*(): Action  {.importc:"clutter_tap_action_new", libclutter.}
proc add*(test_path: cstring; test_func: GTestFunc)  {.importc:"clutter_test_add", libclutter.}
proc add*(test_path: cstring; test_func: GTestDataFunc; test_data: Gpointer)  {.importc:"clutter_test_add_data", libclutter.}
proc add*(test_path: cstring; test_func: GTestDataFunc; test_data: Gpointer; test_notify: GDestroyNotify)  {.importc:"clutter_test_add_data_full", libclutter.}
proc checkActorAtPoint*(stage: Actor; point: Point; actor: Actor; result: ptr Actor): Gboolean  {.importc:"clutter_test_check_actor_at_point", libclutter.}
proc checkColorAtPoint*(stage: Actor; point: Point; color: Color; result: Color): Gboolean  {.importc:"clutter_test_check_color_at_point", libclutter.}
proc getStage*(): Actor  {.importc:"clutter_test_get_stage", libclutter.}
proc initTest*(argc: ptr cint; argv: ptr cstringArray)  {.importc:"clutter_test_init", libclutter.}
proc runTest*(): cint  {.importc:"clutter_test_run", libclutter.}
proc activate*(self: Text): Gboolean  {.importc:"clutter_text_activate", libclutter.}
proc deleteText*(buffer: TextBuffer; position: cuint; n_chars: cint): cuint  {.importc:"clutter_text_buffer_delete_text", libclutter.}
proc emitDeletedText*(buffer: TextBuffer; position: cuint; n_chars: cuint)  {.importc:"clutter_text_buffer_emit_deleted_text", libclutter.}
proc emitInsertedText*(buffer: TextBuffer; position: cuint; chars: cstring; n_chars: cuint)  {.importc:"clutter_text_buffer_emit_inserted_text", libclutter.}
proc getBytes*(buffer: TextBuffer): Gsize  {.importc:"clutter_text_buffer_get_bytes", libclutter.}
proc getLength*(buffer: TextBuffer): cuint  {.importc:"clutter_text_buffer_get_length", libclutter.}
proc getMaxLength*(buffer: TextBuffer): cint  {.importc:"clutter_text_buffer_get_max_length", libclutter.}
proc getText*(buffer: TextBuffer): cstring  {.importc:"clutter_text_buffer_get_text", libclutter.}
proc getTextBufferType*(): GType  {.importc:"clutter_text_buffer_get_type", libclutter.}
proc insertText*(buffer: TextBuffer; position: cuint; chars: cstring; n_chars: cint): cuint  {.importc:"clutter_text_buffer_insert_text", libclutter.}
proc newTextbuffer*(): TextBuffer  {.importc:"clutter_text_buffer_new", libclutter.}
proc newTextBuffer*(text: cstring; text_len: Gssize): TextBuffer  {.importc:"clutter_text_buffer_new_with_text", libclutter.}
proc setMaxLength*(buffer: TextBuffer; max_length: cint)  {.importc:"clutter_text_buffer_set_max_length", libclutter.}
proc setText*(buffer: TextBuffer; chars: cstring; n_chars: cint)  {.importc:"clutter_text_buffer_set_text", libclutter.}
proc coordsToPosition*(self: Text; x: cfloat; y: cfloat): cint  {.importc:"clutter_text_coords_to_position", libclutter.}
proc deleteChars*(self: Text; n_chars: cuint)  {.importc:"clutter_text_delete_chars", libclutter.}
proc deleteSelection*(self: Text): Gboolean  {.importc:"clutter_text_delete_selection", libclutter.}
proc deleteText*(self: Text; start_pos: Gssize; end_pos: Gssize)  {.importc:"clutter_text_delete_text", libclutter.}
proc getActivatable*(self: Text): Gboolean  {.importc:"clutter_text_get_activatable", libclutter.}
proc getAttributes*(self: Text): pango.AttrList  {.importc:"clutter_text_get_attributes", libclutter.}
proc getBuffer*(self: Text): TextBuffer  {.importc:"clutter_text_get_buffer", libclutter.}
proc getChars*(self: Text; start_pos: Gssize; end_pos: Gssize): cstring  {.importc:"clutter_text_get_chars", libclutter.}
proc getColor*(self: Text; color: Color)  {.importc:"clutter_text_get_color", libclutter.}
proc getCursorColor*(self: Text; color: Color)  {.importc:"clutter_text_get_cursor_color", libclutter.}
proc getCursorPosition*(self: Text): cint  {.importc:"clutter_text_get_cursor_position", libclutter.}
proc getCursorRect*(self: Text; rect: Rect)  {.importc:"clutter_text_get_cursor_rect", libclutter.}
proc getCursorSize*(self: Text): cuint  {.importc:"clutter_text_get_cursor_size", libclutter.}
proc getCursorVisible*(self: Text): Gboolean  {.importc:"clutter_text_get_cursor_visible", libclutter.}
proc getEditable*(self: Text): Gboolean  {.importc:"clutter_text_get_editable", libclutter.}
proc getEllipsize*(self: Text): pango.EllipsizeMode  {.importc:"clutter_text_get_ellipsize", libclutter.}
proc getFontDescription*(self: Text): pango.FontDescription  {.importc:"clutter_text_get_font_description", libclutter.}
proc getFontName*(self: Text): cstring  {.importc:"clutter_text_get_font_name", libclutter.}
proc getJustify*(self: Text): Gboolean  {.importc:"clutter_text_get_justify", libclutter.}
proc getLayout*(self: Text): pango.Layout  {.importc:"clutter_text_get_layout", libclutter.}
proc getLayoutOffsets*(self: Text; x: ptr cint; y: ptr cint)  {.importc:"clutter_text_get_layout_offsets", libclutter.}
proc getLineAlignment*(self: Text): pango.Alignment  {.importc:"clutter_text_get_line_alignment", libclutter.}
proc getLineWrap*(self: Text): Gboolean  {.importc:"clutter_text_get_line_wrap", libclutter.}
proc getLineWrapMode*(self: Text): pango.WrapMode  {.importc:"clutter_text_get_line_wrap_mode", libclutter.}
proc getMaxLength*(self: Text): cint  {.importc:"clutter_text_get_max_length", libclutter.}
proc getPasswordChar*(self: Text): Gunichar  {.importc:"clutter_text_get_password_char", libclutter.}
proc getSelectable*(self: Text): Gboolean  {.importc:"clutter_text_get_selectable", libclutter.}
proc getSelectedText_Clor*(self: Text; color: Color)  {.importc:"clutter_text_get_selected_text_color", libclutter.}
proc getSelection*(self: Text): cstring  {.importc:"clutter_text_get_selection", libclutter.}
proc getSelectionBound*(self: Text): cint  {.importc:"clutter_text_get_selection_bound", libclutter.}
proc getSelectionColor*(self: Text; color: Color)  {.importc:"clutter_text_get_selection_color", libclutter.}
proc getSingleLineMode*(self: Text): Gboolean  {.importc:"clutter_text_get_single_line_mode", libclutter.}
proc get_text*(self: Text): cstring  {.importc:"clutter_text_get_text", libclutter.}
proc getTextType*(): GType  {.importc:"clutter_text_get_type", libclutter.}
proc getUseMarkup*(self: Text): Gboolean  {.importc:"clutter_text_get_use_markup", libclutter.}
proc insertText*(self: Text; text: cstring; position: Gssize)  {.importc:"clutter_text_insert_text", libclutter.}
proc insertText*(self: Text; wc: Gunichar)  {.importc:"clutter_text_insert_unichar", libclutter.}
proc newText*(): Actor  {.importc:"clutter_text_new", libclutter.}
proc newText*(font_name: cstring; text: cstring; color: Color): Actor  {.importc:"clutter_text_new_full", libclutter.}
proc newText*(buffer: TextBuffer): Actor  {.importc:"clutter_text_new_with_buffer", libclutter.}
proc newText*(font_name: cstring; text: cstring): Actor  {.importc:"clutter_text_new_with_text", libclutter.}
proc getTextNodeType*(): GType  {.importc:"clutter_text_node_get_type", libclutter.}
proc newTextNode*(layout: pango.Layout; color: Color): PaintNode  {.importc:"clutter_text_node_new", libclutter.}
proc positionToCoords*(self: Text; position: cint; x: ptr cfloat; y: ptr cfloat; line_height: ptr cfloat): Gboolean  {.importc:"clutter_text_position_to_coords", libclutter.}
proc setActivatable*(self: Text; activatable: Gboolean)  {.importc:"clutter_text_set_activatable", libclutter.}
proc setAttributes*(self: Text; attrs: pango.AttrList)  {.importc:"clutter_text_set_attributes", libclutter.}
proc setBuffer*(self: Text; buffer: TextBuffer)  {.importc:"clutter_text_set_buffer", libclutter.}
proc setColor*(self: Text; color: Color)  {.importc:"clutter_text_set_color", libclutter.}
proc setCursorColor*(self: Text; color: Color)  {.importc:"clutter_text_set_cursor_color", libclutter.}
proc setCursorPosition*(self: Text; position: cint)  {.importc:"clutter_text_set_cursor_position", libclutter.}
proc setCursorSize*(self: Text; size: cint)  {.importc:"clutter_text_set_cursor_size", libclutter.}
proc setCursorVisible*(self: Text; cursor_visible: Gboolean)  {.importc:"clutter_text_set_cursor_visible", libclutter.}
proc setEditable*(self: Text; editable: Gboolean)  {.importc:"clutter_text_set_editable", libclutter.}
proc setEllipsize*(self: Text; mode: pango.EllipsizeMode)  {.importc:"clutter_text_set_ellipsize", libclutter.}
proc setFontDescription*(self: Text; font_desc: pango.FontDescription)  {.importc:"clutter_text_set_font_description", libclutter.}
proc setFontName*(self: Text; font_name: cstring)  {.importc:"clutter_text_set_font_name", libclutter.}
proc setJustify*(self: Text; justify: Gboolean)  {.importc:"clutter_text_set_justify", libclutter.}
proc setLineAlignment*(self: Text; alignment: pango.Alignment)  {.importc:"clutter_text_set_line_alignment", libclutter.}
proc setLineWrap*(self: Text; line_wrap: Gboolean)  {.importc:"clutter_text_set_line_wrap", libclutter.}
proc setLineWrapMode*(self: Text; wrap_mode: pango.WrapMode)  {.importc:"clutter_text_set_line_wrap_mode", libclutter.}
proc setMarkup*(self: Text; markup: cstring)  {.importc:"clutter_text_set_markup", libclutter.}
proc setMaxLength*(self: Text; max: cint)  {.importc:"clutter_text_set_max_length", libclutter.}
proc setPasswordChar*(self: Text; wc: Gunichar)  {.importc:"clutter_text_set_password_char", libclutter.}
proc setPreeditString*(self: Text; preedit_str: cstring; preedit_attrs: pango.AttrList; cursor_pos: cuint)  {.importc:"clutter_text_set_preedit_string", libclutter.}
proc setSelectable*(self: Text; selectable: Gboolean)  {.importc:"clutter_text_set_selectable", libclutter.}
proc setSelectedTextColor*(self: Text; color: Color)  {.importc:"clutter_text_set_selected_text_color", libclutter.}
proc setSelection*(self: Text; start_pos: Gssize; end_pos: Gssize)  {.importc:"clutter_text_set_selection", libclutter.}
proc setSelectionBound*(self: Text; selection_bound: cint)  {.importc:"clutter_text_set_selection_bound", libclutter.}
proc setSelectionColor*(self: Text; color: Color)  {.importc:"clutter_text_set_selection_color", libclutter.}
proc setSingleLineMode*(self: Text; single_line: Gboolean)  {.importc:"clutter_text_set_single_line_mode", libclutter.}
proc setText*(self: Text; text: cstring)  {.importc:"clutter_text_set_text", libclutter.}
proc setUseMarkup*(self: Text; setting: Gboolean)  {.importc:"clutter_text_set_use_markup", libclutter.}
proc errorTextureQuark*(): GQuark  {.importc:"clutter_texture_error_quark", libclutter.}
proc getTextureType*(): GType  {.importc:"clutter_texture_get_type", libclutter.}
proc getTextureNodeType*(): GType  {.importc:"clutter_texture_node_get_type", libclutter.}
proc newTextureNode*(texture: CoglTexture; color: Color; min_filter: ScalingFilter; mag_filter: ScalingFilter): PaintNode  {.importc:"clutter_texture_node_new", libclutter.}
proc acquireThreadsLock*()  {.importc:"clutter_threads_acquire_lock", libclutter.}
proc addThreadsIdle*(`func`: GSourceFunc; data: Gpointer): cuint  {.importc:"clutter_threads_add_idle", libclutter.}
proc addThreadsIdle*(priority: cint; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): cuint  {.importc:"clutter_threads_add_idle_full", libclutter.}
proc addThreadsRepaintFunc*(`func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): cuint  {.importc:"clutter_threads_add_repaint_func", libclutter.}
proc addThreadsRepaintFunc*(flags: RepaintFlags; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): cuint  {.importc:"clutter_threads_add_repaint_func_full", libclutter.}
proc addThreadsTimeout*(interval: cuint; `func`: GSourceFunc; data: Gpointer): cuint  {.importc:"clutter_threads_add_timeout", libclutter.}
proc addThreadsTimeout*(priority: cint; interval: cuint; `func`: GSourceFunc; data: Gpointer; notify: GDestroyNotify): cuint  {.importc:"clutter_threads_add_timeout_full", libclutter.}
proc dispatchThreads*(data: Gpointer): Gboolean  {.importc:"clutter_threads_dispatch", libclutter.}
proc dispatchThreadsFree*(data: Gpointer)  {.importc:"clutter_threads_dispatch_free", libclutter.}
proc releaseThreadsLock*()  {.importc:"clutter_threads_release_lock", libclutter.}
proc removeThreadsRepaintFunc*(handle_id: cuint)  {.importc:"clutter_threads_remove_repaint_func", libclutter.}
proc setThreadsLockFunctions*(enter_fn: GCallback; leave_fn: GCallback)  {.importc:"clutter_threads_set_lock_functions", libclutter.}
proc addMarker*(timeline: Timeline; marker_name: cstring; progress: cdouble)  {.importc:"clutter_timeline_add_marker", libclutter.}
proc addMarkerAtTime*(timeline: Timeline; marker_name: cstring; msecs: cuint)  {.importc:"clutter_timeline_add_marker_at_time", libclutter.}
proc advance*(timeline: Timeline; tick_time: int64)  {.importc:"clutter_timeline_advance", libclutter.}
proc advance*(timeline: Timeline; msecs: cuint)  {.importc:"clutter_timeline_advance", libclutter.}
proc advance_to_marker*(timeline: Timeline; marker_name: cstring)  {.importc:"clutter_timeline_advance_to_marker", libclutter.}
proc doTick*(timeline: Timeline; tick_time: int64)  {.importc:"clutter_timeline_do_tick", libclutter.}
proc getAutoReverse*(timeline: Timeline): Gboolean  {.importc:"clutter_timeline_get_auto_reverse", libclutter.}
proc getCubicBezierProgress*(timeline: Timeline; c_1: Point; c_2: Point): Gboolean  {.importc:"clutter_timeline_get_cubic_bezier_progress", libclutter.}
proc getCurrentRepeat*(timeline: Timeline): cint  {.importc:"clutter_timeline_get_current_repeat", libclutter.}
proc getDelay*(timeline: Timeline): cuint  {.importc:"clutter_timeline_get_delay", libclutter.}
proc getDelta*(timeline: Timeline): int64  {.importc:"clutter_timeline_get_delta", libclutter.}
proc getDelta*(timeline: Timeline): cuint  {.importc:"clutter_timeline_get_delta", libclutter.}
proc getDirection*(timeline: Timeline): TimelineDirection  {.importc:"clutter_timeline_get_direction", libclutter.}
proc getDuration*(timeline: Timeline): cuint  {.importc:"clutter_timeline_get_duration", libclutter.}
proc getDurationHint*(timeline: Timeline): int64  {.importc:"clutter_timeline_get_duration_hint", libclutter.}
proc getElapsedTime*(timeline: Timeline): cuint  {.importc:"clutter_timeline_get_elapsed_time", libclutter.}
proc getProgress*(timeline: Timeline): cdouble  {.importc:"clutter_timeline_get_progress", libclutter.}
proc getProgressMode*(timeline: Timeline): AnimationMode  {.importc:"clutter_timeline_get_progress_mode", libclutter.}
proc getRepeatCount*(timeline: Timeline): cint  {.importc:"clutter_timeline_get_repeat_count", libclutter.}
proc getStepProgress*(timeline: Timeline; n_steps: ptr cint; step_mode: ptr StepMode): Gboolean  {.importc:"clutter_timeline_get_step_progress", libclutter.}
proc getTimelineType*(): GType  {.importc:"clutter_timeline_get_type", libclutter.}
proc hasMarker*(timeline: Timeline; marker_name: cstring): Gboolean  {.importc:"clutter_timeline_has_marker", libclutter.}
proc isPlaying*(timeline: Timeline): Gboolean  {.importc:"clutter_timeline_is_playing", libclutter.}
proc listMarkers*(timeline: Timeline; msecs: cint; n_markers: ptr Gsize): ptr cstring  {.importc:"clutter_timeline_list_markers", libclutter.}
proc newTimeline*(msecs: cuint): Timeline  {.importc:"clutter_timeline_new", libclutter.}
proc pause*(timeline: Timeline)  {.importc:"clutter_timeline_pause", libclutter.}
proc removeMarker*(timeline: Timeline; marker_name: cstring)  {.importc:"clutter_timeline_remove_marker", libclutter.}
proc rewind*(timeline: Timeline)  {.importc:"clutter_timeline_rewind", libclutter.}
proc setAutoReverse*(timeline: Timeline; reverse: Gboolean)  {.importc:"clutter_timeline_set_auto_reverse", libclutter.}
proc setCubicBezierProgress*(timeline: Timeline; c_1: Point; c_2: Point)  {.importc:"clutter_timeline_set_cubic_bezier_progress", libclutter.}
proc setDelay*(timeline: Timeline; msecs: cuint)  {.importc:"clutter_timeline_set_delay", libclutter.}
proc setDirection*(timeline: Timeline; direction: TimelineDirection)  {.importc:"clutter_timeline_set_direction", libclutter.}
proc setDuration*(timeline: Timeline; msecs: cuint)  {.importc:"clutter_timeline_set_duration", libclutter.}
proc setProgressFunc*(timeline: Timeline; `func`: TimelineProgressFunc; data: Gpointer; notify: GDestroyNotify)  {.importc:"clutter_timeline_set_progress_func", libclutter.}
proc setProgressMode*(timeline: Timeline; mode: AnimationMode)  {.importc:"clutter_timeline_set_progress_mode", libclutter.}
proc setRepeatCount*(timeline: Timeline; count: cint)  {.importc:"clutter_timeline_set_repeat_count", libclutter.}
proc setStepProgress*(timeline: Timeline; n_steps: cint; step_mode: StepMode)  {.importc:"clutter_timeline_set_step_progress", libclutter.}
proc skip*(timeline: Timeline; msecs: cuint)  {.importc:"clutter_timeline_skip", libclutter.}
proc start*(timeline: Timeline)  {.importc:"clutter_timeline_start", libclutter.}
proc stop*(timeline: Timeline)  {.importc:"clutter_timeline_stop", libclutter.}
proc getAnimatable*(transition: Transition): Animatable  {.importc:"clutter_transition_get_animatable", libclutter.}
proc getInterval*(transition: Transition): Interval  {.importc:"clutter_transition_get_interval", libclutter.}
proc getRemoveOnComplete*(transition: Transition): Gboolean  {.importc:"clutter_transition_get_remove_on_complete", libclutter.}
proc getTransitionType*(): GType  {.importc:"clutter_transition_get_type", libclutter.}
proc addTransition*(group: TransitionGroup; transition: Transition)  {.importc:"clutter_transition_group_add_transition", libclutter.}
proc getTransitionGroupType*(): GType  {.importc:"clutter_transition_group_get_type", libclutter.}
proc newTransitionGroup*(): Transition  {.importc:"clutter_transition_group_new", libclutter.}
proc removeAll*(group: TransitionGroup)  {.importc:"clutter_transition_group_remove_all", libclutter.}
proc removeTransition*(group: TransitionGroup; transition: Transition)  {.importc:"clutter_transition_group_remove_transition", libclutter.}
proc setAnimatable*(transition: Transition; animatable: Animatable)  {.importc:"clutter_transition_set_animatable", libclutter.}
proc setFrom*(transition: Transition; value_type: GType)  {.varargs, importc:"clutter_transition_set_from", libclutter.}  
proc setFromValue*(transition: Transition; value: ptr GValue)  {.importc:"clutter_transition_set_from_value", libclutter.}
proc setInterval*(transition: Transition; interval: Interval)  {.importc:"clutter_transition_set_interval", libclutter.}
proc setRemoveOnComplete*(transition: Transition; remove_complete: Gboolean)  {.importc:"clutter_transition_set_remove_on_complete", libclutter.}
proc setTo*(transition: Transition; value_type: GType)  {.varargs, importc:"clutter_transition_set_to", libclutter.}  
proc setToValue*(transition: Transition; value: ptr GValue)  {.importc:"clutter_transition_set_to_value", libclutter.}
proc ungrabKeyboard*()  {.importc:"clutter_ungrab_keyboard", libclutter.}
proc ungrabPointer*()  {.importc:"clutter_ungrab_pointer", libclutter.}
proc unicodeToKeysym*(wc: cuint): cuint  {.importc:"clutter_unicode_to_keysym", libclutter.}
proc fullyTransformVertices*(modelview: CoglMatrix; projection: CoglMatrix; viewport: ptr cfloat; vertices_in: Vertex; vertices_out: Vertex; n_vertices: cint)  {.importc:"clutter_util_fully_transform_vertices", libclutter.}
proc decompose*(src: ptr Matrix; scale_p: Vertex; shear_p: array[3, cfloat]; rotate_p: Vertex; translate_p: Vertex; perspective_p: ptr Vertex4): Gboolean  {.importc:"clutter_util_matrix_decompose", libclutter.}
proc determinant*(matrix: ptr Matrix): cfloat  {.importc:"clutter_util_matrix_determinant", libclutter.}
proc skewXY*(matrix: ptr Matrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_xy", libclutter.}
proc skewXZ*(matrix: ptr Matrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_xz", libclutter.}
proc skewYZ*(matrix: ptr Matrix; factor: cfloat)  {.importc:"clutter_util_matrix_skew_yz", libclutter.}
proc union*(src1: cairo.RectangleInt; src2: cairo.RectangleInt; dest: cairo.RectangleInt)  {.importc:"clutter_util_rectangle_union", libclutter.}
proc interpolate*(a: ptr Vertex4; b: ptr Vertex4; progress: cdouble; res: ptr Vertex4)  {.importc:"clutter_util_vertex4_interpolate", libclutter.}
proc dupPaintNode*(value: ptr GValue): Gpointer  {.importc:"clutter_value_dup_paint_node", libclutter.}
proc getColor*(value: ptr GValue): Color  {.importc:"clutter_value_get_color", libclutter.}
proc getPaintNode*(value: ptr GValue): Gpointer  {.importc:"clutter_value_get_paint_node", libclutter.}
proc getShaderFloat*(value: ptr GValue; length: ptr Gsize): ptr cfloat  {.importc:"clutter_value_get_shader_float", libclutter.}
proc getShaderInt*(value: ptr GValue; length: ptr Gsize): ptr cint  {.importc:"clutter_value_get_shader_int", libclutter.}
proc getShaderMatrix*(value: ptr GValue; length: ptr Gsize): ptr cfloat  {.importc:"clutter_value_get_shader_matrix", libclutter.}
proc setColor*(value: ptr GValue; color: Color)  {.importc:"clutter_value_set_color", libclutter.}
proc setPaintNode*(value: ptr GValue; node: Gpointer)  {.importc:"clutter_value_set_paint_node", libclutter.}
proc setShaderFloat*(value: ptr GValue; size: cint; floats: ptr cfloat)  {.importc:"clutter_value_set_shader_float", libclutter.}
proc setShaderInt*(value: ptr GValue; size: cint; ints: ptr cint)  {.importc:"clutter_value_set_shader_int", libclutter.}
proc setShaderMatrix*(value: ptr GValue; size: cint; matrix: ptr cfloat)  {.importc:"clutter_value_set_shader_matrix", libclutter.}
proc takePaintNode*(value: ptr GValue; node: Gpointer)  {.importc:"clutter_value_take_paint_node", libclutter.}
proc newVertex*(): Vertex  {.importc:"clutter_vertex_alloc", libclutter.}
proc copy*(vertex: Vertex): Vertex  {.importc:"clutter_vertex_copy", libclutter.}
proc equal*(vertex_a: Vertex; vertex_b: Vertex): Gboolean  {.importc:"clutter_vertex_equal", libclutter.}
proc free*(vertex: Vertex)  {.importc:"clutter_vertex_free", libclutter.}
proc getVertexType*(): GType  {.importc:"clutter_vertex_get_type", libclutter.}
proc init*(vertex: Vertex; x: cfloat; y: cfloat; z: cfloat): Vertex  {.importc:"clutter_vertex_init", libclutter.}
proc newVertex*(x: cfloat; y: cfloat; z: cfloat): Vertex  {.importc:"clutter_vertex_new", libclutter.}
proc object_info_free*(data: Gpointer)  {.importc:"object_info_free", libclutter.}
proc property_info_free*(data: Gpointer)  {.importc:"property_info_free", libclutter.}